
A5_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b2c  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e60  08008e60  00018e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e68  08008e68  00018e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  20000000  08008e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000984  200001f8  08009068  000201f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000b7c  08009068  00020b7c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015162  00000000  00000000  0002022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e79  00000000  00000000  00035390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f88  00000000  00000000  00038210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e80  00000000  00000000  00039198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000336d6  00000000  00000000  0003a018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013f3e  00000000  00000000  0006d6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d4b8  00000000  00000000  0008162c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001beae4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f50  00000000  00000000  001beb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	200001f8 	.word	0x200001f8
 8000250:	00000000 	.word	0x00000000
 8000254:	08008d48 	.word	0x08008d48

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	200001fc 	.word	0x200001fc
 8000270:	08008d48 	.word	0x08008d48

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b982 	b.w	80005a0 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ba:	4604      	mov	r4, r0
 80002bc:	460f      	mov	r7, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d148      	bne.n	8000354 <__udivmoddi4+0xa0>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d961      	bls.n	800038c <__udivmoddi4+0xd8>
 80002c8:	fab2 f382 	clz	r3, r2
 80002cc:	b143      	cbz	r3, 80002e0 <__udivmoddi4+0x2c>
 80002ce:	f1c3 0120 	rsb	r1, r3, #32
 80002d2:	409f      	lsls	r7, r3
 80002d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d8:	409c      	lsls	r4, r3
 80002da:	fa20 f101 	lsr.w	r1, r0, r1
 80002de:	430f      	orrs	r7, r1
 80002e0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002e4:	fa1f fe8c 	uxth.w	lr, ip
 80002e8:	0c22      	lsrs	r2, r4, #16
 80002ea:	fbb7 f6f1 	udiv	r6, r7, r1
 80002ee:	fb01 7716 	mls	r7, r1, r6, r7
 80002f2:	fb06 f00e 	mul.w	r0, r6, lr
 80002f6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002fa:	4290      	cmp	r0, r2
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x5c>
 80002fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000302:	f106 37ff 	add.w	r7, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x5a>
 8000308:	4290      	cmp	r0, r2
 800030a:	f200 8137 	bhi.w	800057c <__udivmoddi4+0x2c8>
 800030e:	463e      	mov	r6, r7
 8000310:	1a12      	subs	r2, r2, r0
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb2 f0f1 	udiv	r0, r2, r1
 8000318:	fb01 2210 	mls	r2, r1, r0, r2
 800031c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000320:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000324:	45a6      	cmp	lr, r4
 8000326:	d908      	bls.n	800033a <__udivmoddi4+0x86>
 8000328:	eb1c 0404 	adds.w	r4, ip, r4
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x84>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f200 811c 	bhi.w	8000570 <__udivmoddi4+0x2bc>
 8000338:	4610      	mov	r0, r2
 800033a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033e:	eba4 040e 	sub.w	r4, r4, lr
 8000342:	2600      	movs	r6, #0
 8000344:	b11d      	cbz	r5, 800034e <__udivmoddi4+0x9a>
 8000346:	40dc      	lsrs	r4, r3
 8000348:	2300      	movs	r3, #0
 800034a:	e9c5 4300 	strd	r4, r3, [r5]
 800034e:	4631      	mov	r1, r6
 8000350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0xb8>
 8000358:	2d00      	cmp	r5, #0
 800035a:	f000 80fd 	beq.w	8000558 <__udivmoddi4+0x2a4>
 800035e:	2600      	movs	r6, #0
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	4630      	mov	r0, r6
 8000366:	4631      	mov	r1, r6
 8000368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036c:	fab3 f683 	clz	r6, r3
 8000370:	2e00      	cmp	r6, #0
 8000372:	d14b      	bne.n	800040c <__udivmoddi4+0x158>
 8000374:	428b      	cmp	r3, r1
 8000376:	f0c0 80f2 	bcc.w	800055e <__udivmoddi4+0x2aa>
 800037a:	4282      	cmp	r2, r0
 800037c:	f240 80ef 	bls.w	800055e <__udivmoddi4+0x2aa>
 8000380:	4630      	mov	r0, r6
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e3      	beq.n	800034e <__udivmoddi4+0x9a>
 8000386:	e9c5 4700 	strd	r4, r7, [r5]
 800038a:	e7e0      	b.n	800034e <__udivmoddi4+0x9a>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xdc>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f382 	clz	r3, r2
 8000394:	2b00      	cmp	r3, #0
 8000396:	f040 809d 	bne.w	80004d4 <__udivmoddi4+0x220>
 800039a:	1a89      	subs	r1, r1, r2
 800039c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a0:	b297      	uxth	r7, r2
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f2fe 	udiv	r2, r1, lr
 80003aa:	fb0e 1112 	mls	r1, lr, r2, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb07 f002 	mul.w	r0, r7, r2
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d90f      	bls.n	80003da <__udivmoddi4+0x126>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f102 38ff 	add.w	r8, r2, #4294967295
 80003c2:	bf2c      	ite	cs
 80003c4:	f04f 0901 	movcs.w	r9, #1
 80003c8:	f04f 0900 	movcc.w	r9, #0
 80003cc:	4288      	cmp	r0, r1
 80003ce:	d903      	bls.n	80003d8 <__udivmoddi4+0x124>
 80003d0:	f1b9 0f00 	cmp.w	r9, #0
 80003d4:	f000 80cf 	beq.w	8000576 <__udivmoddi4+0x2c2>
 80003d8:	4642      	mov	r2, r8
 80003da:	1a09      	subs	r1, r1, r0
 80003dc:	b2a4      	uxth	r4, r4
 80003de:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e6:	fb00 f707 	mul.w	r7, r0, r7
 80003ea:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ee:	42a7      	cmp	r7, r4
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x150>
 80003f2:	eb1c 0404 	adds.w	r4, ip, r4
 80003f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x14e>
 80003fc:	42a7      	cmp	r7, r4
 80003fe:	f200 80b4 	bhi.w	800056a <__udivmoddi4+0x2b6>
 8000402:	4608      	mov	r0, r1
 8000404:	1be4      	subs	r4, r4, r7
 8000406:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800040a:	e79b      	b.n	8000344 <__udivmoddi4+0x90>
 800040c:	f1c6 0720 	rsb	r7, r6, #32
 8000410:	40b3      	lsls	r3, r6
 8000412:	fa01 f406 	lsl.w	r4, r1, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	40f9      	lsrs	r1, r7
 800041c:	40b2      	lsls	r2, r6
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f307 	lsr.w	r3, r0, r7
 8000426:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042a:	431c      	orrs	r4, r3
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fa00 f306 	lsl.w	r3, r0, r6
 8000434:	0c20      	lsrs	r0, r4, #16
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	fb09 1118 	mls	r1, r9, r8, r1
 800043e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000442:	fb08 f00e 	mul.w	r0, r8, lr
 8000446:	4288      	cmp	r0, r1
 8000448:	d90f      	bls.n	800046a <__udivmoddi4+0x1b6>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000452:	bf2c      	ite	cs
 8000454:	f04f 0b01 	movcs.w	fp, #1
 8000458:	f04f 0b00 	movcc.w	fp, #0
 800045c:	4288      	cmp	r0, r1
 800045e:	d903      	bls.n	8000468 <__udivmoddi4+0x1b4>
 8000460:	f1bb 0f00 	cmp.w	fp, #0
 8000464:	f000 808d 	beq.w	8000582 <__udivmoddi4+0x2ce>
 8000468:	46d0      	mov	r8, sl
 800046a:	1a09      	subs	r1, r1, r0
 800046c:	b2a4      	uxth	r4, r4
 800046e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000472:	fb09 1110 	mls	r1, r9, r0, r1
 8000476:	fb00 fe0e 	mul.w	lr, r0, lr
 800047a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047e:	458e      	cmp	lr, r1
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1de>
 8000482:	eb1c 0101 	adds.w	r1, ip, r1
 8000486:	f100 34ff 	add.w	r4, r0, #4294967295
 800048a:	d201      	bcs.n	8000490 <__udivmoddi4+0x1dc>
 800048c:	458e      	cmp	lr, r1
 800048e:	d87f      	bhi.n	8000590 <__udivmoddi4+0x2dc>
 8000490:	4620      	mov	r0, r4
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	eba1 010e 	sub.w	r1, r1, lr
 800049a:	fba0 9802 	umull	r9, r8, r0, r2
 800049e:	4541      	cmp	r1, r8
 80004a0:	464c      	mov	r4, r9
 80004a2:	46c6      	mov	lr, r8
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0x1f8>
 80004a6:	d106      	bne.n	80004b6 <__udivmoddi4+0x202>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d204      	bcs.n	80004b6 <__udivmoddi4+0x202>
 80004ac:	3801      	subs	r0, #1
 80004ae:	ebb9 0402 	subs.w	r4, r9, r2
 80004b2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004b6:	2d00      	cmp	r5, #0
 80004b8:	d070      	beq.n	800059c <__udivmoddi4+0x2e8>
 80004ba:	1b1a      	subs	r2, r3, r4
 80004bc:	eb61 010e 	sbc.w	r1, r1, lr
 80004c0:	fa22 f306 	lsr.w	r3, r2, r6
 80004c4:	fa01 f707 	lsl.w	r7, r1, r7
 80004c8:	40f1      	lsrs	r1, r6
 80004ca:	2600      	movs	r6, #0
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	e73c      	b.n	800034e <__udivmoddi4+0x9a>
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	f1c3 0020 	rsb	r0, r3, #32
 80004dc:	fa01 f203 	lsl.w	r2, r1, r3
 80004e0:	fa21 f600 	lsr.w	r6, r1, r0
 80004e4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004e8:	fa24 f100 	lsr.w	r1, r4, r0
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	409c      	lsls	r4, r3
 80004f2:	4311      	orrs	r1, r2
 80004f4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004f8:	0c0a      	lsrs	r2, r1, #16
 80004fa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004fe:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000502:	fb00 f607 	mul.w	r6, r0, r7
 8000506:	4296      	cmp	r6, r2
 8000508:	d90e      	bls.n	8000528 <__udivmoddi4+0x274>
 800050a:	eb1c 0202 	adds.w	r2, ip, r2
 800050e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000512:	bf2c      	ite	cs
 8000514:	f04f 0901 	movcs.w	r9, #1
 8000518:	f04f 0900 	movcc.w	r9, #0
 800051c:	4296      	cmp	r6, r2
 800051e:	d902      	bls.n	8000526 <__udivmoddi4+0x272>
 8000520:	f1b9 0f00 	cmp.w	r9, #0
 8000524:	d031      	beq.n	800058a <__udivmoddi4+0x2d6>
 8000526:	4640      	mov	r0, r8
 8000528:	1b92      	subs	r2, r2, r6
 800052a:	b289      	uxth	r1, r1
 800052c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000530:	fb0e 2216 	mls	r2, lr, r6, r2
 8000534:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000538:	fb06 f207 	mul.w	r2, r6, r7
 800053c:	428a      	cmp	r2, r1
 800053e:	d907      	bls.n	8000550 <__udivmoddi4+0x29c>
 8000540:	eb1c 0101 	adds.w	r1, ip, r1
 8000544:	f106 38ff 	add.w	r8, r6, #4294967295
 8000548:	d201      	bcs.n	800054e <__udivmoddi4+0x29a>
 800054a:	428a      	cmp	r2, r1
 800054c:	d823      	bhi.n	8000596 <__udivmoddi4+0x2e2>
 800054e:	4646      	mov	r6, r8
 8000550:	1a89      	subs	r1, r1, r2
 8000552:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000556:	e725      	b.n	80003a4 <__udivmoddi4+0xf0>
 8000558:	462e      	mov	r6, r5
 800055a:	4628      	mov	r0, r5
 800055c:	e6f7      	b.n	800034e <__udivmoddi4+0x9a>
 800055e:	1a84      	subs	r4, r0, r2
 8000560:	eb61 0303 	sbc.w	r3, r1, r3
 8000564:	2001      	movs	r0, #1
 8000566:	461f      	mov	r7, r3
 8000568:	e70b      	b.n	8000382 <__udivmoddi4+0xce>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e749      	b.n	8000404 <__udivmoddi4+0x150>
 8000570:	4464      	add	r4, ip
 8000572:	3802      	subs	r0, #2
 8000574:	e6e1      	b.n	800033a <__udivmoddi4+0x86>
 8000576:	3a02      	subs	r2, #2
 8000578:	4461      	add	r1, ip
 800057a:	e72e      	b.n	80003da <__udivmoddi4+0x126>
 800057c:	3e02      	subs	r6, #2
 800057e:	4462      	add	r2, ip
 8000580:	e6c6      	b.n	8000310 <__udivmoddi4+0x5c>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	e76f      	b.n	800046a <__udivmoddi4+0x1b6>
 800058a:	3802      	subs	r0, #2
 800058c:	4462      	add	r2, ip
 800058e:	e7cb      	b.n	8000528 <__udivmoddi4+0x274>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	e77d      	b.n	8000492 <__udivmoddi4+0x1de>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	e7d9      	b.n	8000550 <__udivmoddi4+0x29c>
 800059c:	462e      	mov	r6, r5
 800059e:	e6d6      	b.n	800034e <__udivmoddi4+0x9a>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <io_ctl_enable_power>:
 * board power supply
 * @param p[in/out] - none
 * @returns none
 */
void io_ctl_enable_power(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_1V8_GPIO_PORT,
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <io_ctl_enable_power+0x2c>)
 80005b0:	f002 fa5c 	bl	8002a6c <HAL_GPIO_WritePin>
			EN_1V8_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(EN_2V8_GPIO_PORT,
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <io_ctl_enable_power+0x2c>)
 80005bc:	f002 fa56 	bl	8002a6c <HAL_GPIO_WritePin>
			EN_2V8_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(EN_3V3_GPIO_PORT,
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <io_ctl_enable_power+0x2c>)
 80005c8:	f002 fa50 	bl	8002a6c <HAL_GPIO_WritePin>
			EN_3V3_PIN, GPIO_PIN_SET);
}/* end of io_ctl_enable_Power */
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	42021000 	.word	0x42021000

080005d4 <io_ctl_gpio_init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void io_ctl_gpio_init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* TOD replace GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b4d      	ldr	r3, [pc, #308]	; (8000720 <io_ctl_gpio_init+0x14c>)
 80005ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005f0:	4a4b      	ldr	r2, [pc, #300]	; (8000720 <io_ctl_gpio_init+0x14c>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005fa:	4b49      	ldr	r3, [pc, #292]	; (8000720 <io_ctl_gpio_init+0x14c>)
 80005fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
 8000606:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000608:	4b45      	ldr	r3, [pc, #276]	; (8000720 <io_ctl_gpio_init+0x14c>)
 800060a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800060e:	4a44      	ldr	r2, [pc, #272]	; (8000720 <io_ctl_gpio_init+0x14c>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000618:	4b41      	ldr	r3, [pc, #260]	; (8000720 <io_ctl_gpio_init+0x14c>)
 800061a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <io_ctl_gpio_init+0x14c>)
 8000628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800062c:	4a3c      	ldr	r2, [pc, #240]	; (8000720 <io_ctl_gpio_init+0x14c>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000636:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <io_ctl_gpio_init+0x14c>)
 8000638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <io_ctl_gpio_init+0x14c>)
 8000646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800064a:	4a35      	ldr	r2, [pc, #212]	; (8000720 <io_ctl_gpio_init+0x14c>)
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000654:	4b32      	ldr	r3, [pc, #200]	; (8000720 <io_ctl_gpio_init+0x14c>)
 8000656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <io_ctl_gpio_init+0x14c>)
 8000664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000668:	4a2d      	ldr	r2, [pc, #180]	; (8000720 <io_ctl_gpio_init+0x14c>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <io_ctl_gpio_init+0x14c>)
 8000674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000678:	f003 0310 	and.w	r3, r3, #16
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <io_ctl_gpio_init+0x14c>)
 8000682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000686:	4a26      	ldr	r2, [pc, #152]	; (8000720 <io_ctl_gpio_init+0x14c>)
 8000688:	f043 0320 	orr.w	r3, r3, #32
 800068c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <io_ctl_gpio_init+0x14c>)
 8000692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000696:	f003 0320 	and.w	r3, r3, #32
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <io_ctl_gpio_init+0x14c>)
 80006a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006a4:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <io_ctl_gpio_init+0x14c>)
 80006a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <io_ctl_gpio_init+0x14c>)
 80006b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pull                              = MAX3000N_FCLK_GPIO_PULL;
	GPIO_InitStruct.Speed                             = MAX3000N_FCLK_GPIO_SPEED;
	GPIO_InitStruct.Alternate                         = MAX3000N_FCLK_GPIO_AF;
	HAL_GPIO_Init(MAX3000N_FCLK_GPIO_PORT, &GPIO_InitStruct);
*/
    GPIO_InitStruct.Pin                               = EN_1V8_PIN;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode                              = EN_1V8_GPIO_MODE;
 80006c2:	2301      	movs	r3, #1
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull                              = EN_1V8_GPIO_PULL;
 80006c6:	2301      	movs	r3, #1
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed                             = EN_1V8_GPIO_SPEED;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(EN_1V8_GPIO_PORT, &GPIO_InitStruct);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <io_ctl_gpio_init+0x150>)
 80006d6:	f001 fff1 	bl	80026bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin                               = EN_3V3_PIN;
 80006da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode                              = EN_3V3_GPIO_MODE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull                              = EN_3V3_GPIO_PULL;
 80006e4:	2301      	movs	r3, #1
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed                             = EN_3V3_GPIO_SPEED;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(EN_3V3_GPIO_PORT, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <io_ctl_gpio_init+0x150>)
 80006f4:	f001 ffe2 	bl	80026bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin                               = EN_2V8_PIN;
 80006f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode                              = EN_2V8_GPIO_MODE;
 80006fe:	2301      	movs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull                              = EN_2V8_GPIO_PULL;
 8000702:	2301      	movs	r3, #1
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed                             = EN_2V8_GPIO_SPEED;
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(ECG_HPF0_GPIO_PORT, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <io_ctl_gpio_init+0x150>)
 8000712:	f001 ffd3 	bl	80026bc <HAL_GPIO_Init>
	GPIO_InitStruct.Pull                              = GPIO_PULLUP;
	GPIO_InitStruct.Speed                             = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
#endif

}/* End of io_ctl_gpio_Init */
 8000716:	bf00      	nop
 8000718:	3730      	adds	r7, #48	; 0x30
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	46020c00 	.word	0x46020c00
 8000724:	42021000 	.word	0x42021000

08000728 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800072c:	f3bf 8f4f 	dsb	sy
}
 8000730:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <__NVIC_SystemReset+0x24>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800073a:	4904      	ldr	r1, [pc, #16]	; (800074c <__NVIC_SystemReset+0x24>)
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <__NVIC_SystemReset+0x28>)
 800073e:	4313      	orrs	r3, r2
 8000740:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000742:	f3bf 8f4f 	dsb	sy
}
 8000746:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <__NVIC_SystemReset+0x20>
 800074c:	e000ed00 	.word	0xe000ed00
 8000750:	05fa0004 	.word	0x05fa0004

08000754 <LL_PWR_EnableVDDIO2>:
  * @brief  Enable the independent I/Os supply.
  * @rmtoll SVMCR    IO2SV       LL_PWR_EnableVDDIO2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVDDIO2(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <LL_PWR_EnableVDDIO2+0x1c>)
 800075a:	691b      	ldr	r3, [r3, #16]
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <LL_PWR_EnableVDDIO2+0x1c>)
 800075e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000762:	6113      	str	r3, [r2, #16]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	46020800 	.word	0x46020800

08000774 <LL_PWR_EnableVDDA>:
  * @brief  Enable the independent analog supply.
  * @rmtoll SVMCR    ASV       LL_PWR_EnableVDDA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVDDA(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <LL_PWR_EnableVDDA+0x1c>)
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <LL_PWR_EnableVDDA+0x1c>)
 800077e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000782:	6113      	str	r3, [r2, #16]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	46020800 	.word	0x46020800

08000794 <_JumpToProgram>:
}/* End of IWDG_Init */


//static void _JumpToProgram(uint32_t a_iAddress)
void _JumpToProgram(uint32_t a_iAddress)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

	uint32_t JumpAddress;
	pFunction Jump_To_Application;

    // Jump to app at given address.
    JumpAddress = *(__IO uint32_t*) (a_iAddress + 4);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3304      	adds	r3, #4
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	617b      	str	r3, [r7, #20]
    Jump_To_Application = (pFunction) JumpAddress;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	613b      	str	r3, [r7, #16]
    __set_MSP(*(__IO uint32_t*) a_iAddress);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f383 8808 	msr	MSP, r3
}
 80007b4:	bf00      	nop
    Jump_To_Application();
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	4798      	blx	r3
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <MX_UART5_Init>:
  * @param None
  * @retval None
  */
//static void MX_UART5_Init(void)
void MX_UART5_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart5.Instance = UART5;
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_UART5_Init+0x90>)
 80007ca:	4a23      	ldr	r2, [pc, #140]	; (8000858 <MX_UART5_Init+0x94>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_UART5_Init+0x90>)
 80007d0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80007d4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_UART5_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_UART5_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_UART5_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_UART5_Init+0x90>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_UART5_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_UART5_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_UART5_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_UART5_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_UART5_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <MX_UART5_Init+0x90>)
 800080e:	f006 f9e9 	bl	8006be4 <HAL_UART_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000818:	f000 f9a6 	bl	8000b68 <Error_Handler>
    //Error_Handler((uint8_t *)__FILE__, __LINE__);
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_UART5_Init+0x90>)
 8000820:	f008 f99b 	bl	8008b5a <HAL_UARTEx_SetTxFifoThreshold>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800082a:	f000 f99d 	bl	8000b68 <Error_Handler>
    //Error_Handler((uint8_t *)__FILE__, __LINE__);
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <MX_UART5_Init+0x90>)
 8000832:	f008 f9d0 	bl	8008bd6 <HAL_UARTEx_SetRxFifoThreshold>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800083c:	f000 f994 	bl	8000b68 <Error_Handler>
    //Error_Handler((uint8_t *)__FILE__, __LINE__);
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_UART5_Init+0x90>)
 8000842:	f008 f951 	bl	8008ae8 <HAL_UARTEx_DisableFifoMode>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800084c:	f000 f98c 	bl	8000b68 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */

  /* register rx complete callback */
  //	huart5.RxEventCallback = RxEventCallback;
  /* USER CODE END USART2_Init 2 */
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000214 	.word	0x20000214
 8000858:	40005000 	.word	0x40005000

0800085c <SystemHal_Config>:
  *  interface and the Systick.
  *
  * @retval None
  */
void SystemHal_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
 	HAL_Init();
 8000860:	f001 fa78 	bl	8001d54 <HAL_Init>

}/* End of SystemHal_Config */
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t result;
	uint8_t a;

	/* Configure the system HAL --- */
	SystemHal_Config();
 800086e:	f7ff fff5 	bl	800085c <SystemHal_Config>

	/* Configure the system clock - */
	SystemClock_Config();
 8000872:	f000 f8cf 	bl	8000a14 <SystemClock_Config>

	/* Configure the system power - */
	SystemPower_Config();
 8000876:	f000 f933 	bl	8000ae0 <SystemPower_Config>

	/* Configure watch dog -------- */
//	IWDG_Init();

	/* Configure initial io state - */
	io_ctl_gpio_init();
 800087a:	f7ff feab 	bl	80005d4 <io_ctl_gpio_init>

	/* Configure power supplies --- */
	io_ctl_enable_power();
 800087e:	f7ff fe91 	bl	80005a4 <io_ctl_enable_power>

	MX_ICACHE_Init();
 8000882:	f000 f935 	bl	8000af0 <MX_ICACHE_Init>

	// Start of XMODEM initialization.

	MX_UART5_Init();
 8000886:	f7ff ff9d 	bl	80007c4 <MX_UART5_Init>
	HAL_UART_MspInit(&huart5);
 800088a:	4851      	ldr	r0, [pc, #324]	; (80009d0 <main+0x168>)
 800088c:	f000 f9a2 	bl	8000bd4 <HAL_UART_MspInit>
	__HAL_UART_ENABLE_IT( &huart5, UART_IT_RXNE);
 8000890:	4b4f      	ldr	r3, [pc, #316]	; (80009d0 <main+0x168>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <main+0x168>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f042 0220 	orr.w	r2, r2, #32
 800089e:	601a      	str	r2, [r3, #0]
//	uart_receive(&compare_block[0], 40);
    uart_receive(&aRxBuffer[0],1029);
 80008a0:	f240 4105 	movw	r1, #1029	; 0x405
 80008a4:	484b      	ldr	r0, [pc, #300]	; (80009d4 <main+0x16c>)
 80008a6:	f000 fe1d 	bl	80014e4 <uart_receive>

//    program_switcher();

	transmit_notification(&command_wait[0]);
 80008aa:	484b      	ldr	r0, [pc, #300]	; (80009d8 <main+0x170>)
 80008ac:	f000 fe64 	bl	8001578 <transmit_notification>
	transmit_notification(&note1[0]);
 80008b0:	484a      	ldr	r0, [pc, #296]	; (80009dc <main+0x174>)
 80008b2:	f000 fe61 	bl	8001578 <transmit_notification>
	transmit_notification(&note2[0]);
 80008b6:	484a      	ldr	r0, [pc, #296]	; (80009e0 <main+0x178>)
 80008b8:	f000 fe5e 	bl	8001578 <transmit_notification>
	// Wait for command "RUN1" or "SKIP".
//    result = wait4command();
    transmit_notification(&note3[0]);
 80008bc:	4849      	ldr	r0, [pc, #292]	; (80009e4 <main+0x17c>)
 80008be:	f000 fe5b 	bl	8001578 <transmit_notification>

    // Restart UART5 again.
    MX_UART5_Init();
 80008c2:	f7ff ff7f 	bl	80007c4 <MX_UART5_Init>
    HAL_UART_MspInit(&huart5);
 80008c6:	4842      	ldr	r0, [pc, #264]	; (80009d0 <main+0x168>)
 80008c8:	f000 f984 	bl	8000bd4 <HAL_UART_MspInit>
   __HAL_UART_ENABLE_IT( &huart5, UART_IT_RXNE);
 80008cc:	4b40      	ldr	r3, [pc, #256]	; (80009d0 <main+0x168>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <main+0x168>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f042 0220 	orr.w	r2, r2, #32
 80008da:	601a      	str	r2, [r3, #0]
//   uart_receive(&compare_block[0],40);
   uart_receive(&aRxBuffer[0], 1029);
 80008dc:	f240 4105 	movw	r1, #1029	; 0x405
 80008e0:	483c      	ldr	r0, [pc, #240]	; (80009d4 <main+0x16c>)
 80008e2:	f000 fdff 	bl	80014e4 <uart_receive>

   UartReadyRx = false;
 80008e6:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <main+0x180>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
   xmodem_on = true;
 80008ec:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <main+0x184>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]
   result = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	603b      	str	r3, [r7, #0]
//   program_switcher();

   for(a = 0;a < 16;a++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	e034      	b.n	8000966 <main+0xfe>
   {
	   _flash_file_param.f_magic_val0[a] = backup_a5_unique[a];
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	493b      	ldr	r1, [pc, #236]	; (80009f0 <main+0x188>)
 8000902:	5c89      	ldrb	r1, [r1, r2]
 8000904:	4a3b      	ldr	r2, [pc, #236]	; (80009f4 <main+0x18c>)
 8000906:	54d1      	strb	r1, [r2, r3]
	   _flash_file_param.f_file0[a] = backup_a5_string[a];
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	493a      	ldr	r1, [pc, #232]	; (80009f8 <main+0x190>)
 800090e:	5c89      	ldrb	r1, [r1, r2]
 8000910:	4a38      	ldr	r2, [pc, #224]	; (80009f4 <main+0x18c>)
 8000912:	4413      	add	r3, r2
 8000914:	460a      	mov	r2, r1
 8000916:	741a      	strb	r2, [r3, #16]

	   _flash_file_param.f_magic_val1[a] = runtime_a5_unique[a];
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4937      	ldr	r1, [pc, #220]	; (80009fc <main+0x194>)
 800091e:	5c89      	ldrb	r1, [r1, r2]
 8000920:	4a34      	ldr	r2, [pc, #208]	; (80009f4 <main+0x18c>)
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	   _flash_file_param.f_file1[a] = runtime_a5_string[a];
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4934      	ldr	r1, [pc, #208]	; (8000a00 <main+0x198>)
 8000930:	5c89      	ldrb	r1, [r1, r2]
 8000932:	4a30      	ldr	r2, [pc, #192]	; (80009f4 <main+0x18c>)
 8000934:	4413      	add	r3, r2
 8000936:	460a      	mov	r2, r1
 8000938:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	   _flash_file_param.f_magic_val2[a] = runtime_a5_write_data[a];
 800093c:	79fa      	ldrb	r2, [r7, #7]
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4930      	ldr	r1, [pc, #192]	; (8000a04 <main+0x19c>)
 8000942:	5c89      	ldrb	r1, [r1, r2]
 8000944:	4a2b      	ldr	r2, [pc, #172]	; (80009f4 <main+0x18c>)
 8000946:	4413      	add	r3, r2
 8000948:	460a      	mov	r2, r1
 800094a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	   _flash_file_param.f_file2[a] = runtime_a5_write_string[a];
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	492d      	ldr	r1, [pc, #180]	; (8000a08 <main+0x1a0>)
 8000954:	5c89      	ldrb	r1, [r1, r2]
 8000956:	4a27      	ldr	r2, [pc, #156]	; (80009f4 <main+0x18c>)
 8000958:	4413      	add	r3, r2
 800095a:	460a      	mov	r2, r1
 800095c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
   for(a = 0;a < 16;a++)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	3301      	adds	r3, #1
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d9c7      	bls.n	80008fc <main+0x94>
   }

	switch(result)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d003      	beq.n	800097a <main+0x112>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d01d      	beq.n	80009b4 <main+0x14c>
		case 2:
				  transmit_notification(&application_jump[0]);
				  _JumpToProgram(0x08100000);
				  break;
		default:
			      break;
 8000978:	e024      	b.n	80009c4 <main+0x15c>
			      flasherase(1);
 800097a:	2001      	movs	r0, #1
 800097c:	f000 fe8e 	bl	800169c <flasherase>
				  if(get_xmodem() == X_OK)
 8000980:	f001 f834 	bl	80019ec <get_xmodem>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d112      	bne.n	80009b0 <main+0x148>
						erasesignature(A5_signature);
 800098a:	2003      	movs	r0, #3
 800098c:	f000 ff00 	bl	8001790 <erasesignature>
					    write_A5_signature(backup_a5_program);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fb17 	bl	8000fc4 <write_A5_signature>
					    erasesignature(backup_a5_program);
 8000996:	2000      	movs	r0, #0
 8000998:	f000 fefa 	bl	8001790 <erasesignature>
					    write_signature(backup_a5_program);
 800099c:	2000      	movs	r0, #0
 800099e:	f000 fb9f 	bl	80010e0 <write_signature>
					    erasesignature(runtime_a5_program);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f000 fef4 	bl	8001790 <erasesignature>
					   _JumpToProgram(0x08020000);
 80009a8:	4818      	ldr	r0, [pc, #96]	; (8000a0c <main+0x1a4>)
 80009aa:	f7ff fef3 	bl	8000794 <_JumpToProgram>
				  break;
 80009ae:	e009      	b.n	80009c4 <main+0x15c>
					  NVIC_SystemReset();
 80009b0:	f7ff feba 	bl	8000728 <__NVIC_SystemReset>
				  transmit_notification(&application_jump[0]);
 80009b4:	4816      	ldr	r0, [pc, #88]	; (8000a10 <main+0x1a8>)
 80009b6:	f000 fddf 	bl	8001578 <transmit_notification>
				  _JumpToProgram(0x08100000);
 80009ba:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 80009be:	f7ff fee9 	bl	8000794 <_JumpToProgram>
				  break;
 80009c2:	bf00      	nop
 80009c4:	2300      	movs	r3, #0
	}
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000214 	.word	0x20000214
 80009d4:	200002ac 	.word	0x200002ac
 80009d8:	20000048 	.word	0x20000048
 80009dc:	20000088 	.word	0x20000088
 80009e0:	200000b8 	.word	0x200000b8
 80009e4:	200000d8 	.word	0x200000d8
 80009e8:	200002a9 	.word	0x200002a9
 80009ec:	200002a4 	.word	0x200002a4
 80009f0:	20000184 	.word	0x20000184
 80009f4:	20000acc 	.word	0x20000acc
 80009f8:	200001b4 	.word	0x200001b4
 80009fc:	20000174 	.word	0x20000174
 8000a00:	200001a4 	.word	0x200001a4
 8000a04:	20000194 	.word	0x20000194
 8000a08:	200001c4 	.word	0x200001c4
 8000a0c:	08020000 	.word	0x08020000
 8000a10:	20000068 	.word	0x20000068

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b09e      	sub	sp, #120	; 0x78
 8000a18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	2260      	movs	r2, #96	; 0x60
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f008 f988 	bl	8008d38 <memset>
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	615a      	str	r2, [r3, #20]

		  /** Configure the main internal regulator output voltage
		  */
		  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a38:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000a3c:	f002 f8ae 	bl	8002b9c <HAL_PWREx_ControlVoltageScaling>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x36>
		  {
			  Error_Handler();
 8000a46:	f000 f88f 	bl	8000b68 <Error_Handler>
		   // Error_Handler((uint8_t *)__FILE__, __LINE__);
		  }

		  /** Configure LSE Drive Capability
		  */
		  HAL_PWR_EnableBkUpAccess();
 8000a4a:	f002 f887 	bl	8002b5c <HAL_PWR_EnableBkUpAccess>
		  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <SystemClock_Config+0xc8>)
 8000a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a54:	4a21      	ldr	r2, [pc, #132]	; (8000adc <SystemClock_Config+0xc8>)
 8000a56:	f043 0318 	orr.w	r3, r3, #24
 8000a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|
 8000a5e:	2316      	movs	r3, #22
 8000a60:	61bb      	str	r3, [r7, #24]
				  	  	  	  	  	  	  	 RCC_OSCILLATORTYPE_LSE|
											 RCC_OSCILLATORTYPE_MSI;

		  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a62:	2381      	movs	r3, #129	; 0x81
 8000a64:	623b      	str	r3, [r7, #32]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
		  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a74:	2310      	movs	r3, #16
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
		  RCC_OscInitStruct.MSIClockRange =       RCC_MSIRANGE_0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
		  RCC_OscInitStruct.PLL.PLLState =        RCC_PLL_NONE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	653b      	str	r3, [r7, #80]	; 0x50

		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 0318 	add.w	r3, r7, #24
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 f90b 	bl	8002ca0 <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x80>
		  {
			  Error_Handler();
 8000a90:	f000 f86a 	bl	8000b68 <Error_Handler>
		   // Error_Handler((uint8_t *)__FILE__, __LINE__);
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a94:	231f      	movs	r3, #31
 8000a96:	603b      	str	r3, [r7, #0]
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
		                              |RCC_CLOCKTYPE_PCLK3;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]


		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	2104      	movs	r1, #4
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 ffcb 	bl	8003a4c <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xac>
		  {
			  Error_Handler();
 8000abc:	f000 f854 	bl	8000b68 <Error_Handler>
		  //  Error_Handler((uint8_t *)__FILE__, __LINE__);
		  }

	      /* TODO move to DEVICES lower power */
		  /** LSCO configuration  , 32.768 khz to LPTIM2. */
		  HAL_RCCEx_EnableLSCO(RCC_MCO1SOURCE_LSE);
 8000ac0:	f04f 60e0 	mov.w	r0, #117440512	; 0x7000000
 8000ac4:	f005 feea 	bl	800689c <HAL_RCCEx_EnableLSCO>

		  /** MCO configuration  , 32.768 khz to MAX3000X. */
		  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f003 f9ae 	bl	8003e30 <HAL_RCC_MCOConfig>
}
 8000ad4:	bf00      	nop
 8000ad6:	3778      	adds	r7, #120	; 0x78
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	46020c00 	.word	0x46020c00

08000ae0 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* Enable the independent
  	 *  analog and I/Os supply */
  	LL_PWR_EnableVDDA();
 8000ae4:	f7ff fe46 	bl	8000774 <LL_PWR_EnableVDDA>
  	LL_PWR_EnableVDDIO2();
 8000ae8:	f7ff fe34 	bl	8000754 <LL_PWR_EnableVDDIO2>

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000af4:	2000      	movs	r0, #0
 8000af6:	f001 ffd1 	bl	8002a9c <HAL_ICACHE_ConfigAssociativityMode>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000b00:	f000 f832 	bl	8000b68 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b04:	f001 ffea 	bl	8002adc <HAL_ICACHE_Enable>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b0e:	f000 f82b 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if(UartHandle -> Instance == UART5)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_UART_RxCpltCallback+0x3c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d110      	bne.n	8000b4c <HAL_UART_RxCpltCallback+0x34>
	{
	   /* Set Receive flag:e */

	   if(xmodem_on == false)
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_UART_RxCpltCallback+0x40>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d104      	bne.n	8000b3c <HAL_UART_RxCpltCallback+0x24>
	   {
		   uart_receive(&compare_block[0], 16);  // 20
 8000b32:	2110      	movs	r1, #16
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <HAL_UART_RxCpltCallback+0x44>)
 8000b36:	f000 fcd5 	bl	80014e4 <uart_receive>
 8000b3a:	e004      	b.n	8000b46 <HAL_UART_RxCpltCallback+0x2e>
	   }
	   else
	   {
		   uart_receive(&aRxBuffer[0], 1029);
 8000b3c:	f240 4105 	movw	r1, #1029	; 0x405
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <HAL_UART_RxCpltCallback+0x48>)
 8000b42:	f000 fccf 	bl	80014e4 <uart_receive>
	   }
       UartReadyRx = true; //SET;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_UART_RxCpltCallback+0x4c>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40005000 	.word	0x40005000
 8000b58:	200002a4 	.word	0x200002a4
 8000b5c:	200006bc 	.word	0x200006bc
 8000b60:	200002ac 	.word	0x200002ac
 8000b64:	200002a9 	.word	0x200002a9

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_MspInit+0x5c>)
 8000b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b80:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <HAL_MspInit+0x5c>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_MspInit+0x5c>)
 8000b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_MspInit+0x5c>)
 8000b9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000b9e:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <HAL_MspInit+0x5c>)
 8000ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ba4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x5c>)
 8000baa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE3);
 8000bb6:	2030      	movs	r0, #48	; 0x30
 8000bb8:	f001 f974 	bl	8001ea4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000bbc:	f001 f99a 	bl	8001ef4 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f001 f983 	bl	8001ecc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	46020c00 	.word	0x46020c00

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0c0      	sub	sp, #256	; 0x100
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bec:	f107 0320 	add.w	r3, r7, #32
 8000bf0:	22c8      	movs	r2, #200	; 0xc8
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f008 f89f 	bl	8008d38 <memset>

  if(huart->Instance==UART4)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a79      	ldr	r2, [pc, #484]	; (8000de4 <HAL_UART_MspInit+0x210>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d171      	bne.n	8000ce8 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c04:	f04f 0208 	mov.w	r2, #8
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c14:	f107 0320 	add.w	r3, r7, #32
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 fb25 	bl	8004268 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000c24:	f7ff ffa0 	bl	8000b68 <Error_Handler>
     // Error_Handler((uint8_t *)__FILE__, __LINE__);
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c28:	4b6f      	ldr	r3, [pc, #444]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c2e:	4a6e      	ldr	r2, [pc, #440]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000c38:	4b6b      	ldr	r3, [pc, #428]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c42:	61fb      	str	r3, [r7, #28]
 8000c44:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b68      	ldr	r3, [pc, #416]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c4c:	4a66      	ldr	r2, [pc, #408]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c56:	4b64      	ldr	r3, [pc, #400]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE(); ; //
 8000c64:	4b60      	ldr	r3, [pc, #384]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c6a:	4a5f      	ldr	r2, [pc, #380]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c74:	4b5c      	ldr	r3, [pc, #368]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
    /**USART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c82:	2301      	movs	r3, #1
 8000c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4851      	ldr	r0, [pc, #324]	; (8000dec <HAL_UART_MspInit+0x218>)
 8000ca8:	f001 fd08 	bl	80026bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4847      	ldr	r0, [pc, #284]	; (8000df0 <HAL_UART_MspInit+0x21c>)
 8000cd4:	f001 fcf2 	bl	80026bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2040      	movs	r0, #64	; 0x40
 8000cde:	f001 fa08 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ce2:	2040      	movs	r0, #64	; 0x40
 8000ce4:	f001 fa1f 	bl	8002126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

  if(huart->Instance==UART5)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a41      	ldr	r2, [pc, #260]	; (8000df4 <HAL_UART_MspInit+0x220>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d172      	bne.n	8000dd8 <HAL_UART_MspInit+0x204>

    /* USER CODE END USART2_MspInit 0 */

    /** Initializes the peripherals clock
    */
      PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000cf2:	f04f 0210 	mov.w	r2, #16
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	e9c7 2308 	strd	r2, r3, [r7, #32]
      PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d04:	f107 0320 	add.w	r3, r7, #32
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f003 faad 	bl	8004268 <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_UART_MspInit+0x144>
      {
         Error_Handler();
 8000d14:	f7ff ff28 	bl	8000b68 <Error_Handler>
        //Error_Handler((uint8_t *)__FILE__, __LINE__);
      }

      /* Peripheral clock enable */
      __HAL_RCC_UART5_CLK_ENABLE();
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d1e:	4a32      	ldr	r2, [pc, #200]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000d20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d24:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

      __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d3c:	4a2a      	ldr	r2, [pc, #168]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d46:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d5a:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d64:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_UART_MspInit+0x214>)
 8000d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
      /**USART2 GPIO Configuration
      PC12     ------> USART2_TX
      PD2     ------> USART2_RX
      */
      GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d96:	4619      	mov	r1, r3
 8000d98:	4815      	ldr	r0, [pc, #84]	; (8000df0 <HAL_UART_MspInit+0x21c>)
 8000d9a:	f001 fc8f 	bl	80026bc <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000db6:	2308      	movs	r3, #8
 8000db8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <HAL_UART_MspInit+0x224>)
 8000dc4:	f001 fc7a 	bl	80026bc <HAL_GPIO_Init>

      /* USART2 interrupt Init */
      HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2041      	movs	r0, #65	; 0x41
 8000dce:	f001 f990 	bl	80020f2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000dd2:	2041      	movs	r0, #65	; 0x41
 8000dd4:	f001 f9a7 	bl	8002126 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
    }

}
 8000dd8:	bf00      	nop
 8000dda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40004c00 	.word	0x40004c00
 8000de8:	46020c00 	.word	0x46020c00
 8000dec:	42020000 	.word	0x42020000
 8000df0:	42020800 	.word	0x42020800
 8000df4:	40005000 	.word	0x40005000
 8000df8:	42020c00 	.word	0x42020c00

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
  volatile uint8_t a,b;
  /* USER CODE BEGIN HardFault_IRQn 0 */

  for(a = 0;a < 20;a++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	e009      	b.n	8000e22 <HardFault_Handler+0x20>
  {
	  b = a + 1;
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	3301      	adds	r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	71bb      	strb	r3, [r7, #6]
  for(a = 0;a < 20;a++)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b13      	cmp	r3, #19
 8000e28:	d9f1      	bls.n	8000e0e <HardFault_Handler+0xc>
  }
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x28>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 ffd6 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <UART5_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart5);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <UART5_IRQHandler+0x10>)
 8000e7a:	f006 f827 	bl	8006ecc <HAL_UART_IRQHandler>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000214 	.word	0x20000214

08000e88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <SystemInit+0x68>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <SystemInit+0x68>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <SystemInit+0x6c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <SystemInit+0x6c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <SystemInit+0x6c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <SystemInit+0x6c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <SystemInit+0x6c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <SystemInit+0x6c>)
 8000eba:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ebe:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ec2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <SystemInit+0x6c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <SystemInit+0x6c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <SystemInit+0x6c>)
 8000ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <SystemInit+0x6c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SystemInit+0x68>)
 8000ede:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ee2:	609a      	str	r2, [r3, #8]
  #endif
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	46020c00 	.word	0x46020c00

08000ef8 <flash_read>:

uint16_t cs = 0;


void flash_read (uint32_t StartPageAddress, uint8_t *RxBuf, uint16_t numberofwords)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	4613      	mov	r3, r2
 8000f04:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	701a      	strb	r2, [r3, #0]
		StartPageAddress += 1;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	1e5a      	subs	r2, r3, #1
 8000f20:	80fa      	strh	r2, [r7, #6]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d000      	beq.n	8000f28 <flash_read+0x30>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000f26:	e7ee      	b.n	8000f06 <flash_read+0xe>
		if (!(numberofwords--)) break;
 8000f28:	bf00      	nop
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <flash_write>:
	  }
	  HAL_Delay(2);
}

void flash_write(uint32_t numerator)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	uint32_t Address = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
	uint32_t Index = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
	uint32_t address_init;


	 /* Disable instruction cache prior to internal cacheable memory update */
	  if (HAL_ICACHE_Disable() != HAL_OK)
 8000f48:	f001 fdd8 	bl	8002afc <HAL_ICACHE_Disable>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <flash_write+0x1e>
	  {
		  Error_Handler();
 8000f52:	f7ff fe09 	bl	8000b68 <Error_Handler>
	  }

	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8000f56:	f001 f9ef 	bl	8002338 <HAL_FLASH_Unlock>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_NS_START_ADDR and FLASH_USER_NS_END_ADDR) ***********/
	  Address = FLASH_BACKUP_START_ADDR + (numerator * 1024);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000f60:	3380      	adds	r3, #128	; 0x80
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	617b      	str	r3, [r7, #20]

//	  for(address_init = 0;address_init < 1024;address_init++)
//		  aRxBuffer[3 + address_init] = address_init & 0xff;

	  address_init = Address;
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	60fb      	str	r3, [r7, #12]
	  while (Address < (address_init + 1024)) //FLASH_USER_NS_END_ADDR)
 8000f6a:	e013      	b.n	8000f94 <flash_write+0x5c>
	  {
	   // if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, Address, ((uint32_t)FlashWord)) == HAL_OK)
	    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, Address, ((uint32_t) &aRxBuffer[3 + Index])) == HAL_OK)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	3303      	adds	r3, #3
 8000f70:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <flash_write+0x88>)
 8000f72:	4413      	add	r3, r2
 8000f74:	461a      	mov	r2, r3
 8000f76:	6979      	ldr	r1, [r7, #20]
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f001 f993 	bl	80022a4 <HAL_FLASH_Program>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d106      	bne.n	8000f92 <flash_write+0x5a>
	    {
	      Address = Address + 16;  /* increment to the next Flash word */
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3310      	adds	r3, #16
 8000f88:	617b      	str	r3, [r7, #20]
	      Index   = Index + 16;
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	3310      	adds	r3, #16
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	e000      	b.n	8000f94 <flash_write+0x5c>
	    }
	    else
	    {
	      /* Error occurred while writing data in Flash memory.
	         User can add here some code to deal with this error */
	      while (1)
 8000f92:	e7fe      	b.n	8000f92 <flash_write+0x5a>
	  while (Address < (address_init + 1024)) //FLASH_USER_NS_END_ADDR)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d3e5      	bcc.n	8000f6c <flash_write+0x34>
	    }
	  }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8000fa0:	f001 f9ec 	bl	800237c <HAL_FLASH_Lock>

	  /* Re-enable instruction cache */
	  if (HAL_ICACHE_Enable() != HAL_OK)
 8000fa4:	f001 fd9a 	bl	8002adc <HAL_ICACHE_Enable>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <flash_write+0x7a>
	  {
	    Error_Handler();
 8000fae:	f7ff fddb 	bl	8000b68 <Error_Handler>
	  }
	  HAL_Delay(2);
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f000 ff52 	bl	8001e5c <HAL_Delay>
}
 8000fb8:	bf00      	nop
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200002ac 	.word	0x200002ac

08000fc4 <write_A5_signature>:


void write_A5_signature(uint8_t signature)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	uint32_t address = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t address_stop;
	uint8_t  a,data[20];

	 /* Disable instruction cache prior to internal cacheable memory update */
	  if (HAL_ICACHE_Disable() != HAL_OK)
 8000fd2:	f001 fd93 	bl	8002afc <HAL_ICACHE_Disable>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <write_A5_signature+0x1c>
	  {
		  Error_Handler();
 8000fdc:	f7ff fdc4 	bl	8000b68 <Error_Handler>
	  }

	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8000fe0:	f001 f9aa 	bl	8002338 <HAL_FLASH_Unlock>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_NS_START_ADDR and FLASH_USER_NS_END_ADDR) ***********/

	  switch(signature)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d034      	beq.n	8001054 <write_A5_signature+0x90>
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	dc49      	bgt.n	8001082 <write_A5_signature+0xbe>
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <write_A5_signature+0x34>
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d017      	beq.n	8001026 <write_A5_signature+0x62>
 8000ff6:	e044      	b.n	8001082 <write_A5_signature+0xbe>
	  {
	  	  case backup_a5_program:
                                  for(a = 0;a < 16;a++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	77fb      	strb	r3, [r7, #31]
 8000ffc:	e00a      	b.n	8001014 <write_A5_signature+0x50>
                                	  data[a] =  backup_a5_unique[a];
 8000ffe:	7ffa      	ldrb	r2, [r7, #31]
 8001000:	7ffb      	ldrb	r3, [r7, #31]
 8001002:	4933      	ldr	r1, [pc, #204]	; (80010d0 <write_A5_signature+0x10c>)
 8001004:	5c8a      	ldrb	r2, [r1, r2]
 8001006:	3328      	adds	r3, #40	; 0x28
 8001008:	443b      	add	r3, r7
 800100a:	f803 2c20 	strb.w	r2, [r3, #-32]
                                  for(a = 0;a < 16;a++)
 800100e:	7ffb      	ldrb	r3, [r7, #31]
 8001010:	3301      	adds	r3, #1
 8001012:	77fb      	strb	r3, [r7, #31]
 8001014:	7ffb      	ldrb	r3, [r7, #31]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	d9f1      	bls.n	8000ffe <write_A5_signature+0x3a>

								  address = FLASH_A5_SIG_SWITCH;
 800101a:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <write_A5_signature+0x110>)
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
								  address_stop = address + 16;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	3310      	adds	r3, #16
 8001022:	623b      	str	r3, [r7, #32]
	  		  	  	  	  	  	  break;
 8001024:	e030      	b.n	8001088 <write_A5_signature+0xc4>
	  	  case runtime_a5_program:
	  		  	  	  	  	  	  for(a = 0;a < 16;a++)
 8001026:	2300      	movs	r3, #0
 8001028:	77fb      	strb	r3, [r7, #31]
 800102a:	e00a      	b.n	8001042 <write_A5_signature+0x7e>
									  data[a] =  runtime_a5_unique[a];
 800102c:	7ffa      	ldrb	r2, [r7, #31]
 800102e:	7ffb      	ldrb	r3, [r7, #31]
 8001030:	4929      	ldr	r1, [pc, #164]	; (80010d8 <write_A5_signature+0x114>)
 8001032:	5c8a      	ldrb	r2, [r1, r2]
 8001034:	3328      	adds	r3, #40	; 0x28
 8001036:	443b      	add	r3, r7
 8001038:	f803 2c20 	strb.w	r2, [r3, #-32]
	  		  	  	  	  	  	  for(a = 0;a < 16;a++)
 800103c:	7ffb      	ldrb	r3, [r7, #31]
 800103e:	3301      	adds	r3, #1
 8001040:	77fb      	strb	r3, [r7, #31]
 8001042:	7ffb      	ldrb	r3, [r7, #31]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d9f1      	bls.n	800102c <write_A5_signature+0x68>

								  address = FLASH_A5_SIG_SWITCH;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <write_A5_signature+0x110>)
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
								  address_stop = address + 16;
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	3310      	adds	r3, #16
 8001050:	623b      	str	r3, [r7, #32]
	  		  		  	  	  	  break;
 8001052:	e019      	b.n	8001088 <write_A5_signature+0xc4>
	  	  case runtime_a5_write:
	  		  	  	  	  	  	  for(a = 0;a < 16;a++)
 8001054:	2300      	movs	r3, #0
 8001056:	77fb      	strb	r3, [r7, #31]
 8001058:	e00a      	b.n	8001070 <write_A5_signature+0xac>
	  		                          data[a] = runtime_a5_write_data[a];
 800105a:	7ffa      	ldrb	r2, [r7, #31]
 800105c:	7ffb      	ldrb	r3, [r7, #31]
 800105e:	491f      	ldr	r1, [pc, #124]	; (80010dc <write_A5_signature+0x118>)
 8001060:	5c8a      	ldrb	r2, [r1, r2]
 8001062:	3328      	adds	r3, #40	; 0x28
 8001064:	443b      	add	r3, r7
 8001066:	f803 2c20 	strb.w	r2, [r3, #-32]
	  		  	  	  	  	  	  for(a = 0;a < 16;a++)
 800106a:	7ffb      	ldrb	r3, [r7, #31]
 800106c:	3301      	adds	r3, #1
 800106e:	77fb      	strb	r3, [r7, #31]
 8001070:	7ffb      	ldrb	r3, [r7, #31]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	d9f1      	bls.n	800105a <write_A5_signature+0x96>

	  		  	  	  	  	  	  address = FLASH_A5_SIG_SWITCH;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <write_A5_signature+0x110>)
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
	  		  	  	  	  	  	  address_stop = address + 16;
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	3310      	adds	r3, #16
 800107e:	623b      	str	r3, [r7, #32]
	  		  		  	  	  	  break;
 8001080:	e002      	b.n	8001088 <write_A5_signature+0xc4>
	  	  default:
	  		  	  	  	  	  	  HAL_FLASH_Lock();
 8001082:	f001 f97b 	bl	800237c <HAL_FLASH_Lock>
 8001086:	e01f      	b.n	80010c8 <write_A5_signature+0x104>
	  		  	  	  	  	  	  return;
	  }


	  while (address < address_stop)
 8001088:	e00e      	b.n	80010a8 <write_A5_signature+0xe4>
	  {
	   // if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, Address, ((uint32_t)FlashWord)) == HAL_OK)
	    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, address, ((uint32_t) &data[0])) == HAL_OK)
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	461a      	mov	r2, r3
 8001090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001092:	2001      	movs	r0, #1
 8001094:	f001 f906 	bl	80022a4 <HAL_FLASH_Program>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d103      	bne.n	80010a6 <write_A5_signature+0xe2>
	  //  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, address, ((uint32_t) &data[0])) == HAL_OK)
	    {
	      address += 16;  /* increment to the next Flash word */
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	3310      	adds	r3, #16
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
 80010a4:	e000      	b.n	80010a8 <write_A5_signature+0xe4>
	    }
	    else
	    {
	      /* Error occurred while writing data in Flash memory.
	         User can add here some code to deal with this error */
	      while (1)
 80010a6:	e7fe      	b.n	80010a6 <write_A5_signature+0xe2>
	  while (address < address_stop)
 80010a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010aa:	6a3b      	ldr	r3, [r7, #32]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d3ec      	bcc.n	800108a <write_A5_signature+0xc6>
	    }
	  }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 80010b0:	f001 f964 	bl	800237c <HAL_FLASH_Lock>

	  /* Re-enable instruction cache */
	  if (HAL_ICACHE_Enable() != HAL_OK)
 80010b4:	f001 fd12 	bl	8002adc <HAL_ICACHE_Enable>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <write_A5_signature+0xfe>
	  {
	    Error_Handler();
 80010be:	f7ff fd53 	bl	8000b68 <Error_Handler>
	  }
	  HAL_Delay(2);
 80010c2:	2002      	movs	r0, #2
 80010c4:	f000 feca 	bl	8001e5c <HAL_Delay>
}
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000184 	.word	0x20000184
 80010d4:	081e0000 	.word	0x081e0000
 80010d8:	20000174 	.word	0x20000174
 80010dc:	20000194 	.word	0x20000194

080010e0 <write_signature>:

void write_signature(uint8_t signature)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0a0      	sub	sp, #128	; 0x80
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint32_t address = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t index = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t address_stop;
	uint8_t  a,data[100];

	 /* Disable instruction cache prior to internal cacheable memory update */
	  if (HAL_ICACHE_Disable() != HAL_OK)
 80010f2:	f001 fd03 	bl	8002afc <HAL_ICACHE_Disable>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <write_signature+0x20>
	  {
		  Error_Handler();
 80010fc:	f7ff fd34 	bl	8000b68 <Error_Handler>
	  }

	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001100:	f001 f91a 	bl	8002338 <HAL_FLASH_Unlock>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_NS_START_ADDR and FLASH_USER_NS_END_ADDR) ***********/

	  switch(signature)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b02      	cmp	r3, #2
 8001108:	f000 80ef 	beq.w	80012ea <write_signature+0x20a>
 800110c:	2b02      	cmp	r3, #2
 800110e:	f300 8162 	bgt.w	80013d6 <write_signature+0x2f6>
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <write_signature+0x3c>
 8001116:	2b01      	cmp	r3, #1
 8001118:	d071      	beq.n	80011fe <write_signature+0x11e>
 800111a:	e15c      	b.n	80013d6 <write_signature+0x2f6>
	  {
	  	  case backup_a5_program:
                                  for(a = 0;a < 16;a++)
 800111c:	2300      	movs	r3, #0
 800111e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001122:	e00e      	b.n	8001142 <write_signature+0x62>
                                	  data[a] =  _flash_file_param.f_magic_val0[a];
 8001124:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001128:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800112c:	49b6      	ldr	r1, [pc, #728]	; (8001408 <write_signature+0x328>)
 800112e:	5c8a      	ldrb	r2, [r1, r2]
 8001130:	3380      	adds	r3, #128	; 0x80
 8001132:	443b      	add	r3, r7
 8001134:	f803 2c74 	strb.w	r2, [r3, #-116]
                                  for(a = 0;a < 16;a++)
 8001138:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800113c:	3301      	adds	r3, #1
 800113e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001142:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001146:	2b0f      	cmp	r3, #15
 8001148:	d9ec      	bls.n	8001124 <write_signature+0x44>
                                  for(a = 16;a < 32;a++)
 800114a:	2310      	movs	r3, #16
 800114c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001150:	e011      	b.n	8001176 <write_signature+0x96>
                                	  data[a] =  _flash_file_param.f_file0[a - 16];
 8001152:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001156:	f1a3 0210 	sub.w	r2, r3, #16
 800115a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800115e:	49aa      	ldr	r1, [pc, #680]	; (8001408 <write_signature+0x328>)
 8001160:	440a      	add	r2, r1
 8001162:	7c12      	ldrb	r2, [r2, #16]
 8001164:	3380      	adds	r3, #128	; 0x80
 8001166:	443b      	add	r3, r7
 8001168:	f803 2c74 	strb.w	r2, [r3, #-116]
                                  for(a = 16;a < 32;a++)
 800116c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001170:	3301      	adds	r3, #1
 8001172:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001176:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800117a:	2b1f      	cmp	r3, #31
 800117c:	d9e9      	bls.n	8001152 <write_signature+0x72>
                                  data[32] =  _flash_file_param.f_size0         & 0xff;
 800117e:	4ba2      	ldr	r3, [pc, #648]	; (8001408 <write_signature+0x328>)
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                  data[33] = (_flash_file_param.f_size0 >> 8)   & 0xff;
 8001188:	4b9f      	ldr	r3, [pc, #636]	; (8001408 <write_signature+0x328>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                                  data[34] = (_flash_file_param.f_size0 >> 16)  & 0xff;
 8001194:	4b9c      	ldr	r3, [pc, #624]	; (8001408 <write_signature+0x328>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	0c1b      	lsrs	r3, r3, #16
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                  data[35] = (_flash_file_param.f_size0 >> 24)  & 0xff;
 80011a0:	4b99      	ldr	r3, [pc, #612]	; (8001408 <write_signature+0x328>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	0e1b      	lsrs	r3, r3, #24
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                                  data[36] =  _flash_file_param.f_blocks0          & 0xff;
 80011ac:	4b96      	ldr	r3, [pc, #600]	; (8001408 <write_signature+0x328>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                                  data[37] = (_flash_file_param.f_blocks0 >> 8)    & 0xff;
 80011b6:	4b94      	ldr	r3, [pc, #592]	; (8001408 <write_signature+0x328>)
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                                  data[38] = (_flash_file_param.f_blocks0 >> 16)   & 0xff;
 80011c2:	4b91      	ldr	r3, [pc, #580]	; (8001408 <write_signature+0x328>)
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	0c1b      	lsrs	r3, r3, #16
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                                  data[39] = (_flash_file_param.f_blocks0 >> 24)   & 0xff;
 80011ce:	4b8e      	ldr	r3, [pc, #568]	; (8001408 <write_signature+0x328>)
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	0e1b      	lsrs	r3, r3, #24
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                                  data[40] =  _flash_file_param.f_crc0       & 0xff;
 80011da:	4b8b      	ldr	r3, [pc, #556]	; (8001408 <write_signature+0x328>)
 80011dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                                  data[41] = (_flash_file_param.f_crc0 >> 8) & 0xff;
 80011e4:	4b88      	ldr	r3, [pc, #544]	; (8001408 <write_signature+0x328>)
 80011e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

								  address = FLASH_BACKUP_A5_SIG_ADR;
 80011f2:	4b86      	ldr	r3, [pc, #536]	; (800140c <write_signature+0x32c>)
 80011f4:	67fb      	str	r3, [r7, #124]	; 0x7c
								  address_stop = address + 48;
 80011f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011f8:	3330      	adds	r3, #48	; 0x30
 80011fa:	677b      	str	r3, [r7, #116]	; 0x74
	  		  	  	  	  	  	  break;
 80011fc:	e0ee      	b.n	80013dc <write_signature+0x2fc>
	  	  case runtime_a5_program:
	  		  	  	  	  	  	  for(a = 0;a < 16;a++)
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001204:	e010      	b.n	8001228 <write_signature+0x148>
	  		  	  	  	  	  		  data[a] =  _flash_file_param.f_magic_val1[a];
 8001206:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800120a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800120e:	497e      	ldr	r1, [pc, #504]	; (8001408 <write_signature+0x328>)
 8001210:	440a      	add	r2, r1
 8001212:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8001216:	3380      	adds	r3, #128	; 0x80
 8001218:	443b      	add	r3, r7
 800121a:	f803 2c74 	strb.w	r2, [r3, #-116]
	  		  	  	  	  	  	  for(a = 0;a < 16;a++)
 800121e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001222:	3301      	adds	r3, #1
 8001224:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001228:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d9ea      	bls.n	8001206 <write_signature+0x126>
								  for(a = 16;a < 32;a++)
 8001230:	2310      	movs	r3, #16
 8001232:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001236:	e012      	b.n	800125e <write_signature+0x17e>
									  data[a] =  _flash_file_param.f_file1[a - 16];
 8001238:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800123c:	f1a3 0210 	sub.w	r2, r3, #16
 8001240:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001244:	4970      	ldr	r1, [pc, #448]	; (8001408 <write_signature+0x328>)
 8001246:	440a      	add	r2, r1
 8001248:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800124c:	3380      	adds	r3, #128	; 0x80
 800124e:	443b      	add	r3, r7
 8001250:	f803 2c74 	strb.w	r2, [r3, #-116]
								  for(a = 16;a < 32;a++)
 8001254:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001258:	3301      	adds	r3, #1
 800125a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800125e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001262:	2b1f      	cmp	r3, #31
 8001264:	d9e8      	bls.n	8001238 <write_signature+0x158>
								  data[32] =  _flash_file_param.f_size1         & 0xff;
 8001266:	4b68      	ldr	r3, [pc, #416]	; (8001408 <write_signature+0x328>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
								  data[33] = (_flash_file_param.f_size1 >> 8)   & 0xff;
 8001270:	4b65      	ldr	r3, [pc, #404]	; (8001408 <write_signature+0x328>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
								  data[34] = (_flash_file_param.f_size1 >> 16)  & 0xff;
 800127c:	4b62      	ldr	r3, [pc, #392]	; (8001408 <write_signature+0x328>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001280:	0c1b      	lsrs	r3, r3, #16
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
								  data[35] = (_flash_file_param.f_size1 >> 24)  & 0xff;
 8001288:	4b5f      	ldr	r3, [pc, #380]	; (8001408 <write_signature+0x328>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	0e1b      	lsrs	r3, r3, #24
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

								  data[36] =  _flash_file_param.f_blocks1          & 0xff;
 8001294:	4b5c      	ldr	r3, [pc, #368]	; (8001408 <write_signature+0x328>)
 8001296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
								  data[37] = (_flash_file_param.f_blocks1 >> 8)    & 0xff;
 800129e:	4b5a      	ldr	r3, [pc, #360]	; (8001408 <write_signature+0x328>)
 80012a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012a2:	0a1b      	lsrs	r3, r3, #8
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
								  data[38] = (_flash_file_param.f_blocks1 >> 16)   & 0xff;
 80012aa:	4b57      	ldr	r3, [pc, #348]	; (8001408 <write_signature+0x328>)
 80012ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
								  data[39] = (_flash_file_param.f_blocks1 >> 24)   & 0xff;
 80012b6:	4b54      	ldr	r3, [pc, #336]	; (8001408 <write_signature+0x328>)
 80012b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ba:	0e1b      	lsrs	r3, r3, #24
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

								  data[40] =  _flash_file_param.f_crc1       & 0xff;
 80012c2:	4b51      	ldr	r3, [pc, #324]	; (8001408 <write_signature+0x328>)
 80012c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
								  data[41] = (_flash_file_param.f_crc1 >> 8) & 0xff;
 80012ce:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <write_signature+0x328>)
 80012d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

								  address = FLASH_RUNTIME_A5_SIG_ADR;
 80012de:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <write_signature+0x330>)
 80012e0:	67fb      	str	r3, [r7, #124]	; 0x7c
								  address_stop = address + 48;
 80012e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012e4:	3330      	adds	r3, #48	; 0x30
 80012e6:	677b      	str	r3, [r7, #116]	; 0x74
	  		  		  	  	  	  break;
 80012e8:	e078      	b.n	80013dc <write_signature+0x2fc>
	  	  case runtime_a5_write:
	  		  	  	  	  	  	  for(a = 0;a < 16;a++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80012f0:	e010      	b.n	8001314 <write_signature+0x234>
	  			  		  	  	  	  data[a] =  _flash_file_param.f_magic_val2[a];
 80012f2:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80012f6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80012fa:	4943      	ldr	r1, [pc, #268]	; (8001408 <write_signature+0x328>)
 80012fc:	440a      	add	r2, r1
 80012fe:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001302:	3380      	adds	r3, #128	; 0x80
 8001304:	443b      	add	r3, r7
 8001306:	f803 2c74 	strb.w	r2, [r3, #-116]
	  		  	  	  	  	  	  for(a = 0;a < 16;a++)
 800130a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800130e:	3301      	adds	r3, #1
 8001310:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001314:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d9ea      	bls.n	80012f2 <write_signature+0x212>

	  							  for(a = 16;a < 32;a++)
 800131c:	2310      	movs	r3, #16
 800131e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001322:	e012      	b.n	800134a <write_signature+0x26a>
	  									data[a] =  _flash_file_param.f_file2[a - 16];
 8001324:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001328:	f1a3 0210 	sub.w	r2, r3, #16
 800132c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001330:	4935      	ldr	r1, [pc, #212]	; (8001408 <write_signature+0x328>)
 8001332:	440a      	add	r2, r1
 8001334:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8001338:	3380      	adds	r3, #128	; 0x80
 800133a:	443b      	add	r3, r7
 800133c:	f803 2c74 	strb.w	r2, [r3, #-116]
	  							  for(a = 16;a < 32;a++)
 8001340:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001344:	3301      	adds	r3, #1
 8001346:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800134a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800134e:	2b1f      	cmp	r3, #31
 8001350:	d9e8      	bls.n	8001324 <write_signature+0x244>

	  							  data[32] =  _flash_file_param.f_size2         & 0xff;
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <write_signature+0x328>)
 8001354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
								  data[33] = (_flash_file_param.f_size2 >> 8)   & 0xff;
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <write_signature+0x328>)
 800135e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
								  data[34] = (_flash_file_param.f_size2 >> 16)  & 0xff;
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <write_signature+0x328>)
 800136a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800136c:	0c1b      	lsrs	r3, r3, #16
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
								  data[35] = (_flash_file_param.f_size2 >> 24)  & 0xff;
 8001374:	4b24      	ldr	r3, [pc, #144]	; (8001408 <write_signature+0x328>)
 8001376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001378:	0e1b      	lsrs	r3, r3, #24
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

								  data[36] =  _flash_file_param.f_blocks2          & 0xff;
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <write_signature+0x328>)
 8001382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
								  data[37] = (_flash_file_param.f_blocks2 >> 8)    & 0xff;
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <write_signature+0x328>)
 800138c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
								  data[38] = (_flash_file_param.f_blocks2 >> 16)   & 0xff;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <write_signature+0x328>)
 8001398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800139a:	0c1b      	lsrs	r3, r3, #16
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
								  data[39] = (_flash_file_param.f_blocks2 >> 24)   & 0xff;
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <write_signature+0x328>)
 80013a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80013a6:	0e1b      	lsrs	r3, r3, #24
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

								  data[40] =  _flash_file_param.f_crc2       & 0xff;
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <write_signature+0x328>)
 80013b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
								  data[41] = (_flash_file_param.f_crc2 >> 8) & 0xff;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <write_signature+0x328>)
 80013bc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	  		  	  	  	  	  	  address = FLASH_RUNTIME_A5_SIG_ADR;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <write_signature+0x330>)
 80013cc:	67fb      	str	r3, [r7, #124]	; 0x7c
	  		  	  	  	  	  	  address_stop = address + 16;
 80013ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013d0:	3310      	adds	r3, #16
 80013d2:	677b      	str	r3, [r7, #116]	; 0x74
	  		  		  	  	  	  break;
 80013d4:	e002      	b.n	80013dc <write_signature+0x2fc>
//	  	  case A5_signature:
//	  		  	  	  	  	  	  address = FLASH_A5_SIG_SWITCH;
//	  		  		  		  	  break;
	  	  default:
	  		  	  	  	  	  	  HAL_FLASH_Lock();
 80013d6:	f000 ffd1 	bl	800237c <HAL_FLASH_Lock>
 80013da:	e02c      	b.n	8001436 <write_signature+0x356>
	  		  	  	  	  	  	  return;
	  }

//	  for(address_init = 0;address_init < 1024;address_init++)
//		  aRxBuffer[3 + address_init] = address_init & 0xff;
      index = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	67bb      	str	r3, [r7, #120]	; 0x78
//	  address_init = Address;
	  while (address < address_stop)
 80013e0:	e019      	b.n	8001416 <write_signature+0x336>
	  {
	   // if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, Address, ((uint32_t)FlashWord)) == HAL_OK)
	    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, address, ((uint32_t) &data[index])) == HAL_OK)
 80013e2:	f107 020c 	add.w	r2, r7, #12
 80013e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013e8:	4413      	add	r3, r2
 80013ea:	461a      	mov	r2, r3
 80013ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80013ee:	2001      	movs	r0, #1
 80013f0:	f000 ff58 	bl	80022a4 <HAL_FLASH_Program>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <write_signature+0x334>
	  //  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, address, ((uint32_t) &data[0])) == HAL_OK)
	    {
	      address += 16;  /* increment to the next Flash word */
 80013fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013fc:	3310      	adds	r3, #16
 80013fe:	67fb      	str	r3, [r7, #124]	; 0x7c
	      index += 16;
 8001400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001402:	3310      	adds	r3, #16
 8001404:	67bb      	str	r3, [r7, #120]	; 0x78
 8001406:	e006      	b.n	8001416 <write_signature+0x336>
 8001408:	20000acc 	.word	0x20000acc
 800140c:	081e2000 	.word	0x081e2000
 8001410:	081e4000 	.word	0x081e4000
	    }
	    else
	    {
	      /* Error occurred while writing data in Flash memory.
	         User can add here some code to deal with this error */
	      while (1)
 8001414:	e7fe      	b.n	8001414 <write_signature+0x334>
	  while (address < address_stop)
 8001416:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800141a:	429a      	cmp	r2, r3
 800141c:	d3e1      	bcc.n	80013e2 <write_signature+0x302>
	    }
	  }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800141e:	f000 ffad 	bl	800237c <HAL_FLASH_Lock>

	  /* Re-enable instruction cache */
	  if (HAL_ICACHE_Enable() != HAL_OK)
 8001422:	f001 fb5b 	bl	8002adc <HAL_ICACHE_Enable>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <write_signature+0x350>
	  {
	    Error_Handler();
 800142c:	f7ff fb9c 	bl	8000b68 <Error_Handler>
	  }
	  HAL_Delay(2);
 8001430:	2002      	movs	r0, #2
 8001432:	f000 fd13 	bl	8001e5c <HAL_Delay>
}
 8001436:	3780      	adds	r7, #128	; 0x80
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <GetPage>:
  * @brief  Gets the page of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static uint32_t GetPage(uint32_t Addr)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <GetPage+0x8c>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001450:	4293      	cmp	r3, r2
 8001452:	d00d      	beq.n	8001470 <GetPage+0x34>
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <GetPage+0x8c>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <GetPage+0x2e>
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <GetPage+0x8c>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	029b      	lsls	r3, r3, #10
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001468:	e004      	b.n	8001474 <GetPage+0x38>
 800146a:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800146e:	e001      	b.n	8001474 <GetPage+0x38>
 8001470:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4293      	cmp	r3, r2
 8001478:	d905      	bls.n	8001486 <GetPage+0x4a>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001480:	0b5b      	lsrs	r3, r3, #13
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e019      	b.n	80014ba <GetPage+0x7e>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <GetPage+0x8c>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148e:	4293      	cmp	r3, r2
 8001490:	d00d      	beq.n	80014ae <GetPage+0x72>
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <GetPage+0x8c>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <GetPage+0x6c>
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <GetPage+0x8c>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80014a6:	e004      	b.n	80014b2 <GetPage+0x76>
 80014a8:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80014ac:	e001      	b.n	80014b2 <GetPage+0x76>
 80014ae:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	0b5b      	lsrs	r3, r3, #13
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  return page;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	0bfa07a0 	.word	0x0bfa07a0

080014cc <GetBank>:
  * @brief  Gets the bank of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The bank of a given address
  */
static uint32_t GetBank(uint32_t Addr)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  return FLASH_BANK_1;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <uart_receive>:
 * @param   *data: Array to save the received data.
 * @param   length:  Size of the data.
 * @return  status: Report about the success of the receiving.
 */
uint32_t uart_receive(uint8_t *data, uint16_t length)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
   uint32_t status;

   status = UART_ERROR;
 80014f0:	23ff      	movs	r3, #255	; 0xff
 80014f2:	60fb      	str	r3, [r7, #12]

   if (HAL_OK == HAL_UART_Receive_IT(&huart5, data, length))
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	461a      	mov	r2, r3
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <uart_receive+0x30>)
 80014fc:	f005 fc7a 	bl	8006df4 <HAL_UART_Receive_IT>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <uart_receive+0x26>
   {
	 status = UART_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
   }

    return status;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000214 	.word	0x20000214

08001518 <uart_transmit_ch>:


void uart_transmit_ch(uint8_t data)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
    aTxBuffer[0] = data;
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <uart_transmit_ch+0x24>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	7013      	strb	r3, [r2, #0]

    HAL_UART_Transmit_IT(&huart5, (uint8_t *)aTxBuffer, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	4904      	ldr	r1, [pc, #16]	; (800153c <uart_transmit_ch+0x24>)
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <uart_transmit_ch+0x28>)
 800152e:	f005 fba9 	bl	8006c84 <HAL_UART_Transmit_IT>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000138 	.word	0x20000138
 8001540:	20000214 	.word	0x20000214

08001544 <Transmit_result>:

uint32_t Transmit_result(uint8_t k)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	 uint32_t result = X_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]

	 UartReadyTx = false;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <Transmit_result+0x30>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
	 uart_transmit_ch(k);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ffdc 	bl	8001518 <uart_transmit_ch>
	 while(UartReadyTx == false) {};
 8001560:	bf00      	nop
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <Transmit_result+0x30>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0fb      	beq.n	8001562 <Transmit_result+0x1e>

	 return result;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200002a8 	.word	0x200002a8

08001578 <transmit_notification>:

void transmit_notification(uint8_t * command)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	uint8_t a,b;
    b = strlen(command);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7fe fe77 	bl	8000274 <strlen>
 8001586:	4603      	mov	r3, r0
 8001588:	73bb      	strb	r3, [r7, #14]

	for(a = 0;a < b ;a++)
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e009      	b.n	80015a4 <transmit_notification+0x2c>
		Transmit_result(command[a]);
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ffd3 	bl	8001544 <Transmit_result>
	for(a = 0;a < b ;a++)
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	3301      	adds	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d3f1      	bcc.n	8001590 <transmit_notification+0x18>
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <trasmit_answer>:

void trasmit_answer(uint8_t * command,uint32_t index)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	uint8_t a,b;
    b = strlen(command);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7fe fe56 	bl	8000274 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	73bb      	strb	r3, [r7, #14]

    command[22] = (index % 10) + 0x30;
 80015cc:	6839      	ldr	r1, [r7, #0]
 80015ce:	4b30      	ldr	r3, [pc, #192]	; (8001690 <trasmit_answer+0xd8>)
 80015d0:	fba3 2301 	umull	r2, r3, r3, r1
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	1aca      	subs	r2, r1, r3
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3316      	adds	r3, #22
 80015e6:	3230      	adds	r2, #48	; 0x30
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	701a      	strb	r2, [r3, #0]
    command[21] = ((index / 10) % 10) + 0x30;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4a28      	ldr	r2, [pc, #160]	; (8001690 <trasmit_answer+0xd8>)
 80015f0:	fba2 2303 	umull	r2, r3, r2, r3
 80015f4:	08d9      	lsrs	r1, r3, #3
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <trasmit_answer+0xd8>)
 80015f8:	fba3 2301 	umull	r2, r3, r3, r1
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	1aca      	subs	r2, r1, r3
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3315      	adds	r3, #21
 800160e:	3230      	adds	r2, #48	; 0x30
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	701a      	strb	r2, [r3, #0]
    command[20] = ((index / 100) % 10) + 0x30;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <trasmit_answer+0xdc>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	0959      	lsrs	r1, r3, #5
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <trasmit_answer+0xd8>)
 8001620:	fba3 2301 	umull	r2, r3, r3, r1
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	1aca      	subs	r2, r1, r3
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3314      	adds	r3, #20
 8001636:	3230      	adds	r2, #48	; 0x30
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	701a      	strb	r2, [r3, #0]
    command[19] = ((index / 1000) % 10) + 0x30;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4a16      	ldr	r2, [pc, #88]	; (8001698 <trasmit_answer+0xe0>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	0999      	lsrs	r1, r3, #6
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <trasmit_answer+0xd8>)
 8001648:	fba3 2301 	umull	r2, r3, r3, r1
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	1aca      	subs	r2, r1, r3
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3313      	adds	r3, #19
 800165e:	3230      	adds	r2, #48	; 0x30
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	701a      	strb	r2, [r3, #0]

	for(a = 0;a < b ;a++)
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e009      	b.n	800167e <trasmit_answer+0xc6>
		Transmit_result(command[a]);
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff66 	bl	8001544 <Transmit_result>
	for(a = 0;a < b ;a++)
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	3301      	adds	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	429a      	cmp	r2, r3
 8001684:	d3f1      	bcc.n	800166a <trasmit_answer+0xb2>
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	cccccccd 	.word	0xcccccccd
 8001694:	51eb851f 	.word	0x51eb851f
 8001698:	10624dd3 	.word	0x10624dd3

0800169c <flasherase>:




void flasherase(uint8_t full)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	uint32_t FirstPage = 0, NbOfPages = 0,BankNumber = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
	uint32_t PageError = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
	/*Variable used for Erase procedure*/
	static FLASH_EraseInitTypeDef EraseInitStruct;


	/* Disable instruction cache prior to internal cacheable memory update */
	if (HAL_ICACHE_Disable() != HAL_OK)
 80016b6:	f001 fa21 	bl	8002afc <HAL_ICACHE_Disable>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <flasherase+0x28>
	{
		Error_Handler();
 80016c0:	f7ff fa52 	bl	8000b68 <Error_Handler>
	}

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80016c4:	f000 fe38 	bl	8002338 <HAL_FLASH_Unlock>

	if(full == 1)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d125      	bne.n	800171a <flasherase+0x7e>
	{
		  /* Erase the user Flash area
		  (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

		  /* Get the 1st page to erase */
		  FirstPage = GetPage(FLASH_BACKUP_START_ADDR);
 80016ce:	482c      	ldr	r0, [pc, #176]	; (8001780 <flasherase+0xe4>)
 80016d0:	f7ff feb4 	bl	800143c <GetPage>
 80016d4:	6178      	str	r0, [r7, #20]

		  /* Get the number of pages to erase from 1st page */
		  NbOfPages = GetPage(FLASH_USER_BOT_END_ADDR) - FirstPage + 1;
 80016d6:	482b      	ldr	r0, [pc, #172]	; (8001784 <flasherase+0xe8>)
 80016d8:	f7ff feb0 	bl	800143c <GetPage>
 80016dc:	4602      	mov	r2, r0
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]

		  /* Get the bank */
		  BankNumber = GetBank(FLASH_BACKUP_START_ADDR);
 80016e6:	4826      	ldr	r0, [pc, #152]	; (8001780 <flasherase+0xe4>)
 80016e8:	f7ff fef0 	bl	80014cc <GetBank>
 80016ec:	60f8      	str	r0, [r7, #12]

		  /* Fill EraseInit structure*/
		  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <flasherase+0xec>)
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
		  EraseInitStruct.Page        = FirstPage;
 80016f4:	4a24      	ldr	r2, [pc, #144]	; (8001788 <flasherase+0xec>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	6093      	str	r3, [r2, #8]
		  EraseInitStruct.NbPages     = NbOfPages;
 80016fa:	4a23      	ldr	r2, [pc, #140]	; (8001788 <flasherase+0xec>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	60d3      	str	r3, [r2, #12]
		  EraseInitStruct.Banks       = BankNumber;
 8001700:	4a21      	ldr	r2, [pc, #132]	; (8001788 <flasherase+0xec>)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6053      	str	r3, [r2, #4]


		  // Erase First block  &PageError
		  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	4619      	mov	r1, r3
 800170c:	481e      	ldr	r0, [pc, #120]	; (8001788 <flasherase+0xec>)
 800170e:	f000 ff0f 	bl	8002530 <HAL_FLASHEx_Erase>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d000      	beq.n	800171a <flasherase+0x7e>
				User can add here some code to deal with this error.
				PageError will contain the faulty page and then to know the code error on this page,
				user can call function 'HAL_FLASH_GetError()'
			  */
			  /* Infinite loop */
			  while (1)
 8001718:	e7fe      	b.n	8001718 <flasherase+0x7c>
		  }
	}


	  /* Get the bank */
	  BankNumber = FLASH_BANK_2;//GetBank(FLASH_RUNTIME_START_ADDR);
 800171a:	2302      	movs	r3, #2
 800171c:	60fb      	str	r3, [r7, #12]

	  /* Get the 1st page to erase */
	  FirstPage = GetPage(FLASH_RUNTIME_START_ADDR);
 800171e:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 8001722:	f7ff fe8b 	bl	800143c <GetPage>
 8001726:	6178      	str	r0, [r7, #20]

	  /* Get the number of pages to erase from 1st page */
	  NbOfPages = GetPage(FLASH_RUNTIME_A5_END_ADR) - FirstPage + 1;
 8001728:	4818      	ldr	r0, [pc, #96]	; (800178c <flasherase+0xf0>)
 800172a:	f7ff fe87 	bl	800143c <GetPage>
 800172e:	4602      	mov	r2, r0
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	3301      	adds	r3, #1
 8001736:	613b      	str	r3, [r7, #16]


	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <flasherase+0xec>)
 800173a:	2202      	movs	r2, #2
 800173c:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page        = FirstPage;
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <flasherase+0xec>)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbPages     = NbOfPages;
 8001744:	4a10      	ldr	r2, [pc, #64]	; (8001788 <flasherase+0xec>)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	60d3      	str	r3, [r2, #12]
	  EraseInitStruct.Banks       = BankNumber;
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <flasherase+0xec>)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6053      	str	r3, [r2, #4]

	  // Erase Second block   &PageError
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	480c      	ldr	r0, [pc, #48]	; (8001788 <flasherase+0xec>)
 8001758:	f000 feea 	bl	8002530 <HAL_FLASHEx_Erase>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d000      	beq.n	8001764 <flasherase+0xc8>
			User can add here some code to deal with this error.
			PageError will contain the faulty page and then to know the code error on this page,
			user can call function 'HAL_FLASH_GetError()'
		  */
		  /* Infinite loop */
		  while (1)
 8001762:	e7fe      	b.n	8001762 <flasherase+0xc6>
		  }
	  }


    /* Unlock the Flash to enable the flash control register access *************/
	 HAL_FLASH_Lock();
 8001764:	f000 fe0a 	bl	800237c <HAL_FLASH_Lock>

	if (HAL_ICACHE_Enable() != HAL_OK)
 8001768:	f001 f9b8 	bl	8002adc <HAL_ICACHE_Enable>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <flasherase+0xda>
	{
		Error_Handler();
 8001772:	f7ff f9f9 	bl	8000b68 <Error_Handler>
	}
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	08020000 	.word	0x08020000
 8001784:	080e0000 	.word	0x080e0000
 8001788:	20000b58 	.word	0x20000b58
 800178c:	081f0000 	.word	0x081f0000

08001790 <erasesignature>:


void erasesignature(uint8_t sel)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
	uint32_t FirstPage = 0, NbOfPages = 0,BankNumber = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
	uint32_t PageError = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
	/*Variable used for Erase procedure*/
	static FLASH_EraseInitTypeDef EraseInitStruct;


	/* Disable instruction cache prior to internal cacheable memory update */
	if (HAL_ICACHE_Disable() != HAL_OK)
 80017aa:	f001 f9a7 	bl	8002afc <HAL_ICACHE_Disable>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <erasesignature+0x28>
	{
		Error_Handler();
 80017b4:	f7ff f9d8 	bl	8000b68 <Error_Handler>
	}

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80017b8:	f000 fdbe 	bl	8002338 <HAL_FLASH_Unlock>

	/* Erase the user Flash area
	   (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	 /* Get the only page to erase */
	switch(sel)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d014      	beq.n	80017ec <erasesignature+0x5c>
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	dc19      	bgt.n	80017fa <erasesignature+0x6a>
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <erasesignature+0x40>
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d007      	beq.n	80017de <erasesignature+0x4e>
 80017ce:	e014      	b.n	80017fa <erasesignature+0x6a>
	{
		case backup_a5_program:
								FirstPage = GetPage(FLASH_BACKUP_A5_SIG_ADR);
 80017d0:	481c      	ldr	r0, [pc, #112]	; (8001844 <erasesignature+0xb4>)
 80017d2:	f7ff fe33 	bl	800143c <GetPage>
 80017d6:	6178      	str	r0, [r7, #20]
								BankNumber = FLASH_BANK_2;
 80017d8:	2302      	movs	r3, #2
 80017da:	613b      	str	r3, [r7, #16]
								break;
 80017dc:	e00d      	b.n	80017fa <erasesignature+0x6a>
		case runtime_a5_program:
								FirstPage = GetPage(FLASH_RUNTIME_A5_SIG_ADR);
 80017de:	481a      	ldr	r0, [pc, #104]	; (8001848 <erasesignature+0xb8>)
 80017e0:	f7ff fe2c 	bl	800143c <GetPage>
 80017e4:	6178      	str	r0, [r7, #20]
								BankNumber = FLASH_BANK_2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	613b      	str	r3, [r7, #16]
								break;
 80017ea:	e006      	b.n	80017fa <erasesignature+0x6a>
//		case runtime_a5_write:
//								FirstPage = GetPage(FLASH_RUNTIME_A5_SIG_ADR);
//								BankNumber = GetBank(FLASH_RUNTIME_A5_SIG_ADR);
//								break;
		case A5_signature:
								FirstPage = GetPage(FLASH_A5_SIG_SWITCH);
 80017ec:	4817      	ldr	r0, [pc, #92]	; (800184c <erasesignature+0xbc>)
 80017ee:	f7ff fe25 	bl	800143c <GetPage>
 80017f2:	6178      	str	r0, [r7, #20]
								BankNumber = FLASH_BANK_2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	613b      	str	r3, [r7, #16]
								break;
 80017f8:	bf00      	nop
	}

	/* Get the number of pages to erase from 1st page */
	NbOfPages = 1;// GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 80017fa:	2301      	movs	r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]


    /* Fill EraseInit structure*/
    EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <erasesignature+0xc0>)
 8001800:	2202      	movs	r2, #2
 8001802:	601a      	str	r2, [r3, #0]
    EraseInitStruct.Page        = FirstPage;
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <erasesignature+0xc0>)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	6093      	str	r3, [r2, #8]
    EraseInitStruct.NbPages     = NbOfPages;
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <erasesignature+0xc0>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	60d3      	str	r3, [r2, #12]
    EraseInitStruct.Banks       = BankNumber;
 8001810:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <erasesignature+0xc0>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	6053      	str	r3, [r2, #4]


	// Erase page  &PageError
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	4619      	mov	r1, r3
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <erasesignature+0xc0>)
 800181e:	f000 fe87 	bl	8002530 <HAL_FLASHEx_Erase>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d000      	beq.n	800182a <erasesignature+0x9a>
			User can add here some code to deal with this error.
			PageError will contain the faulty page and then to know the code error on this page,
			user can call function 'HAL_FLASH_GetError()'
		  */
		  /* Infinite loop */
		  while (1)
 8001828:	e7fe      	b.n	8001828 <erasesignature+0x98>
			//	BSP_LED_On(LED3);
		  }
	}

    /* Unlock the Flash to enable the flash control register access *************/
	 HAL_FLASH_Lock();
 800182a:	f000 fda7 	bl	800237c <HAL_FLASH_Lock>

	if (HAL_ICACHE_Enable() != HAL_OK)
 800182e:	f001 f955 	bl	8002adc <HAL_ICACHE_Enable>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <erasesignature+0xac>
	{
		Error_Handler();
 8001838:	f7ff f996 	bl	8000b68 <Error_Handler>
	}
}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	081e2000 	.word	0x081e2000
 8001848:	081e4000 	.word	0x081e4000
 800184c:	081e0000 	.word	0x081e0000
 8001850:	20000b68 	.word	0x20000b68

08001854 <checkstring>:



uint32_t checkstring(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	uint32_t result = X_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
	int16_t crc_received,crc_calculated;

	if(aRxBuffer[0] != X_STX)
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <checkstring+0x7c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d003      	beq.n	800186e <checkstring+0x1a>
	{
	  result = X_ERROR;
 8001866:	23ff      	movs	r3, #255	; 0xff
 8001868:	607b      	str	r3, [r7, #4]
	  return result;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	e02b      	b.n	80018c6 <checkstring+0x72>
	}

	if((aRxBuffer[1] + aRxBuffer[2]) != 0xff)
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <checkstring+0x7c>)
 8001870:	785b      	ldrb	r3, [r3, #1]
 8001872:	461a      	mov	r2, r3
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <checkstring+0x7c>)
 8001876:	789b      	ldrb	r3, [r3, #2]
 8001878:	4413      	add	r3, r2
 800187a:	2bff      	cmp	r3, #255	; 0xff
 800187c:	d003      	beq.n	8001886 <checkstring+0x32>
	{
	  result = X_ERROR;
 800187e:	23ff      	movs	r3, #255	; 0xff
 8001880:	607b      	str	r3, [r7, #4]
	  return result;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	e01f      	b.n	80018c6 <checkstring+0x72>
	}

	crc_received = ((uint16_t)aRxBuffer[X_PACKET_CRC_HIGH_INDEX] << 8u) | ((uint16_t)aRxBuffer[X_PACKET_CRC_LOW_INDEX]);
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <checkstring+0x7c>)
 8001888:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b21a      	sxth	r2, r3
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <checkstring+0x7c>)
 8001892:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8001896:	b21b      	sxth	r3, r3
 8001898:	4313      	orrs	r3, r2
 800189a:	807b      	strh	r3, [r7, #2]

	/* We calculate it too. */
    crc_calculated = xmodem_calc_crc(&aRxBuffer[X_PACKET_START_DATA],1024);
 800189c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <checkstring+0x80>)
 80018a2:	f000 f9f3 	bl	8001c8c <xmodem_calc_crc>
 80018a6:	4603      	mov	r3, r0
 80018a8:	803b      	strh	r3, [r7, #0]

    if(crc_received != crc_calculated)
 80018aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80018ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d006      	beq.n	80018c4 <checkstring+0x70>
    {
    	transmit_notification(&crc_bad[0]);
 80018b6:	4808      	ldr	r0, [pc, #32]	; (80018d8 <checkstring+0x84>)
 80018b8:	f7ff fe5e 	bl	8001578 <transmit_notification>
	  result = X_ERROR;
 80018bc:	23ff      	movs	r3, #255	; 0xff
 80018be:	607b      	str	r3, [r7, #4]
	  return result;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	e000      	b.n	80018c6 <checkstring+0x72>
	}

	return result;
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200002ac 	.word	0x200002ac
 80018d4:	200002af 	.word	0x200002af
 80018d8:	20000108 	.word	0x20000108

080018dc <Transmit>:

uint32_t Transmit(uint8_t k)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
	 uint32_t result = X_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]

	 UartReadyTx = false;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <Transmit+0x30>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
	 uart_transmit_ch(k);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fe10 	bl	8001518 <uart_transmit_ch>
	 while(UartReadyTx == false) {};
 80018f8:	bf00      	nop
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <Transmit+0x30>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0fb      	beq.n	80018fa <Transmit+0x1e>

	 return result;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200002a8 	.word	0x200002a8

08001910 <checksum_adder>:


uint16_t checksum_adder(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
	uint16_t a;

	for(a = 0;a < 1024;a++)
 8001916:	2300      	movs	r3, #0
 8001918:	80fb      	strh	r3, [r7, #6]
 800191a:	e00c      	b.n	8001936 <checksum_adder+0x26>
	{
		cs += compare_block[a];
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <checksum_adder+0x40>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <checksum_adder+0x44>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	4413      	add	r3, r2
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <checksum_adder+0x44>)
 800192e:	801a      	strh	r2, [r3, #0]
	for(a = 0;a < 1024;a++)
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	3301      	adds	r3, #1
 8001934:	80fb      	strh	r3, [r7, #6]
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193c:	d3ee      	bcc.n	800191c <checksum_adder+0xc>
	}

	return cs;
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <checksum_adder+0x44>)
 8001940:	881b      	ldrh	r3, [r3, #0]
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	200006bc 	.word	0x200006bc
 8001954:	20000b54 	.word	0x20000b54

08001958 <compare_array>:


uint32_t compare_array(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
	uint32_t result = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
	uint16_t a;

	for(a = 0;a < 1024;a++)
 8001962:	2300      	movs	r3, #0
 8001964:	807b      	strh	r3, [r7, #2]
 8001966:	e010      	b.n	800198a <compare_array+0x32>
	{
		if(aRxBuffer[a + 3] != compare_block[a])
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	3303      	adds	r3, #3
 800196c:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <compare_array+0x48>)
 800196e:	5cd2      	ldrb	r2, [r2, r3]
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	490c      	ldr	r1, [pc, #48]	; (80019a4 <compare_array+0x4c>)
 8001974:	5ccb      	ldrb	r3, [r1, r3]
 8001976:	429a      	cmp	r2, r3
 8001978:	d004      	beq.n	8001984 <compare_array+0x2c>
		{
			result = 1;
 800197a:	2301      	movs	r3, #1
 800197c:	607b      	str	r3, [r7, #4]
			a = 1026;
 800197e:	f240 4302 	movw	r3, #1026	; 0x402
 8001982:	807b      	strh	r3, [r7, #2]
	for(a = 0;a < 1024;a++)
 8001984:	887b      	ldrh	r3, [r7, #2]
 8001986:	3301      	adds	r3, #1
 8001988:	807b      	strh	r3, [r7, #2]
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001990:	d3ea      	bcc.n	8001968 <compare_array+0x10>
		}
	}
	return result;
 8001992:	687b      	ldr	r3, [r7, #4]
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	200002ac 	.word	0x200002ac
 80019a4:	200006bc 	.word	0x200006bc

080019a8 <LongDelay>:

void LongDelay(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
	volatile uint32_t  a,b,c = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]

	for(a = 0;a < 100;a++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e00e      	b.n	80019d6 <LongDelay+0x2e>
		for(b = 0;b < 100;b++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	e005      	b.n	80019ca <LongDelay+0x22>
		{
           c++;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3301      	adds	r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
		for(b = 0;b < 100;b++)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b63      	cmp	r3, #99	; 0x63
 80019ce:	d9f6      	bls.n	80019be <LongDelay+0x16>
	for(a = 0;a < 100;a++)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b63      	cmp	r3, #99	; 0x63
 80019da:	d9ed      	bls.n	80019b8 <LongDelay+0x10>
		}
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <get_xmodem>:
 * @param   void
 * @return  void
 */

uint32_t get_xmodem(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
  uint32_t result = X_ERROR;
 80019f2:	23ff      	movs	r3, #255	; 0xff
 80019f4:	617b      	str	r3, [r7, #20]
  uint8_t header;
  uint8_t x_first_packet_received = false;
 80019f6:	2300      	movs	r3, #0
 80019f8:	74bb      	strb	r3, [r7, #18]
  uint32_t end_of_handshake = false;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  uint32_t index = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
  uint16_t cs = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	807b      	strh	r3, [r7, #2]

  /* Get the header from UART. */
   result = uart_receive(&aRxBuffer[0], 1029);
 8001a0a:	f240 4105 	movw	r1, #1029	; 0x405
 8001a0e:	4895      	ldr	r0, [pc, #596]	; (8001c64 <get_xmodem+0x278>)
 8001a10:	f7ff fd68 	bl	80014e4 <uart_receive>
 8001a14:	6178      	str	r0, [r7, #20]

  	/* Loop until there isn't any error (or until we jump to the user application). */
  UartReadyRx = false;
 8001a16:	4b94      	ldr	r3, [pc, #592]	; (8001c68 <get_xmodem+0x27c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]

	  while(x_first_packet_received == false)
 8001a1c:	e05b      	b.n	8001ad6 <get_xmodem+0xea>
	  {
		  header = 0xff;
 8001a1e:	23ff      	movs	r3, #255	; 0xff
 8001a20:	74fb      	strb	r3, [r7, #19]

		  Transmit(X_C);
 8001a22:	2043      	movs	r0, #67	; 0x43
 8001a24:	f7ff ff5a 	bl	80018dc <Transmit>
	 	  LongDelay();
 8001a28:	f7ff ffbe 	bl	80019a8 <LongDelay>

		  if(UartReadyRx == true)
 8001a2c:	4b8e      	ldr	r3, [pc, #568]	; (8001c68 <get_xmodem+0x27c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d118      	bne.n	8001a66 <get_xmodem+0x7a>
		  {
			// Check validity of package.
			result = checkstring();
 8001a34:	f7ff ff0e 	bl	8001854 <checkstring>
 8001a38:	6178      	str	r0, [r7, #20]
			if(result == X_OK)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d103      	bne.n	8001a48 <get_xmodem+0x5c>
			   header = aRxBuffer[0];
 8001a40:	4b88      	ldr	r3, [pc, #544]	; (8001c64 <get_xmodem+0x278>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	74fb      	strb	r3, [r7, #19]
 8001a46:	e00e      	b.n	8001a66 <get_xmodem+0x7a>
			else
			{
				header = 0x11;
 8001a48:	2311      	movs	r3, #17
 8001a4a:	74fb      	strb	r3, [r7, #19]
				uart_receive(&aRxBuffer[0],1029);
 8001a4c:	f240 4105 	movw	r1, #1029	; 0x405
 8001a50:	4884      	ldr	r0, [pc, #528]	; (8001c64 <get_xmodem+0x278>)
 8001a52:	f7ff fd47 	bl	80014e4 <uart_receive>
				Transmit(X_NAK);
 8001a56:	2015      	movs	r0, #21
 8001a58:	f7ff ff40 	bl	80018dc <Transmit>
				LongDelay();
 8001a5c:	f7ff ffa4 	bl	80019a8 <LongDelay>
				UartReadyRx = false;
 8001a60:	4b81      	ldr	r3, [pc, #516]	; (8001c68 <get_xmodem+0x27c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
			}
		  }

		  if((header == X_STX) || (header == X_SOH))
 8001a66:	7cfb      	ldrb	r3, [r7, #19]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d002      	beq.n	8001a72 <get_xmodem+0x86>
 8001a6c:	7cfb      	ldrb	r3, [r7, #19]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d126      	bne.n	8001ac0 <get_xmodem+0xd4>
		  {
			   flash_write(index++);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	60ba      	str	r2, [r7, #8]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fa5d 	bl	8000f38 <flash_write>
			   flash_read(FLASH_BACKUP_START_ADDR,&compare_block[0],WRITE_BLOCK);
 8001a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a82:	497a      	ldr	r1, [pc, #488]	; (8001c6c <get_xmodem+0x280>)
 8001a84:	487a      	ldr	r0, [pc, #488]	; (8001c70 <get_xmodem+0x284>)
 8001a86:	f7ff fa37 	bl	8000ef8 <flash_read>

			   // Calculate CS.
			   cs = checksum_adder();
 8001a8a:	f7ff ff41 	bl	8001910 <checksum_adder>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	807b      	strh	r3, [r7, #2]
			   // Compare write and read data.
			   result = compare_array();
 8001a92:	f7ff ff61 	bl	8001958 <compare_array>
 8001a96:	6178      	str	r0, [r7, #20]
			   if(result != X_OK)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <get_xmodem+0xbe>
			   {
				  trasmit_answer(&response_bad[0],0);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4874      	ldr	r0, [pc, #464]	; (8001c74 <get_xmodem+0x288>)
 8001aa2:	f7ff fd89 	bl	80015b8 <trasmit_answer>
				   return X_ERROR;
 8001aa6:	23ff      	movs	r3, #255	; 0xff
 8001aa8:	e0d7      	b.n	8001c5a <get_xmodem+0x26e>
			   }

			   x_first_packet_received = true;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	74bb      	strb	r3, [r7, #18]
			   aRxBuffer[0] = 0x11;
 8001aae:	4b6d      	ldr	r3, [pc, #436]	; (8001c64 <get_xmodem+0x278>)
 8001ab0:	2211      	movs	r2, #17
 8001ab2:	701a      	strb	r2, [r3, #0]
			   UartReadyRx = false;
 8001ab4:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <get_xmodem+0x27c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
			   Transmit(X_ACK);
 8001aba:	2006      	movs	r0, #6
 8001abc:	f7ff ff0e 	bl	80018dc <Transmit>
		   }
		  // Timeout equal 1 minute
		  if(++timeout > 60000)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d902      	bls.n	8001ad6 <get_xmodem+0xea>
		  {
			  transmit_notification(&timeout_note[0]);
 8001ad0:	4869      	ldr	r0, [pc, #420]	; (8001c78 <get_xmodem+0x28c>)
 8001ad2:	f7ff fd51 	bl	8001578 <transmit_notification>
	  while(x_first_packet_received == false)
 8001ad6:	7cbb      	ldrb	r3, [r7, #18]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0a0      	beq.n	8001a1e <get_xmodem+0x32>
			//  return X_ERROR;
		  }
	  }

	  trasmit_answer(&response_ok[0],0);
 8001adc:	2100      	movs	r1, #0
 8001ade:	4867      	ldr	r0, [pc, #412]	; (8001c7c <get_xmodem+0x290>)
 8001ae0:	f7ff fd6a 	bl	80015b8 <trasmit_answer>


		/* The header can be: SOH, STX, EOT and CAN. */
		while(end_of_handshake == false)
 8001ae4:	e0b4      	b.n	8001c50 <get_xmodem+0x264>
		{
			timeout = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
			while(UartReadyRx == false)
 8001aea:	e019      	b.n	8001b20 <get_xmodem+0x134>
			{
				if(++timeout > 900000)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3301      	adds	r3, #1
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a62      	ldr	r2, [pc, #392]	; (8001c80 <get_xmodem+0x294>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d912      	bls.n	8001b20 <get_xmodem+0x134>
				{
					end_of_handshake = true;
 8001afa:	2301      	movs	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
					header = aRxBuffer[0];
 8001afe:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <get_xmodem+0x278>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	74fb      	strb	r3, [r7, #19]
					if(header == X_EOT)
 8001b04:	7cfb      	ldrb	r3, [r7, #19]
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d103      	bne.n	8001b12 <get_xmodem+0x126>
					{
						UartReadyRx = true;
 8001b0a:	4b57      	ldr	r3, [pc, #348]	; (8001c68 <get_xmodem+0x27c>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e006      	b.n	8001b20 <get_xmodem+0x134>
					}
					else
					{
						transmit_notification(&timeout_note[0]);
 8001b12:	4859      	ldr	r0, [pc, #356]	; (8001c78 <get_xmodem+0x28c>)
 8001b14:	f7ff fd30 	bl	8001578 <transmit_notification>
						result = X_ERROR;
 8001b18:	23ff      	movs	r3, #255	; 0xff
 8001b1a:	617b      	str	r3, [r7, #20]
						return result;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	e09c      	b.n	8001c5a <get_xmodem+0x26e>
			while(UartReadyRx == false)
 8001b20:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <get_xmodem+0x27c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0e1      	beq.n	8001aec <get_xmodem+0x100>
					}
				}
			}

			result = checkstring();
 8001b28:	f7ff fe94 	bl	8001854 <checkstring>
 8001b2c:	6178      	str	r0, [r7, #20]
			if(result == X_OK)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <get_xmodem+0x14e>
			{
				header = aRxBuffer[0];
 8001b34:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <get_xmodem+0x278>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	74fb      	strb	r3, [r7, #19]
			else
			{

			}

			switch(header)
 8001b3a:	7cfb      	ldrb	r3, [r7, #19]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	2b17      	cmp	r3, #23
 8001b40:	f200 8085 	bhi.w	8001c4e <get_xmodem+0x262>
 8001b44:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <get_xmodem+0x160>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001bad 	.word	0x08001bad
 8001b50:	08001bb5 	.word	0x08001bb5
 8001b54:	08001c4f 	.word	0x08001c4f
 8001b58:	08001c21 	.word	0x08001c21
 8001b5c:	08001c4f 	.word	0x08001c4f
 8001b60:	08001c4f 	.word	0x08001c4f
 8001b64:	08001c4f 	.word	0x08001c4f
 8001b68:	08001c4f 	.word	0x08001c4f
 8001b6c:	08001c4f 	.word	0x08001c4f
 8001b70:	08001c4f 	.word	0x08001c4f
 8001b74:	08001c4f 	.word	0x08001c4f
 8001b78:	08001c4f 	.word	0x08001c4f
 8001b7c:	08001c4f 	.word	0x08001c4f
 8001b80:	08001c4f 	.word	0x08001c4f
 8001b84:	08001c4f 	.word	0x08001c4f
 8001b88:	08001c4f 	.word	0x08001c4f
 8001b8c:	08001c4f 	.word	0x08001c4f
 8001b90:	08001c4f 	.word	0x08001c4f
 8001b94:	08001c4f 	.word	0x08001c4f
 8001b98:	08001c4f 	.word	0x08001c4f
 8001b9c:	08001c4f 	.word	0x08001c4f
 8001ba0:	08001c4f 	.word	0x08001c4f
 8001ba4:	08001c4f 	.word	0x08001c4f
 8001ba8:	08001c51 	.word	0x08001c51
			{
					  /* 128 or 1024 bytes of data. */
					  /* we use only 1K package */
					  case X_SOH:
								  Transmit(X_NAK);
 8001bac:	2015      	movs	r0, #21
 8001bae:	f7ff fe95 	bl	80018dc <Transmit>

								  break;
 8001bb2:	e04d      	b.n	8001c50 <get_xmodem+0x264>
					  case X_STX:
								  // Manage data of rx.
								  flash_write(index);
 8001bb4:	68b8      	ldr	r0, [r7, #8]
 8001bb6:	f7ff f9bf 	bl	8000f38 <flash_write>
								  flash_read(FLASH_BACKUP_START_ADDR + index * WRITE_BLOCK,&compare_block[0],WRITE_BLOCK);
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001bc0:	3380      	adds	r3, #128	; 0x80
 8001bc2:	029b      	lsls	r3, r3, #10
 8001bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc8:	4928      	ldr	r1, [pc, #160]	; (8001c6c <get_xmodem+0x280>)
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f994 	bl	8000ef8 <flash_read>
								  // Calculate CS.
								  cs += checksum_adder();
 8001bd0:	f7ff fe9e 	bl	8001910 <checksum_adder>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	887b      	ldrh	r3, [r7, #2]
 8001bda:	4413      	add	r3, r2
 8001bdc:	807b      	strh	r3, [r7, #2]
								  index++;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3301      	adds	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
								  result = compare_array();
 8001be4:	f7ff feb8 	bl	8001958 <compare_array>
 8001be8:	6178      	str	r0, [r7, #20]
								  if(result != X_OK)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <get_xmodem+0x214>
								  {
									 trasmit_answer(&response_bad[0],index - 1);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	481f      	ldr	r0, [pc, #124]	; (8001c74 <get_xmodem+0x288>)
 8001bf8:	f7ff fcde 	bl	80015b8 <trasmit_answer>
									 return X_ERROR;
 8001bfc:	23ff      	movs	r3, #255	; 0xff
 8001bfe:	e02c      	b.n	8001c5a <get_xmodem+0x26e>
								  }
								  else
								  {
									  trasmit_answer(&response_ok[0],index - 1);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	4619      	mov	r1, r3
 8001c06:	481d      	ldr	r0, [pc, #116]	; (8001c7c <get_xmodem+0x290>)
 8001c08:	f7ff fcd6 	bl	80015b8 <trasmit_answer>
								  }

								  // Force new RX data.
								  aRxBuffer[0] = 0x11;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <get_xmodem+0x278>)
 8001c0e:	2211      	movs	r2, #17
 8001c10:	701a      	strb	r2, [r3, #0]
								  UartReadyRx = false;
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <get_xmodem+0x27c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
								  Transmit(X_ACK);
 8001c18:	2006      	movs	r0, #6
 8001c1a:	f7ff fe5f 	bl	80018dc <Transmit>
								  break;
 8001c1e:	e017      	b.n	8001c50 <get_xmodem+0x264>
					  case X_EOT:
								  Transmit(X_ACK);
 8001c20:	2006      	movs	r0, #6
 8001c22:	f7ff fe5b 	bl	80018dc <Transmit>
								  transmit_notification(&end_of_tx[0]);
 8001c26:	4817      	ldr	r0, [pc, #92]	; (8001c84 <get_xmodem+0x298>)
 8001c28:	f7ff fca6 	bl	8001578 <transmit_notification>

								  // Here update params of backup A5.
								  // Also update signature
								  // Size = WRITE_BLOCK * (index - 1).

								  _flash_file_param.f_size0  = WRITE_BLOCK * (index - 1);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	029b      	lsls	r3, r3, #10
 8001c32:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <get_xmodem+0x29c>)
 8001c34:	6213      	str	r3, [r2, #32]
								  _flash_file_param.f_blocks0  = index - 1;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <get_xmodem+0x29c>)
 8001c3c:	6253      	str	r3, [r2, #36]	; 0x24
								  _flash_file_param.f_crc0  = cs;
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <get_xmodem+0x29c>)
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	8513      	strh	r3, [r2, #40]	; 0x28
								  // index = number of 1024 bytes packets
								  // size of file =  index * 1024.
								  // Calculate CRC of file starting 0x08040000
								  // Add name of file
								  //trasmit_answer(&response_bad[0],index);
								  result = X_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
								  end_of_handshake = true;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
								  break;
 8001c4c:	e000      	b.n	8001c50 <get_xmodem+0x264>
					  case X_CAN:
				  	  	  	  	  break;
					  default:
	                    		  break;
 8001c4e:	bf00      	nop
		while(end_of_handshake == false)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f43f af47 	beq.w	8001ae6 <get_xmodem+0xfa>
			 }
        }
  return result;
 8001c58:	697b      	ldr	r3, [r7, #20]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200002ac 	.word	0x200002ac
 8001c68:	200002a9 	.word	0x200002a9
 8001c6c:	200006bc 	.word	0x200006bc
 8001c70:	08020000 	.word	0x08020000
 8001c74:	20000024 	.word	0x20000024
 8001c78:	200000f4 	.word	0x200000f4
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	000dbba0 	.word	0x000dbba0
 8001c84:	20000118 	.word	0x20000118
 8001c88:	20000acc 	.word	0x20000acc

08001c8c <xmodem_calc_crc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodem_calc_crc(uint8_t *data, uint16_t length)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	81fb      	strh	r3, [r7, #14]
    while (length)
 8001c9c:	e026      	b.n	8001cec <xmodem_calc_crc+0x60>
    {
        length--;
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cb4:	4053      	eors	r3, r2
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	737b      	strb	r3, [r7, #13]
 8001cbe:	e012      	b.n	8001ce6 <xmodem_calc_crc+0x5a>
        {
            if (crc & 0x8000u)
 8001cc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	da08      	bge.n	8001cda <xmodem_calc_crc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	81fb      	strh	r3, [r7, #14]
 8001cd8:	e002      	b.n	8001ce0 <xmodem_calc_crc+0x54>
            }
            else
            {
                crc = crc << 1u;
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8001ce0:	7b7b      	ldrb	r3, [r7, #13]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	737b      	strb	r3, [r7, #13]
 8001ce6:	7b7b      	ldrb	r3, [r7, #13]
 8001ce8:	2b07      	cmp	r3, #7
 8001cea:	d9e9      	bls.n	8001cc0 <xmodem_calc_crc+0x34>
    while (length)
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1d5      	bne.n	8001c9e <xmodem_calc_crc+0x12>
            }
        }
    }
    return crc;
 8001cf2:	89fb      	ldrh	r3, [r7, #14]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d06:	e003      	b.n	8001d10 <LoopCopyDataInit>

08001d08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d0e:	3104      	adds	r1, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d10:	480b      	ldr	r0, [pc, #44]	; (8001d40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d18:	d3f6      	bcc.n	8001d08 <CopyDataInit>
	ldr	r2, =_sbss
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d1c:	e002      	b.n	8001d24 <LoopFillZerobss>

08001d1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d20:	f842 3b04 	str.w	r3, [r2], #4

08001d24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <LoopForever+0x16>)
	cmp	r2, r3
 8001d26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d28:	d3f9      	bcc.n	8001d1e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d2a:	f7ff f8ad 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f006 ffdf 	bl	8008cf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d32:	f7fe fd99 	bl	8000868 <main>

08001d36 <LoopForever>:

LoopForever:
    b LoopForever
 8001d36:	e7fe      	b.n	8001d36 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d38:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8001d3c:	08008e70 	.word	0x08008e70
	ldr	r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d44:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8001d48:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8001d4c:	20000b7c 	.word	0x20000b7c

08001d50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC1_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_Init+0x4c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_Init+0x4c>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 f9b9 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d6a:	f002 f899 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_Init+0x50>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	490b      	ldr	r1, [pc, #44]	; (8001da8 <HAL_Init+0x54>)
 8001d7a:	5ccb      	ldrb	r3, [r1, r3]
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_Init+0x58>)
 8001d82:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d84:	200f      	movs	r0, #15
 8001d86:	f000 f813 	bl	8001db0 <HAL_InitTick>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e002      	b.n	8001d9a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d94:	f7fe feee 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40022000 	.word	0x40022000
 8001da4:	46020c00 	.word	0x46020c00
 8001da8:	08008d60 	.word	0x08008d60
 8001dac:	20000134 	.word	0x20000134

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_InitTick+0x60>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e021      	b.n	8001e08 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_InitTick+0x64>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_InitTick+0x60>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f9b1 	bl	8002142 <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f000 f97b 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <HAL_InitTick+0x68>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200001d8 	.word	0x200001d8
 8001e14:	20000134 	.word	0x20000134
 8001e18:	200001d4 	.word	0x200001d4

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_IncTick+0x20>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x24>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <HAL_IncTick+0x24>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200001d8 	.word	0x200001d8
 8001e40:	20000b78 	.word	0x20000b78

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000b78 	.word	0x20000b78

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff ffee 	bl	8001e44 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d005      	beq.n	8001e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_Delay+0x44>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e82:	bf00      	nop
 8001e84:	f7ff ffde 	bl	8001e44 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8f7      	bhi.n	8001e84 <HAL_Delay+0x28>
  {
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200001d8 	.word	0x200001d8

08001ea4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eb4:	4904      	ldr	r1, [pc, #16]	; (8001ec8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	46007400 	.word	0x46007400

08001ecc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 0202 	bic.w	r2, r3, #2
 8001edc:	4904      	ldr	r1, [pc, #16]	; (8001ef0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	46007400 	.word	0x46007400

08001ef4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f06:	f7ff ff9d 	bl	8001e44 <HAL_GetTick>
 8001f0a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001f0c:	e008      	b.n	8001f20 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001f0e:	f7ff ff99 	bl	8001e44 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b0a      	cmp	r3, #10
 8001f1a:	d901      	bls.n	8001f20 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e006      	b.n	8001f2e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	46007400 	.word	0x46007400

08001f3c <__NVIC_SetPriorityGrouping>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002100:	f7ff ff40 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	f7ff ff90 	bl	8002030 <NVIC_EncodePriority>
 8002110:	4602      	mov	r2, r0
 8002112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff5f 	bl	8001fdc <__NVIC_SetPriority>
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff33 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ffa4 	bl	8002098 <SysTick_Config>
 8002150:	4603      	mov	r3, r0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002162:	f7ff fe6f 	bl	8001e44 <HAL_GetTick>
 8002166:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06b      	b.n	800224a <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d008      	beq.n	8002190 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2220      	movs	r2, #32
 8002182:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e05c      	b.n	800224a <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0204 	orr.w	r2, r2, #4
 800219e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2205      	movs	r2, #5
 80021a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80021a8:	e020      	b.n	80021ec <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80021aa:	f7ff fe4b 	bl	8001e44 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d919      	bls.n	80021ec <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f043 0210 	orr.w	r2, r3, #16
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2203      	movs	r2, #3
 80021c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021dc:	2201      	movs	r2, #1
 80021de:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e02e      	b.n	800224a <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0d7      	beq.n	80021aa <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0202 	orr.w	r2, r2, #2
 8002208:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2204      	movs	r2, #4
 800220e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800221a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002234:	2201      	movs	r2, #1
 8002236:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2200      	movs	r2, #0
 800223e:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e019      	b.n	8002298 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d004      	beq.n	800227a <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e00e      	b.n	8002298 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2204      	movs	r2, #4
 800227e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t DataAddress)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <HAL_FLASH_Program+0x8c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_FLASH_Program+0x18>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e034      	b.n	8002326 <HAL_FLASH_Program+0x82>
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_FLASH_Program+0x8c>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_FLASH_Program+0x8c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80022c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022cc:	f000 f870 	bl	80023b0 <FLASH_WaitForLastOperation>
 80022d0:	4603      	mov	r3, r0
 80022d2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d121      	bne.n	800231e <HAL_FLASH_Program+0x7a>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 80022da:	4a15      	ldr	r2, [pc, #84]	; (8002330 <HAL_FLASH_Program+0x8c>)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_FLASH_Program+0x90>)
 80022e2:	613b      	str	r3, [r7, #16]

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d104      	bne.n	80022f8 <HAL_FLASH_Program+0x54>
    {
      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(Address, DataAddress);
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68b8      	ldr	r0, [r7, #8]
 80022f2:	f000 f8a3 	bl	800243c <FLASH_Program_QuadWord>
 80022f6:	e003      	b.n	8002300 <HAL_FLASH_Program+0x5c>
    }
    else
    {
      /* Program a burst of 8 quad-words at a specified address */
      FLASH_Program_Burst(Address, DataAddress);
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	68b8      	ldr	r0, [r7, #8]
 80022fc:	f000 f8da 	bl	80024b4 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002304:	f000 f854 	bl	80023b0 <FLASH_WaitForLastOperation>
 8002308:	4603      	mov	r3, r0
 800230a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG (and BWR Bit in Burst programming mode) */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK)));
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002316:	43db      	mvns	r3, r3
 8002318:	401a      	ands	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <HAL_FLASH_Program+0x8c>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002324:	7dfb      	ldrb	r3, [r7, #23]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200001dc 	.word	0x200001dc
 8002334:	40022028 	.word	0x40022028

08002338 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_FLASH_Unlock+0x38>)
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	2b00      	cmp	r3, #0
 8002348:	da0b      	bge.n	8002362 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_FLASH_Unlock+0x38>)
 800234c:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_FLASH_Unlock+0x3c>)
 800234e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <HAL_FLASH_Unlock+0x38>)
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <HAL_FLASH_Unlock+0x40>)
 8002354:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_FLASH_Unlock+0x38>)
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	2b00      	cmp	r3, #0
 800235c:	da01      	bge.n	8002362 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8002362:	79fb      	ldrb	r3, [r7, #7]
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	40022000 	.word	0x40022000
 8002374:	45670123 	.word	0x45670123
 8002378:	cdef89ab 	.word	0xcdef89ab

0800237c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_FLASH_Lock+0x30>)
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	4a08      	ldr	r2, [pc, #32]	; (80023ac <HAL_FLASH_Lock+0x30>)
 800238c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002390:	6293      	str	r3, [r2, #40]	; 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_FLASH_Lock+0x30>)
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	da01      	bge.n	800239e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800239e:	79fb      	ldrb	r3, [r7, #7]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40022000 	.word	0x40022000

080023b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY and WDW flags to be reset.
     Even if the FLASH operation fails, the BUSY & WDW flags will be reset, and an error flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 80023b8:	f7ff fd44 	bl	8001e44 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <FLASH_WaitForLastOperation+0x84>)
 80023c6:	613b      	str	r3, [r7, #16]

  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 80023c8:	e00b      	b.n	80023e2 <FLASH_WaitForLastOperation+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d007      	beq.n	80023e2 <FLASH_WaitForLastOperation+0x32>
    {
      if (HAL_GetTick() >= timeout)
 80023d2:	f7ff fd37 	bl	8001e44 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4293      	cmp	r3, r2
 80023dc:	d801      	bhi.n	80023e2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e023      	b.n	800242a <FLASH_WaitForLastOperation+0x7a>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ed      	bne.n	80023ca <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	f242 03fa 	movw	r3, #8442	; 0x20fa
 80023f6:	4013      	ands	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */

  if (error != 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8002400:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <FLASH_WaitForLastOperation+0x88>)
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <FLASH_WaitForLastOperation+0x88>)
 800240a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e009      	b.n	800242a <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40022020 	.word	0x40022020
 8002438:	200001dc 	.word	0x200001dc

0800243c <FLASH_Program_QuadWord>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t Address, uint32_t DataAddress)
{
 800243c:	b480      	push	{r7}
 800243e:	b08b      	sub	sp, #44	; 0x2c
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8002446:	2304      	movs	r3, #4
 8002448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <FLASH_Program_QuadWord+0x74>)
 8002456:	61bb      	str	r3, [r7, #24]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_NSCR_PG);
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002464:	f3ef 8310 	mrs	r3, PRIMASK
 8002468:	613b      	str	r3, [r7, #16]
  return(result);
 800246a:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800246c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800246e:	b672      	cpsid	i
}
 8002470:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	3304      	adds	r3, #4
 800247e:	623b      	str	r3, [r7, #32]
    src_addr++;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	3304      	adds	r3, #4
 8002484:	61fb      	str	r3, [r7, #28]
    index--;
 8002486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800248a:	3b01      	subs	r3, #1
 800248c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8002490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ec      	bne.n	8002472 <FLASH_Program_QuadWord+0x36>
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f383 8810 	msr	PRIMASK, r3
}
 80024a2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80024a4:	bf00      	nop
 80024a6:	372c      	adds	r7, #44	; 0x2c
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40022028 	.word	0x40022028

080024b4 <FLASH_Program_Burst>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b08b      	sub	sp, #44	; 0x2c
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint8_t burst_index = FLASH_NB_WORDS_IN_BURST;
 80024be:	2320      	movs	r3, #32
 80024c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <FLASH_Program_Burst+0x78>)
 80024ce:	61bb      	str	r3, [r7, #24]

  /* Set PG and BWR bits */
  SET_BIT((*reg_cr), (FLASH_NSCR_PG | FLASH_NSCR_BWR));
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e0:	f3ef 8310 	mrs	r3, PRIMASK
 80024e4:	613b      	str	r3, [r7, #16]
  return(result);
 80024e6:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80024e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80024ea:	b672      	cpsid	i
}
 80024ec:	bf00      	nop
  __disable_irq();

  /* Program the burst */
  do
  {
    *dest_addr = *src_addr;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	3304      	adds	r3, #4
 80024fa:	623b      	str	r3, [r7, #32]
    src_addr++;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	3304      	adds	r3, #4
 8002500:	61fb      	str	r3, [r7, #28]
    burst_index--;
 8002502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002506:	3b01      	subs	r3, #1
 8002508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (burst_index != 0U);
 800250c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ec      	bne.n	80024ee <FLASH_Program_Burst+0x3a>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f383 8810 	msr	PRIMASK, r3
}
 800251e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002520:	bf00      	nop
 8002522:	372c      	adds	r7, #44	; 0x2c
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40022028 	.word	0x40022028

08002530 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800253a:	4b33      	ldr	r3, [pc, #204]	; (8002608 <HAL_FLASHEx_Erase+0xd8>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_FLASHEx_Erase+0x16>
 8002542:	2302      	movs	r3, #2
 8002544:	e05c      	b.n	8002600 <HAL_FLASHEx_Erase+0xd0>
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_FLASHEx_Erase+0xd8>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800254c:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <HAL_FLASHEx_Erase+0xd8>)
 800254e:	2200      	movs	r2, #0
 8002550:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002556:	f7ff ff2b 	bl	80023b0 <FLASH_WaitForLastOperation>
 800255a:	4603      	mov	r3, r0
 800255c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d149      	bne.n	80025f8 <HAL_FLASHEx_Erase+0xc8>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a27      	ldr	r2, [pc, #156]	; (8002608 <HAL_FLASHEx_Erase+0xd8>)
 800256a:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH->NSCR);
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_FLASHEx_Erase+0xdc>)
 800256e:	60fb      	str	r3, [r7, #12]

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002578:	f248 0204 	movw	r2, #32772	; 0x8004
 800257c:	4293      	cmp	r3, r2
 800257e:	d10b      	bne.n	8002598 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f843 	bl	8002610 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800258a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800258e:	f7ff ff0f 	bl	80023b0 <FLASH_WaitForLastOperation>
 8002592:	4603      	mov	r3, r0
 8002594:	75fb      	strb	r3, [r7, #23]
 8002596:	e025      	b.n	80025e4 <HAL_FLASHEx_Erase+0xb4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	f04f 32ff 	mov.w	r2, #4294967295
 800259e:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	e015      	b.n	80025d4 <HAL_FLASHEx_Erase+0xa4>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4619      	mov	r1, r3
 80025ae:	6938      	ldr	r0, [r7, #16]
 80025b0:	f000 f854 	bl	800265c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025b8:	f7ff fefa 	bl	80023b0 <FLASH_WaitForLastOperation>
 80025bc:	4603      	mov	r3, r0
 80025be:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_FLASHEx_Erase+0x9e>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	601a      	str	r2, [r3, #0]
          break;
 80025cc:	e00a      	b.n	80025e4 <HAL_FLASHEx_Erase+0xb4>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	3301      	adds	r3, #1
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3e1      	bcc.n	80025a8 <HAL_FLASHEx_Erase+0x78>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025f0:	43db      	mvns	r3, r3
 80025f2:	401a      	ands	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_FLASHEx_Erase+0xd8>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]

  return status;
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200001dc 	.word	0x200001dc
 800260c:	40022028 	.word	0x40022028

08002610 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <FLASH_MassErase+0x48>)
 800261a:	60fb      	str	r3, [r7, #12]

  /* Set the Mass Erase Bit for the bank 1 and proceed to erase */
  if ((Banks & FLASH_BANK_1) != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <FLASH_MassErase+0x26>
  {
    SET_BIT((*reg_cr), FLASH_NSCR_MER1 | FLASH_NSCR_STRT);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	f043 0304 	orr.w	r3, r3, #4
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	6013      	str	r3, [r2, #0]
  }

  /* Set the Mass Erase Bit for the bank 2 and proceed to erase */
  if ((Banks & FLASH_BANK_2) != 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <FLASH_MassErase+0x3c>
  {
    SET_BIT((*reg_cr), FLASH_NSCR_MER2 | FLASH_NSCR_STRT);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f443 32c0 	orr.w	r2, r3, #98304	; 0x18000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	601a      	str	r2, [r3, #0]
  }
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40022028 	.word	0x40022028

0800265c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <FLASH_PageErase+0x5c>)
 8002668:	60fb      	str	r3, [r7, #12]

  if ((Banks & FLASH_BANK_1) != 0U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <FLASH_PageErase+0x26>
  {
    CLEAR_BIT((*reg_cr), FLASH_NSCR_BKER);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e005      	b.n	800268e <FLASH_PageErase+0x32>
  }
  else
  {
    SET_BIT((*reg_cr), FLASH_NSCR_BKER);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg_cr), (FLASH_NSCR_PNB | FLASH_NSCR_PER | FLASH_NSCR_STRT), \
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f423 3381 	bic.w	r3, r3, #66048	; 0x10200
 8002696:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	00d2      	lsls	r2, r2, #3
 800269e:	4313      	orrs	r3, r2
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	6013      	str	r3, [r2, #0]
             ((Page << FLASH_NSCR_PNB_Pos) | FLASH_NSCR_PER | FLASH_NSCR_STRT));
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40022028 	.word	0x40022028

080026bc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80026ce:	e1ba      	b.n	8002a46 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 81aa 	beq.w	8002a40 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a55      	ldr	r2, [pc, #340]	; (8002844 <HAL_GPIO_Init+0x188>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d15d      	bne.n	80027b0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80026fa:	2201      	movs	r2, #1
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	4013      	ands	r3, r2
 8002708:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0201 	and.w	r2, r3, #1
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	4313      	orrs	r3, r2
 800271c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002724:	4a48      	ldr	r2, [pc, #288]	; (8002848 <HAL_GPIO_Init+0x18c>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800272c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800272e:	4a46      	ldr	r2, [pc, #280]	; (8002848 <HAL_GPIO_Init+0x18c>)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	08da      	lsrs	r2, r3, #3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	3208      	adds	r2, #8
 8002742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002746:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	220f      	movs	r2, #15
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	4013      	ands	r3, r2
 800275c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220b      	movs	r2, #11
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	4313      	orrs	r3, r2
 8002770:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	08da      	lsrs	r2, r3, #3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	3208      	adds	r2, #8
 800277a:	69f9      	ldr	r1, [r7, #28]
 800277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	4013      	ands	r3, r2
 8002796:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2202      	movs	r2, #2
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e067      	b.n	8002880 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x104>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b12      	cmp	r3, #18
 80027be:	d145      	bne.n	800284c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	08da      	lsrs	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3208      	adds	r2, #8
 80027c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	220f      	movs	r2, #15
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f003 020f 	and.w	r2, r3, #15
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	69f9      	ldr	r1, [r7, #28]
 8002808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	4013      	ands	r3, r2
 8002822:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	4313      	orrs	r3, r2
 8002838:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e01e      	b.n	8002880 <HAL_GPIO_Init+0x1c4>
 8002842:	bf00      	nop
 8002844:	46020000 	.word	0x46020000
 8002848:	08008db8 	.word	0x08008db8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	4013      	ands	r3, r2
 8002862:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0203 	and.w	r2, r3, #3
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	4313      	orrs	r3, r2
 8002878:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d00b      	beq.n	80028a0 <HAL_GPIO_Init+0x1e4>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d007      	beq.n	80028a0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002894:	2b11      	cmp	r3, #17
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b12      	cmp	r3, #18
 800289e:	d130      	bne.n	8002902 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2203      	movs	r2, #3
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80028d6:	2201      	movs	r2, #1
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 0201 	and.w	r2, r3, #1
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d017      	beq.n	800293a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	2203      	movs	r2, #3
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	4013      	ands	r3, r2
 8002920:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	4313      	orrs	r3, r2
 8002932:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d07c      	beq.n	8002a40 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002946:	4a47      	ldr	r2, [pc, #284]	; (8002a64 <HAL_GPIO_Init+0x3a8>)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3318      	adds	r3, #24
 800294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002952:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	220f      	movs	r2, #15
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	4013      	ands	r3, r2
 8002968:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	0a9a      	lsrs	r2, r3, #10
 800296e:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <HAL_GPIO_Init+0x3ac>)
 8002970:	4013      	ands	r3, r2
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	f002 0203 	and.w	r2, r2, #3
 8002978:	00d2      	lsls	r2, r2, #3
 800297a:	4093      	lsls	r3, r2
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	4313      	orrs	r3, r2
 8002980:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002982:	4938      	ldr	r1, [pc, #224]	; (8002a64 <HAL_GPIO_Init+0x3a8>)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	3318      	adds	r3, #24
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002990:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_GPIO_Init+0x3a8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	43db      	mvns	r3, r3
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	4013      	ands	r3, r2
 800299e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80029b4:	4a2b      	ldr	r2, [pc, #172]	; (8002a64 <HAL_GPIO_Init+0x3a8>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_GPIO_Init+0x3a8>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80029de:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <HAL_GPIO_Init+0x3a8>)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80029e4:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <HAL_GPIO_Init+0x3a8>)
 80029e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002a0a:	4a16      	ldr	r2, [pc, #88]	; (8002a64 <HAL_GPIO_Init+0x3a8>)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_GPIO_Init+0x3a8>)
 8002a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a18:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002a38:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_GPIO_Init+0x3a8>)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3301      	adds	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f47f ae3d 	bne.w	80026d0 <HAL_GPIO_Init+0x14>
  }
}
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
 8002a5a:	3724      	adds	r7, #36	; 0x24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	46022000 	.word	0x46022000
 8002a68:	002f7f7f 	.word	0x002f7f7f

08002a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a7c:	787b      	ldrb	r3, [r7, #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002a88:	e002      	b.n	8002a90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
 8002ab8:	e007      	b.n	8002aca <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 0204 	bic.w	r2, r3, #4
 8002ac2:	4905      	ldr	r1, [pc, #20]	; (8002ad8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40030400 	.word	0x40030400

08002adc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_ICACHE_Enable+0x1c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_ICACHE_Enable+0x1c>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40030400 	.word	0x40030400

08002afc <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_ICACHE_Disable+0x5c>)
 8002b08:	2202      	movs	r2, #2
 8002b0a:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_ICACHE_Disable+0x5c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_ICACHE_Disable+0x5c>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b18:	f7ff f994 	bl	8001e44 <HAL_GetTick>
 8002b1c:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002b1e:	e00f      	b.n	8002b40 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8002b20:	f7ff f990 	bl	8001e44 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d908      	bls.n	8002b40 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_ICACHE_Disable+0x5c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	71fb      	strb	r3, [r7, #7]
        break;
 8002b3e:	e005      	b.n	8002b4c <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_ICACHE_Disable+0x5c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e9      	bne.n	8002b20 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40030400 	.word	0x40030400

08002b5c <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	46020800 	.word	0x46020800

08002b7c <HAL_PWR_DisableBkUpAccess>:
  *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
  *         and backup SRAM).
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	46020800 	.word	0x46020800

08002b9c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d101      	bne.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e057      	b.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d90a      	bls.n	8002bd8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002bc2:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	4a2a      	ldr	r2, [pc, #168]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd4:	60d3      	str	r3, [r2, #12]
 8002bd6:	e007      	b.n	8002be8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002bd8:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002be0:	4925      	ldr	r1, [pc, #148]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002be8:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	099b      	lsrs	r3, r3, #6
 8002bf4:	2232      	movs	r2, #50	; 0x32
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	3301      	adds	r3, #1
 8002c04:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002c06:	e002      	b.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d102      	bne.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0x84>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f3      	bne.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01b      	beq.n	8002c5e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	2232      	movs	r2, #50	; 0x32
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	099b      	lsrs	r3, r3, #6
 8002c40:	3301      	adds	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002c44:	e002      	b.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f3      	bne.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e000      	b.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	46020800 	.word	0x46020800
 8002c7c:	20000134 	.word	0x20000134
 8002c80:	10624dd3 	.word	0x10624dd3

08002c84 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	46020800 	.word	0x46020800

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f000 bec3 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cba:	4b9c      	ldr	r3, [pc, #624]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc4:	4b99      	ldr	r3, [pc, #612]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8172 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x52>
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	f040 80e4 	bne.w	8002eb2 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f040 80e0 	bne.w	8002eb2 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf2:	4b8e      	ldr	r3, [pc, #568]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <HAL_RCC_OscConfig+0x6c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f000 be9a 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d10:	4b86      	ldr	r3, [pc, #536]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d004      	beq.n	8002d26 <HAL_RCC_OscConfig+0x86>
 8002d1c:	4b83      	ldr	r3, [pc, #524]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d24:	e005      	b.n	8002d32 <HAL_RCC_OscConfig+0x92>
 8002d26:	4b81      	ldr	r3, [pc, #516]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d255      	bcs.n	8002de2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 fa0b 	bl	800415c <RCC_SetFlashLatencyFromMSIRange>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f000 be77 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002d52:	4b76      	ldr	r3, [pc, #472]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	4a75      	ldr	r2, [pc, #468]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002d58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d5c:	6093      	str	r3, [r2, #8]
 8002d5e:	4b73      	ldr	r3, [pc, #460]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	4970      	ldr	r1, [pc, #448]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002d78:	d309      	bcc.n	8002d8e <HAL_RCC_OscConfig+0xee>
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f023 021f 	bic.w	r2, r3, #31
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4969      	ldr	r1, [pc, #420]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60cb      	str	r3, [r1, #12]
 8002d8c:	e07e      	b.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da0a      	bge.n	8002dac <HAL_RCC_OscConfig+0x10c>
 8002d96:	4b65      	ldr	r3, [pc, #404]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	015b      	lsls	r3, r3, #5
 8002da4:	4961      	ldr	r1, [pc, #388]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60cb      	str	r3, [r1, #12]
 8002daa:	e06f      	b.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db4:	d30a      	bcc.n	8002dcc <HAL_RCC_OscConfig+0x12c>
 8002db6:	4b5d      	ldr	r3, [pc, #372]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	029b      	lsls	r3, r3, #10
 8002dc4:	4959      	ldr	r1, [pc, #356]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60cb      	str	r3, [r1, #12]
 8002dca:	e05f      	b.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
 8002dcc:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	03db      	lsls	r3, r3, #15
 8002dda:	4954      	ldr	r1, [pc, #336]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60cb      	str	r3, [r1, #12]
 8002de0:	e054      	b.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002de2:	4b52      	ldr	r3, [pc, #328]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002de8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dec:	6093      	str	r3, [r2, #8]
 8002dee:	4b4f      	ldr	r3, [pc, #316]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	494c      	ldr	r1, [pc, #304]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002e08:	d309      	bcc.n	8002e1e <HAL_RCC_OscConfig+0x17e>
 8002e0a:	4b48      	ldr	r3, [pc, #288]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f023 021f 	bic.w	r2, r3, #31
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4945      	ldr	r1, [pc, #276]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60cb      	str	r3, [r1, #12]
 8002e1c:	e028      	b.n	8002e70 <HAL_RCC_OscConfig+0x1d0>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	da0a      	bge.n	8002e3c <HAL_RCC_OscConfig+0x19c>
 8002e26:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	015b      	lsls	r3, r3, #5
 8002e34:	493d      	ldr	r1, [pc, #244]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60cb      	str	r3, [r1, #12]
 8002e3a:	e019      	b.n	8002e70 <HAL_RCC_OscConfig+0x1d0>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e44:	d30a      	bcc.n	8002e5c <HAL_RCC_OscConfig+0x1bc>
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	029b      	lsls	r3, r3, #10
 8002e54:	4935      	ldr	r1, [pc, #212]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60cb      	str	r3, [r1, #12]
 8002e5a:	e009      	b.n	8002e70 <HAL_RCC_OscConfig+0x1d0>
 8002e5c:	4b33      	ldr	r3, [pc, #204]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	03db      	lsls	r3, r3, #15
 8002e6a:	4930      	ldr	r1, [pc, #192]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 f96e 	bl	800415c <RCC_SetFlashLatencyFromMSIRange>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f000 bdda 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002e8c:	f001 f910 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <HAL_RCC_OscConfig+0x290>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe ff8b 	bl	8001db0 <HAL_InitTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 808a 	beq.w	8002fbe <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8002eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eae:	f000 bdc7 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d066      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ec6:	f7fe ffbd 	bl	8001e44 <HAL_GetTick>
 8002eca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002ecc:	e009      	b.n	8002ee2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ece:	f7fe ffb9 	bl	8001e44 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d902      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	f000 bdaf 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0ef      	beq.n	8002ece <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002eee:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002ef4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ef8:	6093      	str	r3, [r2, #8]
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	4909      	ldr	r1, [pc, #36]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002f14:	d30e      	bcc.n	8002f34 <HAL_RCC_OscConfig+0x294>
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f023 021f 	bic.w	r2, r3, #31
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4902      	ldr	r1, [pc, #8]	; (8002f2c <HAL_RCC_OscConfig+0x28c>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60cb      	str	r3, [r1, #12]
 8002f28:	e04a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x320>
 8002f2a:	bf00      	nop
 8002f2c:	46020c00 	.word	0x46020c00
 8002f30:	200001d4 	.word	0x200001d4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da0a      	bge.n	8002f52 <HAL_RCC_OscConfig+0x2b2>
 8002f3c:	4b9b      	ldr	r3, [pc, #620]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	015b      	lsls	r3, r3, #5
 8002f4a:	4998      	ldr	r1, [pc, #608]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60cb      	str	r3, [r1, #12]
 8002f50:	e036      	b.n	8002fc0 <HAL_RCC_OscConfig+0x320>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d30a      	bcc.n	8002f72 <HAL_RCC_OscConfig+0x2d2>
 8002f5c:	4b93      	ldr	r3, [pc, #588]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	029b      	lsls	r3, r3, #10
 8002f6a:	4990      	ldr	r1, [pc, #576]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
 8002f70:	e026      	b.n	8002fc0 <HAL_RCC_OscConfig+0x320>
 8002f72:	4b8e      	ldr	r3, [pc, #568]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	03db      	lsls	r3, r3, #15
 8002f80:	498a      	ldr	r1, [pc, #552]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60cb      	str	r3, [r1, #12]
 8002f86:	e01b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002f88:	4b88      	ldr	r3, [pc, #544]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a87      	ldr	r2, [pc, #540]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f94:	f7fe ff56 	bl	8001e44 <HAL_GetTick>
 8002f98:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f9c:	f7fe ff52 	bl	8001e44 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d902      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	f000 bd48 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002fb0:	4b7e      	ldr	r3, [pc, #504]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ef      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2fc>
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8094 	beq.w	80030f6 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x340>
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d110      	bne.n	8002ffc <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe0:	4b72      	ldr	r3, [pc, #456]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8083 	beq.w	80030f4 <HAL_RCC_OscConfig+0x454>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d17e      	bne.n	80030f4 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f000 bd22 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d106      	bne.n	8003014 <HAL_RCC_OscConfig+0x374>
 8003006:	4b69      	ldr	r3, [pc, #420]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a68      	ldr	r2, [pc, #416]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e041      	b.n	8003098 <HAL_RCC_OscConfig+0x3f8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800301c:	d112      	bne.n	8003044 <HAL_RCC_OscConfig+0x3a4>
 800301e:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a62      	ldr	r2, [pc, #392]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b60      	ldr	r3, [pc, #384]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5f      	ldr	r2, [pc, #380]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003030:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b5d      	ldr	r3, [pc, #372]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a5c      	ldr	r2, [pc, #368]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e029      	b.n	8003098 <HAL_RCC_OscConfig+0x3f8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800304c:	d112      	bne.n	8003074 <HAL_RCC_OscConfig+0x3d4>
 800304e:	4b57      	ldr	r3, [pc, #348]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a56      	ldr	r2, [pc, #344]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b54      	ldr	r3, [pc, #336]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a53      	ldr	r2, [pc, #332]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003060:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b51      	ldr	r3, [pc, #324]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e011      	b.n	8003098 <HAL_RCC_OscConfig+0x3f8>
 8003074:	4b4d      	ldr	r3, [pc, #308]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a4c      	ldr	r2, [pc, #304]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a49      	ldr	r2, [pc, #292]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b47      	ldr	r3, [pc, #284]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a46      	ldr	r2, [pc, #280]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003092:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d014      	beq.n	80030ca <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 80030a0:	f7fe fed0 	bl	8001e44 <HAL_GetTick>
 80030a4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a6:	e009      	b.n	80030bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fe fecc 	bl	8001e44 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d902      	bls.n	80030bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	f000 bcc2 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030bc:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <HAL_RCC_OscConfig+0x408>
 80030c8:	e015      	b.n	80030f6 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80030ca:	f7fe febb 	bl	8001e44 <HAL_GetTick>
 80030ce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d0:	e009      	b.n	80030e6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d2:	f7fe feb7 	bl	8001e44 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b64      	cmp	r3, #100	; 0x64
 80030de:	d902      	bls.n	80030e6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	f000 bcad 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e6:	4b31      	ldr	r3, [pc, #196]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ef      	bne.n	80030d2 <HAL_RCC_OscConfig+0x432>
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d066      	beq.n	80031d0 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	2b04      	cmp	r3, #4
 8003106:	d005      	beq.n	8003114 <HAL_RCC_OscConfig+0x474>
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d11a      	bne.n	8003144 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	2b02      	cmp	r3, #2
 8003112:	d117      	bne.n	8003144 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003114:	4b25      	ldr	r3, [pc, #148]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d006      	beq.n	800312e <HAL_RCC_OscConfig+0x48e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	f000 bc89 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	041b      	lsls	r3, r3, #16
 800313c:	491b      	ldr	r1, [pc, #108]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 800313e:	4313      	orrs	r3, r2
 8003140:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003142:	e045      	b.n	80031d0 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d024      	beq.n	8003196 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800314c:	4b17      	ldr	r3, [pc, #92]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003156:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003158:	f7fe fe74 	bl	8001e44 <HAL_GetTick>
 800315c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800315e:	e009      	b.n	8003174 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003160:	f7fe fe70 	bl	8001e44 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d902      	bls.n	8003174 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	f000 bc66 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ef      	beq.n	8003160 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	4907      	ldr	r1, [pc, #28]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003190:	4313      	orrs	r3, r2
 8003192:	610b      	str	r3, [r1, #16]
 8003194:	e01c      	b.n	80031d0 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a04      	ldr	r2, [pc, #16]	; (80031ac <HAL_RCC_OscConfig+0x50c>)
 800319c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80031a2:	f7fe fe4f 	bl	8001e44 <HAL_GetTick>
 80031a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a8:	e00c      	b.n	80031c4 <HAL_RCC_OscConfig+0x524>
 80031aa:	bf00      	nop
 80031ac:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fe fe48 	bl	8001e44 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d902      	bls.n	80031c4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	f000 bc3e 	b.w	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031c4:	4baf      	ldr	r3, [pc, #700]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ef      	bne.n	80031b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80c7 	beq.w	800336c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e4:	4ba7      	ldr	r3, [pc, #668]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 80031e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d111      	bne.n	8003216 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	4ba4      	ldr	r3, [pc, #656]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 80031f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f8:	4aa2      	ldr	r2, [pc, #648]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003202:	4ba0      	ldr	r3, [pc, #640]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003210:	2301      	movs	r3, #1
 8003212:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003216:	4b9c      	ldr	r3, [pc, #624]	; (8003488 <HAL_RCC_OscConfig+0x7e8>)
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d118      	bne.n	8003254 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003222:	4b99      	ldr	r3, [pc, #612]	; (8003488 <HAL_RCC_OscConfig+0x7e8>)
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	4a98      	ldr	r2, [pc, #608]	; (8003488 <HAL_RCC_OscConfig+0x7e8>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322e:	f7fe fe09 	bl	8001e44 <HAL_GetTick>
 8003232:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003236:	f7fe fe05 	bl	8001e44 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e3fb      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003248:	4b8f      	ldr	r3, [pc, #572]	; (8003488 <HAL_RCC_OscConfig+0x7e8>)
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d05f      	beq.n	800331c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800325c:	4b89      	ldr	r3, [pc, #548]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 800325e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003262:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699a      	ldr	r2, [r3, #24]
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	429a      	cmp	r2, r3
 8003270:	d037      	beq.n	80032e2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d006      	beq.n	800328a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e3da      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8003294:	4b7b      	ldr	r3, [pc, #492]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800329a:	4a7a      	ldr	r2, [pc, #488]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 800329c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80032a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80032a4:	f7fe fdce 	bl	8001e44 <HAL_GetTick>
 80032a8:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ac:	f7fe fdca 	bl	8001e44 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e3c0      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80032be:	4b71      	ldr	r3, [pc, #452]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 80032c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ef      	bne.n	80032ac <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80032cc:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 80032ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	496a      	ldr	r1, [pc, #424]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80032e2:	4b68      	ldr	r3, [pc, #416]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 80032e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032e8:	4a66      	ldr	r2, [pc, #408]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 80032ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80032f2:	f7fe fda7 	bl	8001e44 <HAL_GetTick>
 80032f6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fa:	f7fe fda3 	bl	8001e44 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e399      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800330c:	4b5d      	ldr	r3, [pc, #372]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 800330e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003312:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0ef      	beq.n	80032fa <HAL_RCC_OscConfig+0x65a>
 800331a:	e01b      	b.n	8003354 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800331c:	4b59      	ldr	r3, [pc, #356]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 800331e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003322:	4a58      	ldr	r2, [pc, #352]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003324:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003328:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800332c:	f7fe fd8a 	bl	8001e44 <HAL_GetTick>
 8003330:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7fe fd86 	bl	8001e44 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e37c      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003346:	4b4f      	ldr	r3, [pc, #316]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800334c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1ef      	bne.n	8003334 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003354:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b49      	ldr	r3, [pc, #292]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003362:	4a48      	ldr	r2, [pc, #288]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8112 	beq.w	800359e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003380:	4b40      	ldr	r3, [pc, #256]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d111      	bne.n	80033b2 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	4b3d      	ldr	r3, [pc, #244]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003394:	4a3b      	ldr	r2, [pc, #236]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800339e:	4b39      	ldr	r3, [pc, #228]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 80033a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80033b2:	4b35      	ldr	r3, [pc, #212]	; (8003488 <HAL_RCC_OscConfig+0x7e8>)
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d118      	bne.n	80033f0 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80033be:	4b32      	ldr	r3, [pc, #200]	; (8003488 <HAL_RCC_OscConfig+0x7e8>)
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	4a31      	ldr	r2, [pc, #196]	; (8003488 <HAL_RCC_OscConfig+0x7e8>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ca:	f7fe fd3b 	bl	8001e44 <HAL_GetTick>
 80033ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d2:	f7fe fd37 	bl	8001e44 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e32d      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80033e4:	4b28      	ldr	r3, [pc, #160]	; (8003488 <HAL_RCC_OscConfig+0x7e8>)
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01f      	beq.n	800343c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 800340a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800340e:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003410:	f043 0304 	orr.w	r3, r3, #4
 8003414:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003418:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 800341a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800341e:	4a19      	ldr	r2, [pc, #100]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003428:	e018      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 800342c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003430:	4a14      	ldr	r2, [pc, #80]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800343a:	e00f      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 800343e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003442:	4a10      	ldr	r2, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800344c:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 800344e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003452:	4a0c      	ldr	r2, [pc, #48]	; (8003484 <HAL_RCC_OscConfig+0x7e4>)
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d058      	beq.n	8003516 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8003464:	f7fe fcee 	bl	8001e44 <HAL_GetTick>
 8003468:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346a:	e00f      	b.n	800348c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fe fcea 	bl	8001e44 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d906      	bls.n	800348c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e2de      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
 8003482:	bf00      	nop
 8003484:	46020c00 	.word	0x46020c00
 8003488:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348c:	4b9c      	ldr	r3, [pc, #624]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 800348e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0e8      	beq.n	800346c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01b      	beq.n	80034de <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034a6:	4b96      	ldr	r3, [pc, #600]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80034a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034ac:	4a94      	ldr	r2, [pc, #592]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80034ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fe fcc4 	bl	8001e44 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e2b8      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034ce:	4b8c      	ldr	r3, [pc, #560]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80034d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ed      	beq.n	80034b8 <HAL_RCC_OscConfig+0x818>
 80034dc:	e053      	b.n	8003586 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034de:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80034e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034e4:	4a86      	ldr	r2, [pc, #536]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80034e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fe fca8 	bl	8001e44 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e29c      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003506:	4b7e      	ldr	r3, [pc, #504]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800350c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ed      	bne.n	80034f0 <HAL_RCC_OscConfig+0x850>
 8003514:	e037      	b.n	8003586 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003516:	f7fe fc95 	bl	8001e44 <HAL_GetTick>
 800351a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800351c:	e00a      	b.n	8003534 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fe fc91 	bl	8001e44 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	; 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e285      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003534:	4b72      	ldr	r3, [pc, #456]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ed      	bne.n	800351e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003542:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01a      	beq.n	8003586 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003550:	4b6b      	ldr	r3, [pc, #428]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003556:	4a6a      	ldr	r2, [pc, #424]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fe fc6f 	bl	8001e44 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e263      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003578:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 800357a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800357e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ed      	bne.n	8003562 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003586:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800358a:	2b01      	cmp	r3, #1
 800358c:	d107      	bne.n	800359e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358e:	4b5c      	ldr	r3, [pc, #368]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003594:	4a5a      	ldr	r2, [pc, #360]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003596:	f023 0304 	bic.w	r3, r3, #4
 800359a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d036      	beq.n	8003618 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d019      	beq.n	80035e6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80035b2:	4b53      	ldr	r3, [pc, #332]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a52      	ldr	r2, [pc, #328]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80035b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035bc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80035be:	f7fe fc41 	bl	8001e44 <HAL_GetTick>
 80035c2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035c6:	f7fe fc3d 	bl	8001e44 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e233      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80035d8:	4b49      	ldr	r3, [pc, #292]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x926>
 80035e4:	e018      	b.n	8003618 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80035e6:	4b46      	ldr	r3, [pc, #280]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a45      	ldr	r2, [pc, #276]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80035ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035f0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80035f2:	f7fe fc27 	bl	8001e44 <HAL_GetTick>
 80035f6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035fa:	f7fe fc23 	bl	8001e44 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e219      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800360c:	4b3c      	ldr	r3, [pc, #240]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f0      	bne.n	80035fa <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d036      	beq.n	8003692 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	2b00      	cmp	r3, #0
 800362a:	d019      	beq.n	8003660 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800362c:	4b34      	ldr	r3, [pc, #208]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a33      	ldr	r2, [pc, #204]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003636:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003638:	f7fe fc04 	bl	8001e44 <HAL_GetTick>
 800363c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003640:	f7fe fc00 	bl	8001e44 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1f6      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003652:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x9a0>
 800365e:	e018      	b.n	8003692 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800366a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800366c:	f7fe fbea 	bl	8001e44 <HAL_GetTick>
 8003670:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003674:	f7fe fbe6 	bl	8001e44 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1dc      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d07f      	beq.n	800379e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d062      	beq.n	800376c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4a15      	ldr	r2, [pc, #84]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80036ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036b0:	6093      	str	r3, [r2, #8]
 80036b2:	4b13      	ldr	r3, [pc, #76]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	4910      	ldr	r1, [pc, #64]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80036cc:	d309      	bcc.n	80036e2 <HAL_RCC_OscConfig+0xa42>
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f023 021f 	bic.w	r2, r3, #31
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	4909      	ldr	r1, [pc, #36]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	60cb      	str	r3, [r1, #12]
 80036e0:	e02a      	b.n	8003738 <HAL_RCC_OscConfig+0xa98>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da0c      	bge.n	8003704 <HAL_RCC_OscConfig+0xa64>
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	015b      	lsls	r3, r3, #5
 80036f8:	4901      	ldr	r1, [pc, #4]	; (8003700 <HAL_RCC_OscConfig+0xa60>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60cb      	str	r3, [r1, #12]
 80036fe:	e01b      	b.n	8003738 <HAL_RCC_OscConfig+0xa98>
 8003700:	46020c00 	.word	0x46020c00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370c:	d30a      	bcc.n	8003724 <HAL_RCC_OscConfig+0xa84>
 800370e:	4ba5      	ldr	r3, [pc, #660]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	029b      	lsls	r3, r3, #10
 800371c:	49a1      	ldr	r1, [pc, #644]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 800371e:	4313      	orrs	r3, r2
 8003720:	60cb      	str	r3, [r1, #12]
 8003722:	e009      	b.n	8003738 <HAL_RCC_OscConfig+0xa98>
 8003724:	4b9f      	ldr	r3, [pc, #636]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	03db      	lsls	r3, r3, #15
 8003732:	499c      	ldr	r1, [pc, #624]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003734:	4313      	orrs	r3, r2
 8003736:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003738:	4b9a      	ldr	r3, [pc, #616]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a99      	ldr	r2, [pc, #612]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 800373e:	f043 0310 	orr.w	r3, r3, #16
 8003742:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003744:	f7fe fb7e 	bl	8001e44 <HAL_GetTick>
 8003748:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800374c:	f7fe fb7a 	bl	8001e44 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e170      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800375e:	4b91      	ldr	r3, [pc, #580]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0xaac>
 800376a:	e018      	b.n	800379e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800376c:	4b8d      	ldr	r3, [pc, #564]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a8c      	ldr	r2, [pc, #560]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003772:	f023 0310 	bic.w	r3, r3, #16
 8003776:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003778:	f7fe fb64 	bl	8001e44 <HAL_GetTick>
 800377c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003780:	f7fe fb60 	bl	8001e44 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e156      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003792:	4b84      	ldr	r3, [pc, #528]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 814b 	beq.w	8003a3e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ae:	4b7d      	ldr	r3, [pc, #500]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	f000 80fa 	beq.w	80039b0 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	f040 80cc 	bne.w	800395e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80037c6:	4b77      	ldr	r3, [pc, #476]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a76      	ldr	r2, [pc, #472]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80037cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037d2:	f7fe fb37 	bl	8001e44 <HAL_GetTick>
 80037d6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe fb33 	bl	8001e44 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e129      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80037ec:	4b6d      	ldr	r3, [pc, #436]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80037fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d111      	bne.n	800382a <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380c:	4a65      	ldr	r2, [pc, #404]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 800380e:	f043 0304 	orr.w	r3, r3, #4
 8003812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003816:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003824:	2301      	movs	r3, #1
 8003826:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0xd08>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003832:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003836:	d102      	bne.n	800383e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800383e:	4b5a      	ldr	r3, [pc, #360]	; (80039a8 <HAL_RCC_OscConfig+0xd08>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4a59      	ldr	r2, [pc, #356]	; (80039a8 <HAL_RCC_OscConfig+0xd08>)
 8003844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003848:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800384a:	4b56      	ldr	r3, [pc, #344]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800385e:	3a01      	subs	r2, #1
 8003860:	0212      	lsls	r2, r2, #8
 8003862:	4311      	orrs	r1, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003868:	430a      	orrs	r2, r1
 800386a:	494e      	ldr	r1, [pc, #312]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 800386c:	4313      	orrs	r3, r2
 800386e:	628b      	str	r3, [r1, #40]	; 0x28
 8003870:	4b4c      	ldr	r3, [pc, #304]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003874:	4b4d      	ldr	r3, [pc, #308]	; (80039ac <HAL_RCC_OscConfig+0xd0c>)
 8003876:	4013      	ands	r3, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800387c:	3a01      	subs	r2, #1
 800387e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003886:	3a01      	subs	r2, #1
 8003888:	0252      	lsls	r2, r2, #9
 800388a:	b292      	uxth	r2, r2
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003892:	3a01      	subs	r2, #1
 8003894:	0412      	lsls	r2, r2, #16
 8003896:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800389a:	4311      	orrs	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80038a0:	3a01      	subs	r2, #1
 80038a2:	0612      	lsls	r2, r2, #24
 80038a4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80038a8:	430a      	orrs	r2, r1
 80038aa:	493e      	ldr	r1, [pc, #248]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80038b0:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	4a3b      	ldr	r2, [pc, #236]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80038b6:	f023 0310 	bic.w	r3, r3, #16
 80038ba:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038cc:	00d2      	lsls	r2, r2, #3
 80038ce:	4935      	ldr	r1, [pc, #212]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80038d4:	4b33      	ldr	r3, [pc, #204]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	4a32      	ldr	r2, [pc, #200]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80038da:	f043 0310 	orr.w	r3, r3, #16
 80038de:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80038e0:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	f023 020c 	bic.w	r2, r3, #12
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	492d      	ldr	r1, [pc, #180]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80038f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d105      	bne.n	8003906 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80038fa:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <HAL_RCC_OscConfig+0xd08>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	4a2a      	ldr	r2, [pc, #168]	; (80039a8 <HAL_RCC_OscConfig+0xd08>)
 8003900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003904:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003906:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800390e:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003914:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003916:	f023 0304 	bic.w	r3, r3, #4
 800391a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800391e:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	4a20      	ldr	r2, [pc, #128]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003928:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800392a:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1d      	ldr	r2, [pc, #116]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003930:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003934:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003936:	f7fe fa85 	bl	8001e44 <HAL_GetTick>
 800393a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393e:	f7fe fa81 	bl	8001e44 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e077      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0xc9e>
 800395c:	e06f      	b.n	8003a3e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003968:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800396a:	f7fe fa6b 	bl	8001e44 <HAL_GetTick>
 800396e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003972:	f7fe fa67 	bl	8001e44 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e05d      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f0      	bne.n	8003972 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	4a03      	ldr	r2, [pc, #12]	; (80039a4 <HAL_RCC_OscConfig+0xd04>)
 8003996:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	6293      	str	r3, [r2, #40]	; 0x28
 80039a0:	e04d      	b.n	8003a3e <HAL_RCC_OscConfig+0xd9e>
 80039a2:	bf00      	nop
 80039a4:	46020c00 	.word	0x46020c00
 80039a8:	46020800 	.word	0x46020800
 80039ac:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HAL_RCC_OscConfig+0xda8>)
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039b6:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <HAL_RCC_OscConfig+0xda8>)
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d03a      	beq.n	8003a3a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 0203 	and.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d133      	bne.n	8003a3a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d12a      	bne.n	8003a3a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	0b1b      	lsrs	r3, r3, #12
 80039e8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d122      	bne.n	8003a3a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fe:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d11a      	bne.n	8003a3a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	0a5b      	lsrs	r3, r3, #9
 8003a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a10:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d111      	bne.n	8003a3a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a22:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d108      	bne.n	8003a3a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	0e1b      	lsrs	r3, r3, #24
 8003a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3738      	adds	r7, #56	; 0x38
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	46020c00 	.word	0x46020c00

08003a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e1d9      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a60:	4b9b      	ldr	r3, [pc, #620]	; (8003cd0 <HAL_RCC_ClockConfig+0x284>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d910      	bls.n	8003a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b98      	ldr	r3, [pc, #608]	; (8003cd0 <HAL_RCC_ClockConfig+0x284>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 020f 	bic.w	r2, r3, #15
 8003a76:	4996      	ldr	r1, [pc, #600]	; (8003cd0 <HAL_RCC_ClockConfig+0x284>)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b94      	ldr	r3, [pc, #592]	; (8003cd0 <HAL_RCC_ClockConfig+0x284>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e1c1      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	4b8c      	ldr	r3, [pc, #560]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d908      	bls.n	8003abe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003aac:	4b89      	ldr	r3, [pc, #548]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	4986      	ldr	r1, [pc, #536]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d012      	beq.n	8003af0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	4b81      	ldr	r3, [pc, #516]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d909      	bls.n	8003af0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003adc:	4b7d      	ldr	r3, [pc, #500]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	497a      	ldr	r1, [pc, #488]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d010      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	4b74      	ldr	r3, [pc, #464]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d908      	bls.n	8003b1e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003b0c:	4b71      	ldr	r3, [pc, #452]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	496e      	ldr	r1, [pc, #440]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d010      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	4b69      	ldr	r3, [pc, #420]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d908      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003b3a:	4b66      	ldr	r3, [pc, #408]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f023 020f 	bic.w	r2, r3, #15
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4963      	ldr	r1, [pc, #396]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80d2 	beq.w	8003cfe <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d143      	bne.n	8003bee <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b66:	4b5b      	ldr	r3, [pc, #364]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d110      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b74:	4b57      	ldr	r3, [pc, #348]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7a:	4a56      	ldr	r2, [pc, #344]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003b7c:	f043 0304 	orr.w	r3, r3, #4
 8003b80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003b84:	4b53      	ldr	r3, [pc, #332]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003b96:	f7fe f955 	bl	8001e44 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003b9c:	4b4e      	ldr	r3, [pc, #312]	; (8003cd8 <HAL_RCC_ClockConfig+0x28c>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00f      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003baa:	f7fe f94b 	bl	8001e44 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e12b      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003bbc:	4b46      	ldr	r3, [pc, #280]	; (8003cd8 <HAL_RCC_ClockConfig+0x28c>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003bce:	4b41      	ldr	r3, [pc, #260]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd4:	4a3f      	ldr	r2, [pc, #252]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003bd6:	f023 0304 	bic.w	r3, r3, #4
 8003bda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003bde:	4b3d      	ldr	r3, [pc, #244]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d121      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e112      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf6:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d115      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e106      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003c0e:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e0fa      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c1e:	4b2d      	ldr	r3, [pc, #180]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0f2      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003c2e:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4926      	ldr	r1, [pc, #152]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003c40:	f7fe f900 	bl	8001e44 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d112      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c50:	f7fe f8f8 	bl	8001e44 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0d6      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c66:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	d1ee      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x204>
 8003c72:	e044      	b.n	8003cfe <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d112      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7e:	f7fe f8e1 	bl	8001e44 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0bf      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f003 030c 	and.w	r3, r3, #12
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d1ee      	bne.n	8003c7e <HAL_RCC_ClockConfig+0x232>
 8003ca0:	e02d      	b.n	8003cfe <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d123      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cac:	f7fe f8ca 	bl	8001e44 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e0a8      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003cc2:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_RCC_ClockConfig+0x288>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ee      	bne.n	8003cac <HAL_RCC_ClockConfig+0x260>
 8003cce:	e016      	b.n	8003cfe <HAL_RCC_ClockConfig+0x2b2>
 8003cd0:	40022000 	.word	0x40022000
 8003cd4:	46020c00 	.word	0x46020c00
 8003cd8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cdc:	f7fe f8b2 	bl	8001e44 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e090      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d1ee      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d010      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d208      	bcs.n	8003d2c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003d1a:	4b40      	ldr	r3, [pc, #256]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f023 020f 	bic.w	r2, r3, #15
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	493d      	ldr	r1, [pc, #244]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b3c      	ldr	r3, [pc, #240]	; (8003e20 <HAL_RCC_ClockConfig+0x3d4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d210      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <HAL_RCC_ClockConfig+0x3d4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 020f 	bic.w	r2, r3, #15
 8003d42:	4937      	ldr	r1, [pc, #220]	; (8003e20 <HAL_RCC_ClockConfig+0x3d4>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <HAL_RCC_ClockConfig+0x3d4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e05b      	b.n	8003e14 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d010      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d208      	bcs.n	8003d8a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003d78:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4925      	ldr	r1, [pc, #148]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d012      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d209      	bcs.n	8003dbc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003da8:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	4919      	ldr	r1, [pc, #100]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d208      	bcs.n	8003dea <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	490d      	ldr	r1, [pc, #52]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003dea:	f000 f859 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <HAL_RCC_ClockConfig+0x3d0>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	490a      	ldr	r1, [pc, #40]	; (8003e24 <HAL_RCC_ClockConfig+0x3d8>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003e00:	4a09      	ldr	r2, [pc, #36]	; (8003e28 <HAL_RCC_ClockConfig+0x3dc>)
 8003e02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e04:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCC_ClockConfig+0x3e0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fd ffd1 	bl	8001db0 <HAL_InitTick>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	73fb      	strb	r3, [r7, #15]

  return status;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	46020c00 	.word	0x46020c00
 8003e20:	40022000 	.word	0x40022000
 8003e24:	08008d60 	.word	0x08008d60
 8003e28:	20000134 	.word	0x20000134
 8003e2c:	200001d4 	.word	0x200001d4

08003e30 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 8003e3c:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <HAL_RCC_MCOConfig+0x68>)
 8003e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e42:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <HAL_RCC_MCOConfig+0x68>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e4c:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_RCC_MCOConfig+0x68>)
 8003e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Pin = MCO1_PIN;
 8003e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e5e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Mode = GPIO_MODE_AF_PP;
 8003e60:	2302      	movs	r3, #2
 8003e62:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e64:	2302      	movs	r3, #2
 8003e66:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Alternate = GPIO_AF0_MCO;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio_initstruct);
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	4619      	mov	r1, r3
 8003e76:	4809      	ldr	r0, [pc, #36]	; (8003e9c <HAL_RCC_MCOConfig+0x6c>)
 8003e78:	f7fe fc20 	bl	80026bc <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_MCOConfig+0x68>)
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	4903      	ldr	r1, [pc, #12]	; (8003e98 <HAL_RCC_MCOConfig+0x68>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61cb      	str	r3, [r1, #28]
}
 8003e90:	bf00      	nop
 8003e92:	3728      	adds	r7, #40	; 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	46020c00 	.word	0x46020c00
 8003e9c:	42020000 	.word	0x42020000

08003ea0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b08b      	sub	sp, #44	; 0x2c
 8003ea4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eae:	4b7b      	ldr	r3, [pc, #492]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb8:	4b78      	ldr	r3, [pc, #480]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b0c      	cmp	r3, #12
 8003ecc:	d121      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d11e      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003ed4:	4b71      	ldr	r3, [pc, #452]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003ee0:	4b6e      	ldr	r3, [pc, #440]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ee6:	0b1b      	lsrs	r3, r3, #12
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
 8003eee:	e005      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003ef0:	4b6a      	ldr	r3, [pc, #424]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	0f1b      	lsrs	r3, r3, #28
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003efc:	4a68      	ldr	r2, [pc, #416]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d110      	bne.n	8003f2e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f10:	e00d      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f12:	4b62      	ldr	r3, [pc, #392]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d102      	bne.n	8003f24 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f1e:	4b61      	ldr	r3, [pc, #388]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f20:	623b      	str	r3, [r7, #32]
 8003f22:	e004      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f2a:	4b5e      	ldr	r3, [pc, #376]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f2c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b0c      	cmp	r3, #12
 8003f32:	f040 80ac 	bne.w	800408e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003f36:	4b59      	ldr	r3, [pc, #356]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003f40:	4b56      	ldr	r3, [pc, #344]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	0a1b      	lsrs	r3, r3, #8
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003f4e:	4b53      	ldr	r3, [pc, #332]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003f5a:	4b50      	ldr	r3, [pc, #320]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	08db      	lsrs	r3, r3, #3
 8003f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8086 	beq.w	800408a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d003      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0xec>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d022      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x130>
 8003f8a:	e043      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f96:	eddf 6a44 	vldr	s13, [pc, #272]	; 80040a8 <HAL_RCC_GetSysClockFreq+0x208>
 8003f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9e:	4b3f      	ldr	r3, [pc, #252]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003fae:	ed97 6a01 	vldr	s12, [r7, #4]
 8003fb2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80040ac <HAL_RCC_GetSysClockFreq+0x20c>
 8003fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fca:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003fce:	e046      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fda:	eddf 6a33 	vldr	s13, [pc, #204]	; 80040a8 <HAL_RCC_GetSysClockFreq+0x208>
 8003fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ff2:	ed97 6a01 	vldr	s12, [r7, #4]
 8003ff6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80040ac <HAL_RCC_GetSysClockFreq+0x20c>
 8003ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004006:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800400a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004012:	e024      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	ee07 3a90 	vmov	s15, r3
 8004024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800402e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004034:	ee07 3a90 	vmov	s15, r3
 8004038:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800403c:	ed97 6a01 	vldr	s12, [r7, #4]
 8004040:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80040ac <HAL_RCC_GetSysClockFreq+0x20c>
 8004044:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004048:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800404c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004050:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004058:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800405c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004062:	0e1b      	lsrs	r3, r3, #24
 8004064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004068:	3301      	adds	r3, #1
 800406a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004076:	edd7 6a07 	vldr	s13, [r7, #28]
 800407a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004082:	ee17 3a90 	vmov	r3, s15
 8004086:	623b      	str	r3, [r7, #32]
 8004088:	e001      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800408e:	6a3b      	ldr	r3, [r7, #32]
}
 8004090:	4618      	mov	r0, r3
 8004092:	372c      	adds	r7, #44	; 0x2c
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	46020c00 	.word	0x46020c00
 80040a0:	08008d78 	.word	0x08008d78
 80040a4:	00f42400 	.word	0x00f42400
 80040a8:	4b742400 	.word	0x4b742400
 80040ac:	46000000 	.word	0x46000000

080040b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80040b4:	f7ff fef4 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <HAL_RCC_GetHCLKFreq+0x28>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	4906      	ldr	r1, [pc, #24]	; (80040dc <HAL_RCC_GetHCLKFreq+0x2c>)
 80040c4:	5ccb      	ldrb	r3, [r1, r3]
 80040c6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ca:	4a05      	ldr	r2, [pc, #20]	; (80040e0 <HAL_RCC_GetHCLKFreq+0x30>)
 80040cc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80040ce:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <HAL_RCC_GetHCLKFreq+0x30>)
 80040d0:	681b      	ldr	r3, [r3, #0]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	46020c00 	.word	0x46020c00
 80040dc:	08008d60 	.word	0x08008d60
 80040e0:	20000134 	.word	0x20000134

080040e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80040e8:	f7ff ffe2 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	4903      	ldr	r1, [pc, #12]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	46020c00 	.word	0x46020c00
 8004108:	08008d70 	.word	0x08008d70

0800410c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004110:	f7ff ffce 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 8004114:	4602      	mov	r2, r0
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	4903      	ldr	r1, [pc, #12]	; (8004130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004122:	5ccb      	ldrb	r3, [r1, r3]
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	bd80      	pop	{r7, pc}
 800412c:	46020c00 	.word	0x46020c00
 8004130:	08008d70 	.word	0x08008d70

08004134 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004138:	f7ff ffba 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4903      	ldr	r1, [pc, #12]	; (8004158 <HAL_RCC_GetPCLK3Freq+0x24>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	46020c00 	.word	0x46020c00
 8004158:	08008d70 	.word	0x08008d70

0800415c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004164:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004172:	f7fe fd87 	bl	8002c84 <HAL_PWREx_GetVoltageRange>
 8004176:	6178      	str	r0, [r7, #20]
 8004178:	e019      	b.n	80041ae <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	4b39      	ldr	r3, [pc, #228]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800417c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004180:	4a37      	ldr	r2, [pc, #220]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004182:	f043 0304 	orr.w	r3, r3, #4
 8004186:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800418a:	4b35      	ldr	r3, [pc, #212]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800418c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004198:	f7fe fd74 	bl	8002c84 <HAL_PWREx_GetVoltageRange>
 800419c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800419e:	4b30      	ldr	r3, [pc, #192]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80041a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a4:	4a2e      	ldr	r2, [pc, #184]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80041a6:	f023 0304 	bic.w	r3, r3, #4
 80041aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041b4:	d003      	beq.n	80041be <RCC_SetFlashLatencyFromMSIRange+0x62>
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041bc:	d109      	bne.n	80041d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c4:	d202      	bcs.n	80041cc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80041c6:	2301      	movs	r3, #1
 80041c8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80041ca:	e033      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80041d0:	e030      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d8:	d208      	bcs.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e0:	d102      	bne.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80041e2:	2303      	movs	r3, #3
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	e025      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e035      	b.n	8004258 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f2:	d90f      	bls.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004200:	d902      	bls.n	8004208 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	e015      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004208:	2301      	movs	r3, #1
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	e012      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	e00f      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800421a:	d109      	bne.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004222:	d102      	bne.n	800422a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004224:	2301      	movs	r3, #1
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	e004      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800422a:	2302      	movs	r3, #2
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	e001      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004230:	2301      	movs	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 020f 	bic.w	r2, r3, #15
 800423c:	4909      	ldr	r1, [pc, #36]	; (8004264 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	429a      	cmp	r2, r3
 8004250:	d001      	beq.n	8004256 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	46020c00 	.word	0x46020c00
 8004264:	40022000 	.word	0x40022000

08004268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800426c:	b0ba      	sub	sp, #232	; 0xe8
 800426e:	af00      	add	r7, sp, #0
 8004270:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004274:	2300      	movs	r3, #0
 8004276:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800427a:	2300      	movs	r3, #0
 800427c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004280:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f002 0401 	and.w	r4, r2, #1
 800428c:	2500      	movs	r5, #0
 800428e:	ea54 0305 	orrs.w	r3, r4, r5
 8004292:	d00b      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004294:	4bcb      	ldr	r3, [pc, #812]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800429a:	f023 0103 	bic.w	r1, r3, #3
 800429e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	4ac7      	ldr	r2, [pc, #796]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042a6:	430b      	orrs	r3, r1
 80042a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f002 0802 	and.w	r8, r2, #2
 80042b8:	f04f 0900 	mov.w	r9, #0
 80042bc:	ea58 0309 	orrs.w	r3, r8, r9
 80042c0:	d00b      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80042c2:	4bc0      	ldr	r3, [pc, #768]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042c8:	f023 010c 	bic.w	r1, r3, #12
 80042cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	4abc      	ldr	r2, [pc, #752]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d4:	430b      	orrs	r3, r1
 80042d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f002 0a04 	and.w	sl, r2, #4
 80042e6:	f04f 0b00 	mov.w	fp, #0
 80042ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80042ee:	d00b      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80042f0:	4bb4      	ldr	r3, [pc, #720]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80042fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	4ab0      	ldr	r2, [pc, #704]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004302:	430b      	orrs	r3, r1
 8004304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f002 0308 	and.w	r3, r2, #8
 8004314:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004318:	2300      	movs	r3, #0
 800431a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800431e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004322:	460b      	mov	r3, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	d00b      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004328:	4ba6      	ldr	r3, [pc, #664]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800432a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800432e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004338:	4aa2      	ldr	r2, [pc, #648]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800433a:	430b      	orrs	r3, r1
 800433c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f002 0310 	and.w	r3, r2, #16
 800434c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004356:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	d00b      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004360:	4b98      	ldr	r3, [pc, #608]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800436a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800436e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004370:	4a94      	ldr	r2, [pc, #592]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004372:	430b      	orrs	r3, r1
 8004374:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f002 0320 	and.w	r3, r2, #32
 8004384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004388:	2300      	movs	r3, #0
 800438a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800438e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004392:	460b      	mov	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	d00b      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004398:	4b8a      	ldr	r3, [pc, #552]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800439a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800439e:	f023 0107 	bic.w	r1, r3, #7
 80043a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a8:	4a86      	ldr	r2, [pc, #536]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043aa:	430b      	orrs	r3, r1
 80043ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80043bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4313      	orrs	r3, r2
 80043ce:	d00b      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80043d0:	4b7c      	ldr	r3, [pc, #496]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043d6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80043da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e0:	4a78      	ldr	r2, [pc, #480]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043e2:	430b      	orrs	r3, r1
 80043e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80043f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d00b      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004408:	4b6e      	ldr	r3, [pc, #440]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800440a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800440e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004418:	4a6a      	ldr	r2, [pc, #424]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800441a:	430b      	orrs	r3, r1
 800441c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004420:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800442c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004430:	2300      	movs	r3, #0
 8004432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004436:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800443a:	460b      	mov	r3, r1
 800443c:	4313      	orrs	r3, r2
 800443e:	d00b      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004440:	4b60      	ldr	r3, [pc, #384]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800444a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	4a5c      	ldr	r2, [pc, #368]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004452:	430b      	orrs	r3, r1
 8004454:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004458:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004468:	2300      	movs	r3, #0
 800446a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800446e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004472:	460b      	mov	r3, r1
 8004474:	4313      	orrs	r3, r2
 8004476:	d00b      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004478:	4b52      	ldr	r3, [pc, #328]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800447a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800447e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004488:	4a4e      	ldr	r2, [pc, #312]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800448a:	430b      	orrs	r3, r1
 800448c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004490:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800449c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044a0:	2300      	movs	r3, #0
 80044a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80044aa:	460b      	mov	r3, r1
 80044ac:	4313      	orrs	r3, r2
 80044ae:	d00b      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80044b0:	4b44      	ldr	r3, [pc, #272]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044b6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80044ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c0:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044c2:	430b      	orrs	r3, r1
 80044c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80044d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044de:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d00b      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80044e8:	4b36      	ldr	r3, [pc, #216]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ee:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80044f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f8:	4a32      	ldr	r2, [pc, #200]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044fa:	430b      	orrs	r3, r1
 80044fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004500:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800450c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004516:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800451a:	460b      	mov	r3, r1
 800451c:	4313      	orrs	r3, r2
 800451e:	d00c      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004526:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800452a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800452e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004532:	4a24      	ldr	r2, [pc, #144]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004534:	430b      	orrs	r3, r1
 8004536:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800453a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004546:	67bb      	str	r3, [r7, #120]	; 0x78
 8004548:	2300      	movs	r3, #0
 800454a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800454c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004550:	460b      	mov	r3, r1
 8004552:	4313      	orrs	r3, r2
 8004554:	d04f      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	2b80      	cmp	r3, #128	; 0x80
 8004560:	d02d      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d827      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004566:	2b60      	cmp	r3, #96	; 0x60
 8004568:	d02e      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800456a:	2b60      	cmp	r3, #96	; 0x60
 800456c:	d823      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d006      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d81f      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800457a:	2b20      	cmp	r3, #32
 800457c:	d011      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800457e:	e01a      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	4a0f      	ldr	r2, [pc, #60]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800458c:	e01d      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800458e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004592:	3308      	adds	r3, #8
 8004594:	4618      	mov	r0, r3
 8004596:	f002 f9f5 	bl	8006984 <RCCEx_PLL2_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045a0:	e013      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045a6:	332c      	adds	r3, #44	; 0x2c
 80045a8:	4618      	mov	r0, r3
 80045aa:	f002 fa83 	bl	8006ab4 <RCCEx_PLL3_Config>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045b4:	e009      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80045bc:	e005      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80045be:	bf00      	nop
 80045c0:	e003      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x362>
 80045c2:	bf00      	nop
 80045c4:	46020c00 	.word	0x46020c00
        break;
 80045c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10d      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80045d2:	4bb6      	ldr	r3, [pc, #728]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80045d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045d8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80045dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e4:	4ab1      	ldr	r2, [pc, #708]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80045e6:	430b      	orrs	r3, r1
 80045e8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80045ec:	e003      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80045f2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004602:	673b      	str	r3, [r7, #112]	; 0x70
 8004604:	2300      	movs	r3, #0
 8004606:	677b      	str	r3, [r7, #116]	; 0x74
 8004608:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800460c:	460b      	mov	r3, r1
 800460e:	4313      	orrs	r3, r2
 8004610:	d053      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d033      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004624:	d82c      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462a:	d02f      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x424>
 800462c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004630:	d826      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004636:	d008      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463c:	d820      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004646:	d011      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004648:	e01a      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800464a:	4b98      	ldr	r3, [pc, #608]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	4a97      	ldr	r2, [pc, #604]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004654:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004656:	e01a      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800465c:	3308      	adds	r3, #8
 800465e:	4618      	mov	r0, r3
 8004660:	f002 f990 	bl	8006984 <RCCEx_PLL2_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800466a:	e010      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800466c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004670:	332c      	adds	r3, #44	; 0x2c
 8004672:	4618      	mov	r0, r3
 8004674:	f002 fa1e 	bl	8006ab4 <RCCEx_PLL3_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800467e:	e006      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004686:	e002      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004688:	bf00      	nop
 800468a:	e000      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800468c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10d      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004696:	4b85      	ldr	r3, [pc, #532]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004698:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800469c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80046a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a8:	4a80      	ldr	r2, [pc, #512]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80046aa:	430b      	orrs	r3, r1
 80046ac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80046b0:	e003      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80046b6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80046ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80046c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80046c8:	2300      	movs	r3, #0
 80046ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046cc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80046d0:	460b      	mov	r3, r1
 80046d2:	4313      	orrs	r3, r2
 80046d4:	d046      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80046d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046de:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80046e2:	d028      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80046e4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80046e8:	d821      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80046ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ee:	d022      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80046f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f4:	d81b      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80046f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046fa:	d01c      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80046fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004700:	d815      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004706:	d008      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470c:	d80f      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d011      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004716:	d00e      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004718:	e009      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800471a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800471e:	3308      	adds	r3, #8
 8004720:	4618      	mov	r0, r3
 8004722:	f002 f92f 	bl	8006984 <RCCEx_PLL2_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800472c:	e004      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004734:	e000      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8004736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004738:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10d      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004740:	4b5a      	ldr	r3, [pc, #360]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004746:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800474a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800474e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004752:	4a56      	ldr	r2, [pc, #344]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004754:	430b      	orrs	r3, r1
 8004756:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800475a:	e003      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004760:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004770:	663b      	str	r3, [r7, #96]	; 0x60
 8004772:	2300      	movs	r3, #0
 8004774:	667b      	str	r3, [r7, #100]	; 0x64
 8004776:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800477a:	460b      	mov	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	d03f      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004780:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004788:	2b04      	cmp	r3, #4
 800478a:	d81e      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x562>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047d3 	.word	0x080047d3
 8004798:	080047a9 	.word	0x080047a9
 800479c:	080047b7 	.word	0x080047b7
 80047a0:	080047d3 	.word	0x080047d3
 80047a4:	080047d3 	.word	0x080047d3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047a8:	4b40      	ldr	r3, [pc, #256]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	4a3f      	ldr	r2, [pc, #252]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80047ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80047b4:	e00e      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ba:	332c      	adds	r3, #44	; 0x2c
 80047bc:	4618      	mov	r0, r3
 80047be:	f002 f979 	bl	8006ab4 <RCCEx_PLL3_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80047c8:	e004      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80047d0:	e000      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80047d2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80047d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10d      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80047dc:	4b33      	ldr	r3, [pc, #204]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80047de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80047e2:	f023 0107 	bic.w	r1, r3, #7
 80047e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	4a2f      	ldr	r2, [pc, #188]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80047f0:	430b      	orrs	r3, r1
 80047f2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80047f6:	e003      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80047fc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800480c:	65bb      	str	r3, [r7, #88]	; 0x58
 800480e:	2300      	movs	r3, #0
 8004810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004812:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004816:	460b      	mov	r3, r1
 8004818:	4313      	orrs	r3, r2
 800481a:	d04d      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800481c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004828:	d028      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x614>
 800482a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800482e:	d821      	bhi.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004830:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004834:	d024      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004836:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800483a:	d81b      	bhi.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800483c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004840:	d00e      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004846:	d815      	bhi.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01b      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800484c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004850:	d110      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004852:	4b16      	ldr	r3, [pc, #88]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	4a15      	ldr	r2, [pc, #84]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800485e:	e012      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004860:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004864:	332c      	adds	r3, #44	; 0x2c
 8004866:	4618      	mov	r0, r3
 8004868:	f002 f924 	bl	8006ab4 <RCCEx_PLL3_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004872:	e008      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800487a:	e004      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800487c:	bf00      	nop
 800487e:	e002      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004884:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004886:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d110      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004894:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800489c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a0:	4a02      	ldr	r2, [pc, #8]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80048a2:	430b      	orrs	r3, r1
 80048a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048a8:	e006      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80048aa:	bf00      	nop
 80048ac:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80048b4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80048c4:	653b      	str	r3, [r7, #80]	; 0x50
 80048c6:	2300      	movs	r3, #0
 80048c8:	657b      	str	r3, [r7, #84]	; 0x54
 80048ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80048ce:	460b      	mov	r3, r1
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f000 80b5 	beq.w	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048dc:	4b9d      	ldr	r3, [pc, #628]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d113      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ea:	4b9a      	ldr	r3, [pc, #616]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f0:	4a98      	ldr	r2, [pc, #608]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048f2:	f043 0304 	orr.w	r3, r3, #4
 80048f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80048fa:	4b96      	ldr	r3, [pc, #600]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004912:	4b91      	ldr	r3, [pc, #580]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	4a90      	ldr	r2, [pc, #576]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800491e:	f7fd fa91 	bl	8001e44 <HAL_GetTick>
 8004922:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004926:	e00b      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004928:	f7fd fa8c 	bl	8001e44 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d903      	bls.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800493e:	e005      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004940:	4b85      	ldr	r3, [pc, #532]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ed      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800494c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d165      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004954:	4b7f      	ldr	r3, [pc, #508]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004966:	2b00      	cmp	r3, #0
 8004968:	d023      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800496a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800496e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004976:	4293      	cmp	r3, r2
 8004978:	d01b      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800497a:	4b76      	ldr	r3, [pc, #472]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800497c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004984:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004988:	4b72      	ldr	r3, [pc, #456]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800498a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800498e:	4a71      	ldr	r2, [pc, #452]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004994:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004998:	4b6e      	ldr	r3, [pc, #440]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800499a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800499e:	4a6d      	ldr	r2, [pc, #436]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80049a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049a8:	4a6a      	ldr	r2, [pc, #424]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d019      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049be:	f7fd fa41 	bl	8001e44 <HAL_GetTick>
 80049c2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c6:	e00d      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c8:	f7fd fa3c 	bl	8001e44 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d2:	1ad2      	subs	r2, r2, r3
 80049d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80049d8:	429a      	cmp	r2, r3
 80049da:	d903      	bls.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80049e2:	e006      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e4:	4b5b      	ldr	r3, [pc, #364]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80049e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0ea      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80049f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10d      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80049fa:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80049fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a00:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004a0c:	4a51      	ldr	r2, [pc, #324]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a14:	e008      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a16:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004a1a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8004a1e:	e003      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004a24:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a28:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a30:	4b48      	ldr	r3, [pc, #288]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a36:	4a47      	ldr	r2, [pc, #284]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004a38:	f023 0304 	bic.w	r3, r3, #4
 8004a3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004a40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a4e:	2300      	movs	r3, #0
 8004a50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a52:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004a56:	460b      	mov	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	d042      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004a5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a64:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a68:	d022      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004a6a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a6e:	d81b      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a74:	d011      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8004a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7a:	d815      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d019      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a84:	d110      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 ff79 	bl	8006984 <RCCEx_PLL2_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004a98:	e00d      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9a:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	4a2d      	ldr	r2, [pc, #180]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004aa6:	e006      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004ab4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004ab6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10d      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004abe:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ac4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004acc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ad0:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ad8:	e003      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ada:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004ade:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004aee:	643b      	str	r3, [r7, #64]	; 0x40
 8004af0:	2300      	movs	r3, #0
 8004af2:	647b      	str	r3, [r7, #68]	; 0x44
 8004af4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d032      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0a:	d00b      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b10:	d804      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b1a:	d007      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004b22:	e004      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004b24:	bf00      	nop
 8004b26:	e002      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004b28:	bf00      	nop
 8004b2a:	e000      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004b2c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004b2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d112      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004b38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b48:	4a02      	ldr	r2, [pc, #8]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004b50:	e008      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8004b52:	bf00      	nop
 8004b54:	46020c00 	.word	0x46020c00
 8004b58:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b60:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b72:	2300      	movs	r3, #0
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	d00c      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004b80:	4b98      	ldr	r3, [pc, #608]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b86:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8004b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b92:	4a94      	ldr	r2, [pc, #592]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004b94:	430b      	orrs	r3, r1
 8004b96:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba8:	2300      	movs	r3, #0
 8004baa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	d019      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bc4:	4b87      	ldr	r3, [pc, #540]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	4a86      	ldr	r2, [pc, #536]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bce:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004bd0:	4b84      	ldr	r3, [pc, #528]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004bd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004bd6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004be2:	4a80      	ldr	r2, [pc, #512]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004be4:	430b      	orrs	r3, r1
 8004be6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bfc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004c00:	460b      	mov	r3, r1
 8004c02:	4313      	orrs	r3, r2
 8004c04:	d00c      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004c06:	4b77      	ldr	r3, [pc, #476]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c18:	4972      	ldr	r1, [pc, #456]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004c2c:	623b      	str	r3, [r7, #32]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
 8004c32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c36:	460b      	mov	r3, r1
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	d00c      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004c3c:	4b69      	ldr	r3, [pc, #420]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c4e:	4965      	ldr	r1, [pc, #404]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	2300      	movs	r3, #0
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	d00c      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004c72:	4b5c      	ldr	r3, [pc, #368]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c78:	f023 0218 	bic.w	r2, r3, #24
 8004c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c84:	4957      	ldr	r1, [pc, #348]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	d032      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cb4:	d105      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb6:	4b4b      	ldr	r3, [pc, #300]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	4a4a      	ldr	r2, [pc, #296]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc0:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004cc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cce:	d108      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f001 fe54 	bl	8006984 <RCCEx_PLL2_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8004ce2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10d      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004cea:	4b3e      	ldr	r3, [pc, #248]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004cec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004cf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cfc:	4939      	ldr	r1, [pc, #228]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004d04:	e003      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d06:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d0a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d24:	460b      	mov	r3, r1
 8004d26:	4313      	orrs	r3, r2
 8004d28:	d03a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d36:	d00e      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8004d38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d3c:	d815      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d017      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004d42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d46:	d110      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d48:	4b26      	ldr	r3, [pc, #152]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	4a25      	ldr	r2, [pc, #148]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d52:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004d54:	e00e      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 fe11 	bl	8006984 <RCCEx_PLL2_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004d68:	e004      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004d70:	e000      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8004d72:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d74:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10d      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004d7c:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d8e:	4915      	ldr	r1, [pc, #84]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004d96:	e003      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d98:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d9c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004da0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d00c      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dc2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004dce:	4905      	ldr	r1, [pc, #20]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004dd6:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	37e8      	adds	r7, #232	; 0xe8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de4:	46020c00 	.word	0x46020c00

08004de8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b089      	sub	sp, #36	; 0x24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004df0:	4bac      	ldr	r3, [pc, #688]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004dfa:	4baa      	ldr	r3, [pc, #680]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004e04:	4ba7      	ldr	r3, [pc, #668]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	3301      	adds	r3, #1
 8004e10:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004e12:	4ba4      	ldr	r3, [pc, #656]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e1c:	4ba1      	ldr	r3, [pc, #644]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	08db      	lsrs	r3, r3, #3
 8004e22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e34:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8123 	beq.w	8005086 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d062      	beq.n	8004f0c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	f200 8081 	bhi.w	8004f50 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d024      	beq.n	8004e9e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d17a      	bne.n	8004f50 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	ee07 3a90 	vmov	s15, r3
 8004e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e64:	eddf 6a90 	vldr	s13, [pc, #576]	; 80050a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8004e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6c:	4b8d      	ldr	r3, [pc, #564]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e74:	ee07 3a90 	vmov	s15, r3
 8004e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e80:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80050ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e9c:	e08f      	b.n	8004fbe <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004e9e:	4b81      	ldr	r3, [pc, #516]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8004eaa:	4b7e      	ldr	r3, [pc, #504]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	0f1b      	lsrs	r3, r3, #28
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	e006      	b.n	8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8004eb6:	4b7b      	ldr	r3, [pc, #492]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	0f1b      	lsrs	r3, r3, #28
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	4a7a      	ldr	r2, [pc, #488]	; (80050b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	ee07 3a90 	vmov	s15, r3
 8004ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eee:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80050ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f0a:	e058      	b.n	8004fbe <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	eddf 6a64 	vldr	s13, [pc, #400]	; 80050a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8004f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1e:	4b61      	ldr	r3, [pc, #388]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f32:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80050ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f4e:	e036      	b.n	8004fbe <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004f50:	4b54      	ldr	r3, [pc, #336]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8004f5c:	4b51      	ldr	r3, [pc, #324]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	0f1b      	lsrs	r3, r3, #28
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	e006      	b.n	8004f76 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8004f68:	4b4e      	ldr	r3, [pc, #312]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	0f1b      	lsrs	r3, r3, #28
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	4a4e      	ldr	r2, [pc, #312]	; (80050b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7c:	ee07 3a90 	vmov	s15, r3
 8004f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fa0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80050ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fbc:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004fbe:	4b39      	ldr	r3, [pc, #228]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d017      	beq.n	8004ffa <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004fca:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fce:	0a5b      	lsrs	r3, r3, #9
 8004fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd4:	ee07 3a90 	vmov	s15, r3
 8004fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff0:	ee17 2a90 	vmov	r2, s15
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e002      	b.n	8005000 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005000:	4b28      	ldr	r3, [pc, #160]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d017      	beq.n	800503c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800500c:	4b25      	ldr	r3, [pc, #148]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800500e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005010:	0c1b      	lsrs	r3, r3, #16
 8005012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800501e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005022:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005026:	edd7 6a07 	vldr	s13, [r7, #28]
 800502a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800502e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005032:	ee17 2a90 	vmov	r2, s15
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	e002      	b.n	8005042 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005042:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d017      	beq.n	800507e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800504e:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005052:	0e1b      	lsrs	r3, r3, #24
 8005054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005064:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005068:	edd7 6a07 	vldr	s13, [r7, #28]
 800506c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005074:	ee17 2a90 	vmov	r2, s15
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800507c:	e00c      	b.n	8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	e008      	b.n	8005098 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	609a      	str	r2, [r3, #8]
}
 8005098:	bf00      	nop
 800509a:	3724      	adds	r7, #36	; 0x24
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	46020c00 	.word	0x46020c00
 80050a8:	4b742400 	.word	0x4b742400
 80050ac:	46000000 	.word	0x46000000
 80050b0:	08008d78 	.word	0x08008d78

080050b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b089      	sub	sp, #36	; 0x24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80050bc:	4bac      	ldr	r3, [pc, #688]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80050c6:	4baa      	ldr	r3, [pc, #680]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80050d0:	4ba7      	ldr	r3, [pc, #668]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	0a1b      	lsrs	r3, r3, #8
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	3301      	adds	r3, #1
 80050dc:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80050de:	4ba4      	ldr	r3, [pc, #656]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80050e8:	4ba1      	ldr	r3, [pc, #644]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	08db      	lsrs	r3, r3, #3
 80050ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005100:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8123 	beq.w	8005352 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b03      	cmp	r3, #3
 8005110:	d062      	beq.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b03      	cmp	r3, #3
 8005116:	f200 8081 	bhi.w	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d024      	beq.n	800516a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d17a      	bne.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	ee07 3a90 	vmov	s15, r3
 800512c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005130:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005138:	4b8d      	ldr	r3, [pc, #564]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800513a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005148:	ed97 6a02 	vldr	s12, [r7, #8]
 800514c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005150:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005154:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005158:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005164:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005168:	e08f      	b.n	800528a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800516a:	4b81      	ldr	r3, [pc, #516]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8005176:	4b7e      	ldr	r3, [pc, #504]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	0f1b      	lsrs	r3, r3, #28
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	e006      	b.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8005182:	4b7b      	ldr	r3, [pc, #492]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005184:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	0f1b      	lsrs	r3, r3, #28
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	4a7a      	ldr	r2, [pc, #488]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	ee07 3a90 	vmov	s15, r3
 80051a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ba:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80051ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d6:	e058      	b.n	800528a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80051e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ea:	4b61      	ldr	r3, [pc, #388]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80051fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80051fe:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005202:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005206:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800520a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800521a:	e036      	b.n	800528a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800521c:	4b54      	ldr	r3, [pc, #336]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8005228:	4b51      	ldr	r3, [pc, #324]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	0f1b      	lsrs	r3, r3, #28
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	e006      	b.n	8005242 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8005234:	4b4e      	ldr	r3, [pc, #312]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800523a:	041b      	lsls	r3, r3, #16
 800523c:	0f1b      	lsrs	r3, r3, #28
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	4a4e      	ldr	r2, [pc, #312]	; (800537c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	ee07 3a90 	vmov	s15, r3
 8005264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005268:	ed97 6a02 	vldr	s12, [r7, #8]
 800526c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005270:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005274:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005278:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800527c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005284:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005288:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d017      	beq.n	80052c6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005296:	4b36      	ldr	r3, [pc, #216]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529a:	0a5b      	lsrs	r3, r3, #9
 800529c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80052a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ac:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80052b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80052b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052bc:	ee17 2a90 	vmov	r2, s15
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	e002      	b.n	80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80052cc:	4b28      	ldr	r3, [pc, #160]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d017      	beq.n	8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80052d8:	4b25      	ldr	r3, [pc, #148]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80052da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80052ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ee:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80052f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052fe:	ee17 2a90 	vmov	r2, s15
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	e002      	b.n	800530e <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800530e:	4b18      	ldr	r3, [pc, #96]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d017      	beq.n	800534a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	0e1b      	lsrs	r3, r3, #24
 8005320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005324:	ee07 3a90 	vmov	s15, r3
 8005328:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800532c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005330:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005334:	edd7 6a07 	vldr	s13, [r7, #28]
 8005338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800533c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005340:	ee17 2a90 	vmov	r2, s15
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005348:	e00c      	b.n	8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	e008      	b.n	8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	bf00      	nop
 8005366:	3724      	adds	r7, #36	; 0x24
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	46020c00 	.word	0x46020c00
 8005374:	4b742400 	.word	0x4b742400
 8005378:	46000000 	.word	0x46000000
 800537c:	08008d78 	.word	0x08008d78

08005380 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005380:	b480      	push	{r7}
 8005382:	b089      	sub	sp, #36	; 0x24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005388:	4bac      	ldr	r3, [pc, #688]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005390:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005392:	4baa      	ldr	r3, [pc, #680]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800539c:	4ba7      	ldr	r3, [pc, #668]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	0a1b      	lsrs	r3, r3, #8
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	3301      	adds	r3, #1
 80053a8:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80053aa:	4ba4      	ldr	r3, [pc, #656]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80053b4:	4ba1      	ldr	r3, [pc, #644]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80053b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b8:	08db      	lsrs	r3, r3, #3
 80053ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053cc:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8123 	beq.w	800561e <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d062      	beq.n	80054a4 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	f200 8081 	bhi.w	80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d024      	beq.n	8005436 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d17a      	bne.n	80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005404:	4b8d      	ldr	r3, [pc, #564]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005414:	ed97 6a02 	vldr	s12, [r7, #8]
 8005418:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800541c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005420:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005428:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800542c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005430:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8005434:	e08f      	b.n	8005556 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005436:	4b81      	ldr	r3, [pc, #516]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8005442:	4b7e      	ldr	r3, [pc, #504]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0f1b      	lsrs	r3, r3, #28
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	e006      	b.n	800545c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800544e:	4b7b      	ldr	r3, [pc, #492]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005454:	041b      	lsls	r3, r3, #16
 8005456:	0f1b      	lsrs	r3, r3, #28
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	4a7a      	ldr	r2, [pc, #488]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800545e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	ee07 3a90 	vmov	s15, r3
 8005470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005482:	ed97 6a02 	vldr	s12, [r7, #8]
 8005486:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800548a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005496:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800549a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054a2:	e058      	b.n	8005556 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ae:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80054b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b6:	4b61      	ldr	r3, [pc, #388]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80054c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ca:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80054ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80054d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80054d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80054de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054e6:	e036      	b.n	8005556 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80054e8:	4b54      	ldr	r3, [pc, #336]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 80054f4:	4b51      	ldr	r3, [pc, #324]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	0f1b      	lsrs	r3, r3, #28
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	e006      	b.n	800550e <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8005500:	4b4e      	ldr	r3, [pc, #312]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005506:	041b      	lsls	r3, r3, #16
 8005508:	0f1b      	lsrs	r3, r3, #28
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	4a4e      	ldr	r2, [pc, #312]	; (8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005534:	ed97 6a02 	vldr	s12, [r7, #8]
 8005538:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800553c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005548:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800554c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005550:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005554:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005556:	4b39      	ldr	r3, [pc, #228]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d017      	beq.n	8005592 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005562:	4b36      	ldr	r3, [pc, #216]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	0a5b      	lsrs	r3, r3, #9
 8005568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800556c:	ee07 3a90 	vmov	s15, r3
 8005570:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005574:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005578:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800557c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005588:	ee17 2a90 	vmov	r2, s15
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e002      	b.n	8005598 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005598:	4b28      	ldr	r3, [pc, #160]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d017      	beq.n	80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80055a4:	4b25      	ldr	r3, [pc, #148]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80055a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80055b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ba:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80055be:	edd7 6a07 	vldr	s13, [r7, #28]
 80055c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ca:	ee17 2a90 	vmov	r2, s15
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	605a      	str	r2, [r3, #4]
 80055d2:	e002      	b.n	80055da <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80055da:	4b18      	ldr	r3, [pc, #96]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d017      	beq.n	8005616 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80055e6:	4b15      	ldr	r3, [pc, #84]	; (800563c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80055e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ea:	0e1b      	lsrs	r3, r3, #24
 80055ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80055f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055fc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005600:	edd7 6a07 	vldr	s13, [r7, #28]
 8005604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800560c:	ee17 2a90 	vmov	r2, s15
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005614:	e00c      	b.n	8005630 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	609a      	str	r2, [r3, #8]
}
 800561c:	e008      	b.n	8005630 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	3724      	adds	r7, #36	; 0x24
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	46020c00 	.word	0x46020c00
 8005640:	4b742400 	.word	0x4b742400
 8005644:	46000000 	.word	0x46000000
 8005648:	08008d78 	.word	0x08008d78

0800564c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08e      	sub	sp, #56	; 0x38
 8005650:	af00      	add	r7, sp, #0
 8005652:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800565a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800565e:	430b      	orrs	r3, r1
 8005660:	d145      	bne.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005662:	4ba7      	ldr	r3, [pc, #668]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800566e:	4ba4      	ldr	r3, [pc, #656]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d108      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005682:	d104      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
 800568a:	f001 b8fc 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800568e:	4b9c      	ldr	r3, [pc, #624]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800569c:	d114      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a4:	d110      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80056a6:	4b96      	ldr	r3, [pc, #600]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80056a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056b4:	d103      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80056b6:	23fa      	movs	r3, #250	; 0xfa
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80056ba:	f001 b8e4 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80056be:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80056c2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80056c4:	f001 b8df 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80056c8:	4b8d      	ldr	r3, [pc, #564]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056d4:	d107      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056dc:	d103      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80056de:	4b89      	ldr	r3, [pc, #548]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
 80056e2:	f001 b8d0 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ea:	f001 b8cc 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80056ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80056f6:	430b      	orrs	r3, r1
 80056f8:	d151      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80056fa:	4b81      	ldr	r3, [pc, #516]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80056fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005700:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005704:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	2b80      	cmp	r3, #128	; 0x80
 800570a:	d035      	beq.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	d841      	bhi.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	2b60      	cmp	r3, #96	; 0x60
 8005716:	d02a      	beq.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	2b60      	cmp	r3, #96	; 0x60
 800571c:	d83b      	bhi.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	2b40      	cmp	r3, #64	; 0x40
 8005722:	d009      	beq.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	2b40      	cmp	r3, #64	; 0x40
 8005728:	d835      	bhi.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00c      	beq.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	2b20      	cmp	r3, #32
 8005734:	d012      	beq.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005736:	e02e      	b.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff fb53 	bl	8004de8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005746:	f001 b89e 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800574a:	f107 0318 	add.w	r3, r7, #24
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fcb0 	bl	80050b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005758:	f001 b895 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800575c:	f107 030c 	add.w	r3, r7, #12
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fe0d 	bl	8005380 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800576a:	f001 b88c 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800576e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005772:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005774:	f001 b887 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005778:	4b61      	ldr	r3, [pc, #388]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005784:	d103      	bne.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005786:	4b60      	ldr	r3, [pc, #384]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800578a:	f001 b87c 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005792:	f001 b878 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800579a:	f001 b874 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800579e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a2:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80057a6:	430b      	orrs	r3, r1
 80057a8:	d158      	bne.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80057aa:	4b55      	ldr	r3, [pc, #340]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80057ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057b4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057bc:	d03b      	beq.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c4:	d846      	bhi.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057cc:	d02e      	beq.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d4:	d83e      	bhi.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057dc:	d00b      	beq.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e4:	d836      	bhi.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00d      	beq.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f2:	d012      	beq.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80057f4:	e02e      	b.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff faf4 	bl	8004de8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005804:	f001 b83f 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005808:	f107 0318 	add.w	r3, r7, #24
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff fc51 	bl	80050b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005816:	f001 b836 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800581a:	f107 030c 	add.w	r3, r7, #12
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fdae 	bl	8005380 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005828:	f001 b82d 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800582c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005832:	f001 b828 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005836:	4b32      	ldr	r3, [pc, #200]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005842:	d103      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005844:	4b30      	ldr	r3, [pc, #192]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005846:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005848:	f001 b81d 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005850:	f001 b819 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005858:	f001 b815 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800585c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005860:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005864:	430b      	orrs	r3, r1
 8005866:	d126      	bne.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005868:	4b25      	ldr	r3, [pc, #148]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800586a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800586e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005872:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005874:	4b22      	ldr	r3, [pc, #136]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005880:	d106      	bne.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	2b00      	cmp	r3, #0
 8005886:	d103      	bne.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8005888:	4b1f      	ldr	r3, [pc, #124]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
 800588c:	f000 bffb 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005890:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589c:	d107      	bne.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a4:	d103      	bne.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80058a6:	4b19      	ldr	r3, [pc, #100]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
 80058aa:	f000 bfec 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
 80058b2:	f000 bfe8 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80058b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ba:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80058be:	430b      	orrs	r3, r1
 80058c0:	d164      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80058c2:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058c8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80058cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80058d4:	d03d      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80058dc:	d852      	bhi.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058e4:	d014      	beq.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ec:	d84a      	bhi.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01f      	beq.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058fa:	d012      	beq.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80058fc:	e042      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80058fe:	bf00      	nop
 8005900:	46020c00 	.word	0x46020c00
 8005904:	0007a120 	.word	0x0007a120
 8005908:	00f42400 	.word	0x00f42400
 800590c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff fa67 	bl	8004de8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800591e:	f000 bfb2 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005922:	f107 0318 	add.w	r3, r7, #24
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff fbc4 	bl	80050b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005930:	f000 bfa9 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005934:	4bab      	ldr	r3, [pc, #684]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800593c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005940:	d103      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8005942:	4ba9      	ldr	r3, [pc, #676]	; (8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005946:	f000 bf9e 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800594e:	f000 bf9a 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005952:	4ba4      	ldr	r3, [pc, #656]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800595e:	4ba1      	ldr	r3, [pc, #644]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	0e1b      	lsrs	r3, r3, #24
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800596a:	4b9e      	ldr	r3, [pc, #632]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800596c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005970:	041b      	lsls	r3, r3, #16
 8005972:	0e1b      	lsrs	r3, r3, #24
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	4a9c      	ldr	r2, [pc, #624]	; (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800597a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005980:	f000 bf81 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005988:	f000 bf7d 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800598c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005990:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005994:	430b      	orrs	r3, r1
 8005996:	d175      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005998:	4b92      	ldr	r3, [pc, #584]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800599a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800599e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a2:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d15b      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80059aa:	4b8e      	ldr	r3, [pc, #568]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80059ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059b0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80059b4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80059bc:	d034      	beq.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80059c4:	d849      	bhi.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059cc:	d00b      	beq.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059d4:	d841      	bhi.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d016      	beq.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059e2:	d009      	beq.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80059e4:	e039      	b.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff f9fc 	bl	8004de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80059f4:	f000 bf47 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059f8:	f107 0318 	add.w	r3, r7, #24
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff fb59 	bl	80050b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005a06:	f000 bf3e 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005a0a:	4b76      	ldr	r3, [pc, #472]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a16:	d103      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8005a18:	4b73      	ldr	r3, [pc, #460]	; (8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005a1c:	f000 bf33 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005a24:	f000 bf2f 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a28:	4b6e      	ldr	r3, [pc, #440]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8005a34:	4b6b      	ldr	r3, [pc, #428]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	0e1b      	lsrs	r3, r3, #24
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	e006      	b.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8005a40:	4b68      	ldr	r3, [pc, #416]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	0e1b      	lsrs	r3, r3, #24
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	4a67      	ldr	r2, [pc, #412]	; (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005a56:	f000 bf16 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005a5e:	f000 bf12 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a68:	d108      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff f9ba 	bl	8004de8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
 8005a78:	f000 bf05 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a80:	f000 bf01 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a88:	1e51      	subs	r1, r2, #1
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	d136      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005a8e:	4b55      	ldr	r3, [pc, #340]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005aa0:	f7fe fb34 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 8005aa4:	6378      	str	r0, [r7, #52]	; 0x34
 8005aa6:	f000 beee 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d104      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005ab0:	f7fe f9f6 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8005ab4:	6378      	str	r0, [r7, #52]	; 0x34
 8005ab6:	f000 bee6 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005aba:	4b4a      	ldr	r3, [pc, #296]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d103      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8005ace:	4b48      	ldr	r3, [pc, #288]	; (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad2:	f000 bed8 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005ad6:	4b43      	ldr	r3, [pc, #268]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d107      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d104      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8005aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
 8005af0:	f000 bec9 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
 8005af8:	f000 bec5 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b00:	1e91      	subs	r1, r2, #2
 8005b02:	430b      	orrs	r3, r1
 8005b04:	d136      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005b06:	4b37      	ldr	r3, [pc, #220]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b0c:	f003 030c 	and.w	r3, r3, #12
 8005b10:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005b18:	f7fe fae4 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8005b1c:	6378      	str	r0, [r7, #52]	; 0x34
 8005b1e:	f000 beb2 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d104      	bne.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005b28:	f7fe f9ba 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8005b2c:	6378      	str	r0, [r7, #52]	; 0x34
 8005b2e:	f000 beaa 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005b32:	4b2c      	ldr	r3, [pc, #176]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3e:	d106      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d103      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8005b46:	4b2a      	ldr	r3, [pc, #168]	; (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005b48:	637b      	str	r3, [r7, #52]	; 0x34
 8005b4a:	f000 be9c 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005b4e:	4b25      	ldr	r3, [pc, #148]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d107      	bne.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	2b0c      	cmp	r3, #12
 8005b60:	d104      	bne.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8005b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b66:	637b      	str	r3, [r7, #52]	; 0x34
 8005b68:	f000 be8d 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b70:	f000 be89 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b78:	1f11      	subs	r1, r2, #4
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	d13e      	bne.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005b7e:	4b19      	ldr	r3, [pc, #100]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b88:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d104      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fe faa8 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8005b94:	6378      	str	r0, [r7, #52]	; 0x34
 8005b96:	f000 be76 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d104      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005ba0:	f7fe f97e 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8005ba4:	6378      	str	r0, [r7, #52]	; 0x34
 8005ba6:	f000 be6e 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005baa:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb6:	d106      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d103      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc2:	f000 be60 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d10f      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	2b30      	cmp	r3, #48	; 0x30
 8005bd8:	d10c      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8005bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
 8005be0:	f000 be51 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005be4:	46020c00 	.word	0x46020c00
 8005be8:	02dc6c00 	.word	0x02dc6c00
 8005bec:	08008d78 	.word	0x08008d78
 8005bf0:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf8:	f000 be45 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c00:	f1a2 0108 	sub.w	r1, r2, #8
 8005c04:	430b      	orrs	r3, r1
 8005c06:	d136      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005c08:	4b9f      	ldr	r3, [pc, #636]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c12:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005c1a:	f7fe fa63 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8005c1e:	6378      	str	r0, [r7, #52]	; 0x34
 8005c20:	f000 be31 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	2b40      	cmp	r3, #64	; 0x40
 8005c28:	d104      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005c2a:	f7fe f939 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8005c2e:	6378      	str	r0, [r7, #52]	; 0x34
 8005c30:	f000 be29 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005c34:	4b94      	ldr	r3, [pc, #592]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c40:	d106      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	2b80      	cmp	r3, #128	; 0x80
 8005c46:	d103      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8005c48:	4b90      	ldr	r3, [pc, #576]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4c:	f000 be1b 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005c50:	4b8d      	ldr	r3, [pc, #564]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	2bc0      	cmp	r3, #192	; 0xc0
 8005c62:	d104      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8005c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c68:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6a:	f000 be0c 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
 8005c72:	f000 be08 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c7a:	f1a2 0110 	sub.w	r1, r2, #16
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	d139      	bne.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005c82:	4b81      	ldr	r3, [pc, #516]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005c94:	f7fe fa26 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8005c98:	6378      	str	r0, [r7, #52]	; 0x34
 8005c9a:	f000 bdf4 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca4:	d104      	bne.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005ca6:	f7fe f8fb 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8005caa:	6378      	str	r0, [r7, #52]	; 0x34
 8005cac:	f000 bdeb 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005cb0:	4b75      	ldr	r3, [pc, #468]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cbc:	d107      	bne.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc4:	d103      	bne.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8005cc6:	4b71      	ldr	r3, [pc, #452]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cca:	f000 bddc 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005cce:	4b6e      	ldr	r3, [pc, #440]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d108      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce2:	d104      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8005ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cea:	f000 bdcc 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf2:	f000 bdc8 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cfa:	f1a2 0120 	sub.w	r1, r2, #32
 8005cfe:	430b      	orrs	r3, r1
 8005d00:	d158      	bne.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005d02:	4b61      	ldr	r3, [pc, #388]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005d14:	f7fe fa0e 	bl	8004134 <HAL_RCC_GetPCLK3Freq>
 8005d18:	6378      	str	r0, [r7, #52]	; 0x34
 8005d1a:	f000 bdb4 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d104      	bne.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d24:	f7fe f8bc 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8005d28:	6378      	str	r0, [r7, #52]	; 0x34
 8005d2a:	f000 bdac 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005d2e:	4b56      	ldr	r3, [pc, #344]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3a:	d106      	bne.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d103      	bne.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8005d42:	4b52      	ldr	r3, [pc, #328]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
 8005d46:	f000 bd9e 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005d4a:	4b4f      	ldr	r3, [pc, #316]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d107      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d104      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8005d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
 8005d64:	f000 bd8f 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005d68:	4b47      	ldr	r3, [pc, #284]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d11b      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d118      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d7a:	4b43      	ldr	r3, [pc, #268]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005d86:	4b40      	ldr	r3, [pc, #256]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	0e1b      	lsrs	r3, r3, #24
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	e006      	b.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8005d92:	4b3d      	ldr	r3, [pc, #244]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	0e1b      	lsrs	r3, r3, #24
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	4a3b      	ldr	r2, [pc, #236]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da6:	637b      	str	r3, [r7, #52]	; 0x34
 8005da8:	f000 bd6d 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
 8005db0:	f000 bd69 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005db8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	d169      	bne.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005dc0:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005dc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dc6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005dca:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd2:	d104      	bne.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005dd4:	f7fe f864 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8005dd8:	6378      	str	r0, [r7, #52]	; 0x34
 8005dda:	f000 bd54 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de4:	d108      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005de6:	f107 0318 	add.w	r3, r7, #24
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff f962 	bl	80050b4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
 8005df4:	f000 bd47 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d104      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005dfe:	f7fe f957 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 8005e02:	6378      	str	r0, [r7, #52]	; 0x34
 8005e04:	f000 bd3f 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005e0e:	d118      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8005e10:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005e1c:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	0f1b      	lsrs	r3, r3, #28
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	e006      	b.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8005e28:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e2e:	041b      	lsls	r3, r3, #16
 8005e30:	0f1b      	lsrs	r3, r3, #28
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3e:	f000 bd22 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005e42:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e4e:	d107      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e56:	d103      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8005e58:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e5c:	f000 bd13 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005e60:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e74:	d103      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7a:	f000 bd04 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
 8005e82:	f000 bd00 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005e86:	bf00      	nop
 8005e88:	46020c00 	.word	0x46020c00
 8005e8c:	00f42400 	.word	0x00f42400
 8005e90:	08008d78 	.word	0x08008d78
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e98:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	d14e      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005ea0:	4ba8      	ldr	r3, [pc, #672]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005ea2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d841      	bhi.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ef1 	.word	0x08005ef1
 8005ebc:	08005ecd 	.word	0x08005ecd
 8005ec0:	08005edf 	.word	0x08005edf
 8005ec4:	08005efb 	.word	0x08005efb
 8005ec8:	08005f05 	.word	0x08005f05
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe ff89 	bl	8004de8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eda:	f000 bcd4 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ede:	f107 030c 	add.w	r3, r7, #12
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff fa4c 	bl	8005380 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eec:	f000 bccb 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005ef0:	f7fe f8de 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 8005ef4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ef6:	f000 bcc6 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005efa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005efe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f00:	f000 bcc1 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f04:	4b8f      	ldr	r3, [pc, #572]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8005f10:	4b8c      	ldr	r3, [pc, #560]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	0e1b      	lsrs	r3, r3, #24
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	e006      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005f1c:	4b89      	ldr	r3, [pc, #548]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f22:	041b      	lsls	r3, r3, #16
 8005f24:	0e1b      	lsrs	r3, r3, #24
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	4a87      	ldr	r2, [pc, #540]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f32:	f000 bca8 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f3a:	f000 bca4 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f42:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8005f46:	430b      	orrs	r3, r1
 8005f48:	d15d      	bne.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005f4a:	4b7e      	ldr	r3, [pc, #504]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f50:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005f54:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f5c:	d036      	beq.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f64:	d84b      	bhi.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f6c:	d029      	beq.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f74:	d843      	bhi.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f7c:	d013      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f84:	d83b      	bhi.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d015      	beq.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f92:	d134      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe ff25 	bl	8004de8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fa2:	f000 bc70 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fa6:	f107 030c 	add.w	r3, r7, #12
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff f9e8 	bl	8005380 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fb4:	f000 bc67 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005fb8:	f7fe f87a 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 8005fbc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005fbe:	f000 bc62 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005fc2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005fc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fc8:	f000 bc5d 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005fcc:	4b5d      	ldr	r3, [pc, #372]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8005fd8:	4b5a      	ldr	r3, [pc, #360]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	0e1b      	lsrs	r3, r3, #24
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	e006      	b.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8005fe4:	4b57      	ldr	r3, [pc, #348]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	0e1b      	lsrs	r3, r3, #24
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	4a55      	ldr	r2, [pc, #340]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ffa:	f000 bc44 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006002:	f000 bc40 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800600a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800600e:	430b      	orrs	r3, r1
 8006010:	d14a      	bne.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006012:	4b4c      	ldr	r3, [pc, #304]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006018:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800601c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006024:	f7fe f85e 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8006028:	6378      	str	r0, [r7, #52]	; 0x34
 800602a:	f000 bc2c 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006034:	d104      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006036:	f7fd ff33 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 800603a:	6378      	str	r0, [r7, #52]	; 0x34
 800603c:	f000 bc23 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006040:	4b40      	ldr	r3, [pc, #256]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604c:	d107      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006054:	d103      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8006056:	4b3d      	ldr	r3, [pc, #244]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
 800605a:	f000 bc14 	b.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800605e:	4b39      	ldr	r3, [pc, #228]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b20      	cmp	r3, #32
 8006068:	d11b      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006070:	d117      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006072:	4b34      	ldr	r3, [pc, #208]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800607e:	4b31      	ldr	r3, [pc, #196]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	0e1b      	lsrs	r3, r3, #24
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	e006      	b.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800608a:	4b2e      	ldr	r3, [pc, #184]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800608c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	0e1b      	lsrs	r3, r3, #24
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	4a2b      	ldr	r2, [pc, #172]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800609a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
 80060a0:	e3f1      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
 80060a6:	e3ee      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80060a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ac:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80060b0:	430b      	orrs	r3, r1
 80060b2:	d14d      	bne.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80060b4:	4b23      	ldr	r3, [pc, #140]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80060be:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d103      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80060c6:	f7fe f80d 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 80060ca:	6378      	str	r0, [r7, #52]	; 0x34
 80060cc:	e3db      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d4:	d103      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80060d6:	f7fd fee3 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80060da:	6378      	str	r0, [r7, #52]	; 0x34
 80060dc:	e3d3      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80060de:	4b19      	ldr	r3, [pc, #100]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ea:	d106      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f2:	d102      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 80060f4:	4b15      	ldr	r3, [pc, #84]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80060f6:	637b      	str	r3, [r7, #52]	; 0x34
 80060f8:	e3c5      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80060fa:	4b12      	ldr	r3, [pc, #72]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b20      	cmp	r3, #32
 8006104:	d11b      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800610c:	d117      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800610e:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800611a:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	0e1b      	lsrs	r3, r3, #24
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	e006      	b.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006126:	4b07      	ldr	r3, [pc, #28]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800612c:	041b      	lsls	r3, r3, #16
 800612e:	0e1b      	lsrs	r3, r3, #24
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	4a04      	ldr	r2, [pc, #16]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800613a:	637b      	str	r3, [r7, #52]	; 0x34
 800613c:	e3a3      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	637b      	str	r3, [r7, #52]	; 0x34
 8006142:	e3a0      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006144:	46020c00 	.word	0x46020c00
 8006148:	08008d78 	.word	0x08008d78
 800614c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006154:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006158:	430b      	orrs	r3, r1
 800615a:	d148      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800615c:	4b9d      	ldr	r3, [pc, #628]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800615e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006162:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006166:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	2bc0      	cmp	r3, #192	; 0xc0
 800616c:	d024      	beq.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	2bc0      	cmp	r3, #192	; 0xc0
 8006172:	d839      	bhi.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	2b80      	cmp	r3, #128	; 0x80
 8006178:	d00d      	beq.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	2b80      	cmp	r3, #128	; 0x80
 800617e:	d833      	bhi.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d011      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800618c:	e02c      	b.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800618e:	f7fd ffd1 	bl	8004134 <HAL_RCC_GetPCLK3Freq>
 8006192:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006194:	e377      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006196:	4b8f      	ldr	r3, [pc, #572]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a2:	d102      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 80061a4:	4b8c      	ldr	r3, [pc, #560]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061a8:	e36d      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061ae:	e36a      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80061b0:	f7fd fe76 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80061b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80061b6:	e366      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80061b8:	4b86      	ldr	r3, [pc, #536]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80061c4:	4b83      	ldr	r3, [pc, #524]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	0f1b      	lsrs	r3, r3, #28
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	e006      	b.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 80061d0:	4b80      	ldr	r3, [pc, #512]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80061d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061d6:	041b      	lsls	r3, r3, #16
 80061d8:	0f1b      	lsrs	r3, r3, #28
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	4a7f      	ldr	r2, [pc, #508]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80061e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061e6:	e34e      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061ec:	e34b      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80061ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f2:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80061f6:	430b      	orrs	r3, r1
 80061f8:	d147      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80061fa:	4b76      	ldr	r3, [pc, #472]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80061fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006200:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006204:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	2b00      	cmp	r3, #0
 800620a:	d103      	bne.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800620c:	f7fd ff6a 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8006210:	6378      	str	r0, [r7, #52]	; 0x34
 8006212:	e338      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800621a:	d103      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800621c:	f7fd fe40 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8006220:	6378      	str	r0, [r7, #52]	; 0x34
 8006222:	e330      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006224:	4b6b      	ldr	r3, [pc, #428]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006230:	d106      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006238:	d102      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800623a:	4b67      	ldr	r3, [pc, #412]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800623c:	637b      	str	r3, [r7, #52]	; 0x34
 800623e:	e322      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006240:	4b64      	ldr	r3, [pc, #400]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b20      	cmp	r3, #32
 800624a:	d11b      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006252:	d117      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006254:	4b5f      	ldr	r3, [pc, #380]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006260:	4b5c      	ldr	r3, [pc, #368]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	0e1b      	lsrs	r3, r3, #24
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	e006      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800626c:	4b59      	ldr	r3, [pc, #356]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800626e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	0e1b      	lsrs	r3, r3, #24
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	4a58      	ldr	r2, [pc, #352]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800627c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006280:	637b      	str	r3, [r7, #52]	; 0x34
 8006282:	e300      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	637b      	str	r3, [r7, #52]	; 0x34
 8006288:	e2fd      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800628a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800628e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006292:	430b      	orrs	r3, r1
 8006294:	d15b      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006296:	4b4f      	ldr	r3, [pc, #316]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800629c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d117      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062a8:	4b4a      	ldr	r3, [pc, #296]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 80062b4:	4b47      	ldr	r3, [pc, #284]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	0e1b      	lsrs	r3, r3, #24
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	e006      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 80062c0:	4b44      	ldr	r3, [pc, #272]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80062c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062c6:	041b      	lsls	r3, r3, #16
 80062c8:	0e1b      	lsrs	r3, r3, #24
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	4a43      	ldr	r2, [pc, #268]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80062d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d4:	637b      	str	r3, [r7, #52]	; 0x34
 80062d6:	e2d6      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80062d8:	4b3e      	ldr	r3, [pc, #248]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80062da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062e6:	d112      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ee:	d10e      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062f0:	4b38      	ldr	r3, [pc, #224]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80062f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062fe:	d102      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8006300:	23fa      	movs	r3, #250	; 0xfa
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006304:	e2bf      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006306:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800630c:	e2bb      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800630e:	4b31      	ldr	r3, [pc, #196]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800631a:	d106      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006322:	d102      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8006324:	4b2c      	ldr	r3, [pc, #176]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006326:	637b      	str	r3, [r7, #52]	; 0x34
 8006328:	e2ad      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800632a:	4b2a      	ldr	r3, [pc, #168]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800632c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b02      	cmp	r3, #2
 8006336:	d107      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800633e:	d103      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8006340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
 8006346:	e29e      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	637b      	str	r3, [r7, #52]	; 0x34
 800634c:	e29b      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800634e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006352:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006356:	430b      	orrs	r3, r1
 8006358:	d162      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800635a:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800635c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006360:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006364:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	2b00      	cmp	r3, #0
 800636a:	d117      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800636c:	4b19      	ldr	r3, [pc, #100]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8006378:	4b16      	ldr	r3, [pc, #88]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	0e1b      	lsrs	r3, r3, #24
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	e006      	b.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006384:	4b13      	ldr	r3, [pc, #76]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800638a:	041b      	lsls	r3, r3, #16
 800638c:	0e1b      	lsrs	r3, r3, #24
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	4a12      	ldr	r2, [pc, #72]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
 800639a:	e274      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800639c:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800639e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063aa:	d119      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b2:	d115      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80063b4:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80063b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063c2:	d102      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 80063c4:	23fa      	movs	r3, #250	; 0xfa
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80063c8:	e25d      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80063ca:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80063d0:	e259      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80063d2:	bf00      	nop
 80063d4:	46020c00 	.word	0x46020c00
 80063d8:	00f42400 	.word	0x00f42400
 80063dc:	08008d78 	.word	0x08008d78
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80063e0:	4b9d      	ldr	r3, [pc, #628]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ec:	d106      	bne.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f4:	d102      	bne.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 80063f6:	4b99      	ldr	r3, [pc, #612]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80063f8:	637b      	str	r3, [r7, #52]	; 0x34
 80063fa:	e244      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80063fc:	4b96      	ldr	r3, [pc, #600]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80063fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b02      	cmp	r3, #2
 8006408:	d107      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006410:	d103      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8006412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006416:	637b      	str	r3, [r7, #52]	; 0x34
 8006418:	e235      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	637b      	str	r3, [r7, #52]	; 0x34
 800641e:	e232      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006424:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006428:	430b      	orrs	r3, r1
 800642a:	d147      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800642c:	4b8a      	ldr	r3, [pc, #552]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800642e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006432:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006436:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	2b00      	cmp	r3, #0
 800643c:	d103      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800643e:	f7fd fe51 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8006442:	6378      	str	r0, [r7, #52]	; 0x34
 8006444:	e21f      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006446:	4b84      	ldr	r3, [pc, #528]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800644c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006454:	d112      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800645c:	d10e      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800645e:	4b7e      	ldr	r3, [pc, #504]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800646c:	d102      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800646e:	23fa      	movs	r3, #250	; 0xfa
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006472:	e208      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006474:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800647a:	e204      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800647c:	4b76      	ldr	r3, [pc, #472]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006488:	d106      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006490:	d102      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8006492:	4b72      	ldr	r3, [pc, #456]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006494:	637b      	str	r3, [r7, #52]	; 0x34
 8006496:	e1f6      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006498:	4b6f      	ldr	r3, [pc, #444]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800649a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d107      	bne.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80064ac:	d103      	bne.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 80064ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b2:	637b      	str	r3, [r7, #52]	; 0x34
 80064b4:	e1e7      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ba:	e1e4      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80064bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c0:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80064c4:	430b      	orrs	r3, r1
 80064c6:	d12d      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80064c8:	4b63      	ldr	r3, [pc, #396]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80064ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ce:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80064d2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80064d4:	4b60      	ldr	r3, [pc, #384]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064e0:	d105      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d102      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 80064e8:	4b5c      	ldr	r3, [pc, #368]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
 80064ec:	e1cb      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064f4:	d107      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fc74 	bl	8004de8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	637b      	str	r3, [r7, #52]	; 0x34
 8006504:	e1bf      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800650c:	d107      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800650e:	f107 0318 	add.w	r3, r7, #24
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fdce 	bl	80050b4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
 800651c:	e1b3      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
 8006522:	e1b0      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006528:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800652c:	430b      	orrs	r3, r1
 800652e:	d14d      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006530:	4b49      	ldr	r3, [pc, #292]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006536:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800653a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006542:	d028      	beq.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800654a:	d83c      	bhi.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006552:	d013      	beq.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800655a:	d834      	bhi.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	2b00      	cmp	r3, #0
 8006560:	d004      	beq.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006568:	d004      	beq.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800656a:	e02c      	b.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800656c:	f7fd fdce 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 8006570:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006572:	e188      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006574:	f7fd fc94 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8006578:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800657a:	e184      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800657c:	4b36      	ldr	r3, [pc, #216]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006588:	d102      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800658a:	4b34      	ldr	r3, [pc, #208]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800658e:	e17a      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006594:	e177      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006596:	4b30      	ldr	r3, [pc, #192]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d005      	beq.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80065a2:	4b2d      	ldr	r3, [pc, #180]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	0e1b      	lsrs	r3, r3, #24
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	e006      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80065ae:	4b2a      	ldr	r3, [pc, #168]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80065b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065b4:	041b      	lsls	r3, r3, #16
 80065b6:	0e1b      	lsrs	r3, r3, #24
 80065b8:	f003 030f 	and.w	r3, r3, #15
 80065bc:	4a28      	ldr	r2, [pc, #160]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 80065be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065c4:	e15f      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ca:	e15c      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80065cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80065d4:	430b      	orrs	r3, r1
 80065d6:	d154      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80065d8:	4b1f      	ldr	r3, [pc, #124]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80065da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065e2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065ea:	d028      	beq.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065f2:	d843      	bhi.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065fa:	d013      	beq.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006602:	d83b      	bhi.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	2b00      	cmp	r3, #0
 8006608:	d004      	beq.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006610:	d004      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006612:	e033      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006614:	f7fd fd66 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8006618:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800661a:	e134      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800661c:	f7fd fc40 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8006620:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006622:	e130      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800662c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006630:	d102      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006632:	4b0a      	ldr	r3, [pc, #40]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006636:	e126      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800663c:	e123      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800663e:	4b06      	ldr	r3, [pc, #24]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800664a:	4b03      	ldr	r3, [pc, #12]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	0e1b      	lsrs	r3, r3, #24
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	e00d      	b.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8006656:	bf00      	nop
 8006658:	46020c00 	.word	0x46020c00
 800665c:	00f42400 	.word	0x00f42400
 8006660:	08008d78 	.word	0x08008d78
 8006664:	4b8a      	ldr	r3, [pc, #552]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800666a:	041b      	lsls	r3, r3, #16
 800666c:	0e1b      	lsrs	r3, r3, #24
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	4a88      	ldr	r2, [pc, #544]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800667a:	e104      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006680:	e101      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006686:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800668a:	430b      	orrs	r3, r1
 800668c:	d16e      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800668e:	4b80      	ldr	r3, [pc, #512]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006694:	f003 0318 	and.w	r3, r3, #24
 8006698:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	2b18      	cmp	r3, #24
 800669e:	d862      	bhi.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80066a0:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	0800670d 	.word	0x0800670d
 80066ac:	08006767 	.word	0x08006767
 80066b0:	08006767 	.word	0x08006767
 80066b4:	08006767 	.word	0x08006767
 80066b8:	08006767 	.word	0x08006767
 80066bc:	08006767 	.word	0x08006767
 80066c0:	08006767 	.word	0x08006767
 80066c4:	08006767 	.word	0x08006767
 80066c8:	08006715 	.word	0x08006715
 80066cc:	08006767 	.word	0x08006767
 80066d0:	08006767 	.word	0x08006767
 80066d4:	08006767 	.word	0x08006767
 80066d8:	08006767 	.word	0x08006767
 80066dc:	08006767 	.word	0x08006767
 80066e0:	08006767 	.word	0x08006767
 80066e4:	08006767 	.word	0x08006767
 80066e8:	0800671d 	.word	0x0800671d
 80066ec:	08006767 	.word	0x08006767
 80066f0:	08006767 	.word	0x08006767
 80066f4:	08006767 	.word	0x08006767
 80066f8:	08006767 	.word	0x08006767
 80066fc:	08006767 	.word	0x08006767
 8006700:	08006767 	.word	0x08006767
 8006704:	08006767 	.word	0x08006767
 8006708:	08006737 	.word	0x08006737
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800670c:	f7fd fd12 	bl	8004134 <HAL_RCC_GetPCLK3Freq>
 8006710:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006712:	e0b8      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006714:	f7fd fbc4 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8006718:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800671a:	e0b4      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800671c:	4b5c      	ldr	r3, [pc, #368]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006728:	d102      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800672a:	4b5b      	ldr	r3, [pc, #364]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800672c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800672e:	e0aa      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006734:	e0a7      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006736:	4b56      	ldr	r3, [pc, #344]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8006742:	4b53      	ldr	r3, [pc, #332]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	0e1b      	lsrs	r3, r3, #24
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	e006      	b.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800674e:	4b50      	ldr	r3, [pc, #320]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006754:	041b      	lsls	r3, r3, #16
 8006756:	0e1b      	lsrs	r3, r3, #24
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	4a4d      	ldr	r2, [pc, #308]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800675e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006764:	e08f      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800676a:	e08c      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800676c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006770:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006774:	430b      	orrs	r3, r1
 8006776:	d14c      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006778:	4b45      	ldr	r3, [pc, #276]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800677a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800677e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006782:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006786:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800678a:	d013      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006792:	d83b      	bhi.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800679a:	d013      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067a2:	d833      	bhi.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d014      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067b0:	d014      	beq.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80067b2:	e02b      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067b4:	f107 0318 	add.w	r3, r7, #24
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe fc7b 	bl	80050b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067c2:	e060      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe fb0d 	bl	8004de8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067d2:	e058      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80067d4:	f7fd fb64 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80067d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80067da:	e054      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067dc:	4b2c      	ldr	r3, [pc, #176]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80067e8:	4b29      	ldr	r3, [pc, #164]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	0e1b      	lsrs	r3, r3, #24
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	e006      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80067f4:	4b26      	ldr	r3, [pc, #152]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80067f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067fa:	041b      	lsls	r3, r3, #16
 80067fc:	0e1b      	lsrs	r3, r3, #24
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	4a24      	ldr	r2, [pc, #144]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800680a:	e03c      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006810:	e039      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006816:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800681a:	430b      	orrs	r3, r1
 800681c:	d131      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800681e:	4b1c      	ldr	r3, [pc, #112]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006828:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800682a:	4b19      	ldr	r3, [pc, #100]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800682c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b02      	cmp	r3, #2
 8006836:	d106      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	2b00      	cmp	r3, #0
 800683c:	d103      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800683e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
 8006844:	e01f      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006846:	4b12      	ldr	r3, [pc, #72]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800684c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006854:	d112      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800685c:	d10e      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800685e:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800686c:	d102      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800686e:	23fa      	movs	r3, #250	; 0xfa
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006872:	e008      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006874:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800687a:	e004      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	637b      	str	r3, [r7, #52]	; 0x34
 8006880:	e001      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8006886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006888:	4618      	mov	r0, r3
 800688a:	3738      	adds	r7, #56	; 0x38
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	46020c00 	.word	0x46020c00
 8006894:	08008d78 	.word	0x08008d78
 8006898:	00f42400 	.word	0x00f42400

0800689c <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08a      	sub	sp, #40	; 0x28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_initstruct;
  FlagStatus       pwrclkchanged = RESET;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FlagStatus       backupchanged = RESET;
 80068aa:	2300      	movs	r3, #0
 80068ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 80068b0:	4b31      	ldr	r3, [pc, #196]	; (8006978 <HAL_RCCEx_EnableLSCO+0xdc>)
 80068b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068b6:	4a30      	ldr	r2, [pc, #192]	; (8006978 <HAL_RCCEx_EnableLSCO+0xdc>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80068c0:	4b2d      	ldr	r3, [pc, #180]	; (8006978 <HAL_RCCEx_EnableLSCO+0xdc>)
 80068c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  gpio_initstruct.Pin = LSCO_PIN;
 80068ce:	2304      	movs	r3, #4
 80068d0:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Mode = GPIO_MODE_ANALOG;
 80068d2:	2303      	movs	r3, #3
 80068d4:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068d6:	2302      	movs	r3, #2
 80068d8:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull = GPIO_NOPULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &gpio_initstruct);
 80068de:	f107 0310 	add.w	r3, r7, #16
 80068e2:	4619      	mov	r1, r3
 80068e4:	4825      	ldr	r0, [pc, #148]	; (800697c <HAL_RCCEx_EnableLSCO+0xe0>)
 80068e6:	f7fb fee9 	bl	80026bc <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ea:	4b23      	ldr	r3, [pc, #140]	; (8006978 <HAL_RCCEx_EnableLSCO+0xdc>)
 80068ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d111      	bne.n	800691c <HAL_RCCEx_EnableLSCO+0x80>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80068f8:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <HAL_RCCEx_EnableLSCO+0xdc>)
 80068fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068fe:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <HAL_RCCEx_EnableLSCO+0xdc>)
 8006900:	f043 0304 	orr.w	r3, r3, #4
 8006904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006908:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <HAL_RCCEx_EnableLSCO+0xdc>)
 800690a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	60bb      	str	r3, [r7, #8]
 8006914:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8006916:	2301      	movs	r3, #1
 8006918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800691c:	4b18      	ldr	r3, [pc, #96]	; (8006980 <HAL_RCCEx_EnableLSCO+0xe4>)
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d104      	bne.n	8006932 <HAL_RCCEx_EnableLSCO+0x96>
  {
    HAL_PWR_EnableBkUpAccess();
 8006928:	f7fc f918 	bl	8002b5c <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8006932:	4b11      	ldr	r3, [pc, #68]	; (8006978 <HAL_RCCEx_EnableLSCO+0xdc>)
 8006934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006938:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4313      	orrs	r3, r2
 8006940:	4a0d      	ldr	r2, [pc, #52]	; (8006978 <HAL_RCCEx_EnableLSCO+0xdc>)
 8006942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006946:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  if (backupchanged == SET)
 800694a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <HAL_RCCEx_EnableLSCO+0xba>
  {
    HAL_PWR_DisableBkUpAccess();
 8006952:	f7fc f913 	bl	8002b7c <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 8006956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800695a:	2b01      	cmp	r3, #1
 800695c:	d107      	bne.n	800696e <HAL_RCCEx_EnableLSCO+0xd2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 800695e:	4b06      	ldr	r3, [pc, #24]	; (8006978 <HAL_RCCEx_EnableLSCO+0xdc>)
 8006960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006964:	4a04      	ldr	r2, [pc, #16]	; (8006978 <HAL_RCCEx_EnableLSCO+0xdc>)
 8006966:	f023 0304 	bic.w	r3, r3, #4
 800696a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
}
 800696e:	bf00      	nop
 8006970:	3728      	adds	r7, #40	; 0x28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	46020c00 	.word	0x46020c00
 800697c:	42020000 	.word	0x42020000
 8006980:	46020800 	.word	0x46020800

08006984 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800698c:	4b47      	ldr	r3, [pc, #284]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a46      	ldr	r2, [pc, #280]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006992:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006996:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006998:	f7fb fa54 	bl	8001e44 <HAL_GetTick>
 800699c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800699e:	e008      	b.n	80069b2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069a0:	f7fb fa50 	bl	8001e44 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e077      	b.n	8006aa2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069b2:	4b3e      	ldr	r3, [pc, #248]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80069be:	4b3b      	ldr	r3, [pc, #236]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6811      	ldr	r1, [r2, #0]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6852      	ldr	r2, [r2, #4]
 80069d2:	3a01      	subs	r2, #1
 80069d4:	0212      	lsls	r2, r2, #8
 80069d6:	430a      	orrs	r2, r1
 80069d8:	4934      	ldr	r1, [pc, #208]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 80069de:	4b33      	ldr	r3, [pc, #204]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 80069e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e2:	4b33      	ldr	r3, [pc, #204]	; (8006ab0 <RCCEx_PLL2_Config+0x12c>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6892      	ldr	r2, [r2, #8]
 80069ea:	3a01      	subs	r2, #1
 80069ec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	68d2      	ldr	r2, [r2, #12]
 80069f4:	3a01      	subs	r2, #1
 80069f6:	0252      	lsls	r2, r2, #9
 80069f8:	b292      	uxth	r2, r2
 80069fa:	4311      	orrs	r1, r2
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6912      	ldr	r2, [r2, #16]
 8006a00:	3a01      	subs	r2, #1
 8006a02:	0412      	lsls	r2, r2, #16
 8006a04:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006a08:	4311      	orrs	r1, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6952      	ldr	r2, [r2, #20]
 8006a0e:	3a01      	subs	r2, #1
 8006a10:	0612      	lsls	r2, r2, #24
 8006a12:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006a16:	430a      	orrs	r2, r1
 8006a18:	4924      	ldr	r1, [pc, #144]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006a1e:	4b23      	ldr	r3, [pc, #140]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a22:	f023 020c 	bic.w	r2, r3, #12
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	4920      	ldr	r1, [pc, #128]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006a30:	4b1e      	ldr	r3, [pc, #120]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	491c      	ldr	r1, [pc, #112]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006a3e:	4b1b      	ldr	r3, [pc, #108]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	4a1a      	ldr	r2, [pc, #104]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a44:	f023 0310 	bic.w	r3, r3, #16
 8006a48:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a4a:	4b18      	ldr	r3, [pc, #96]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	69d2      	ldr	r2, [r2, #28]
 8006a5a:	00d2      	lsls	r2, r2, #3
 8006a5c:	4913      	ldr	r1, [pc, #76]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006a62:	4b12      	ldr	r3, [pc, #72]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a66:	4a11      	ldr	r2, [pc, #68]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a68:	f043 0310 	orr.w	r3, r3, #16
 8006a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006a6e:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a0e      	ldr	r2, [pc, #56]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a78:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a7a:	f7fb f9e3 	bl	8001e44 <HAL_GetTick>
 8006a7e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a80:	e008      	b.n	8006a94 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a82:	f7fb f9df 	bl	8001e44 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d901      	bls.n	8006a94 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e006      	b.n	8006aa2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a94:	4b05      	ldr	r3, [pc, #20]	; (8006aac <RCCEx_PLL2_Config+0x128>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0f0      	beq.n	8006a82 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0

}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	46020c00 	.word	0x46020c00
 8006ab0:	80800000 	.word	0x80800000

08006ab4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006abc:	4b47      	ldr	r3, [pc, #284]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a46      	ldr	r2, [pc, #280]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ac8:	f7fb f9bc 	bl	8001e44 <HAL_GetTick>
 8006acc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ace:	e008      	b.n	8006ae2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ad0:	f7fb f9b8 	bl	8001e44 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e077      	b.n	8006bd2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ae2:	4b3e      	ldr	r3, [pc, #248]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f0      	bne.n	8006ad0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006aee:	4b3b      	ldr	r3, [pc, #236]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006af6:	f023 0303 	bic.w	r3, r3, #3
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6811      	ldr	r1, [r2, #0]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6852      	ldr	r2, [r2, #4]
 8006b02:	3a01      	subs	r2, #1
 8006b04:	0212      	lsls	r2, r2, #8
 8006b06:	430a      	orrs	r2, r1
 8006b08:	4934      	ldr	r1, [pc, #208]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	630b      	str	r3, [r1, #48]	; 0x30
 8006b0e:	4b33      	ldr	r3, [pc, #204]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b12:	4b33      	ldr	r3, [pc, #204]	; (8006be0 <RCCEx_PLL3_Config+0x12c>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6892      	ldr	r2, [r2, #8]
 8006b1a:	3a01      	subs	r2, #1
 8006b1c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	68d2      	ldr	r2, [r2, #12]
 8006b24:	3a01      	subs	r2, #1
 8006b26:	0252      	lsls	r2, r2, #9
 8006b28:	b292      	uxth	r2, r2
 8006b2a:	4311      	orrs	r1, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6912      	ldr	r2, [r2, #16]
 8006b30:	3a01      	subs	r2, #1
 8006b32:	0412      	lsls	r2, r2, #16
 8006b34:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006b38:	4311      	orrs	r1, r2
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	6952      	ldr	r2, [r2, #20]
 8006b3e:	3a01      	subs	r2, #1
 8006b40:	0612      	lsls	r2, r2, #24
 8006b42:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006b46:	430a      	orrs	r2, r1
 8006b48:	4924      	ldr	r1, [pc, #144]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006b4e:	4b23      	ldr	r3, [pc, #140]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	f023 020c 	bic.w	r2, r3, #12
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	4920      	ldr	r1, [pc, #128]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006b60:	4b1e      	ldr	r3, [pc, #120]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	491c      	ldr	r1, [pc, #112]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006b6e:	4b1b      	ldr	r3, [pc, #108]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b74:	f023 0310 	bic.w	r3, r3, #16
 8006b78:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b7a:	4b18      	ldr	r3, [pc, #96]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	69d2      	ldr	r2, [r2, #28]
 8006b8a:	00d2      	lsls	r2, r2, #3
 8006b8c:	4913      	ldr	r1, [pc, #76]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006b92:	4b12      	ldr	r3, [pc, #72]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b96:	4a11      	ldr	r2, [pc, #68]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006b98:	f043 0310 	orr.w	r3, r3, #16
 8006b9c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a0e      	ldr	r2, [pc, #56]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006baa:	f7fb f94b 	bl	8001e44 <HAL_GetTick>
 8006bae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bb0:	e008      	b.n	8006bc4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bb2:	f7fb f947 	bl	8001e44 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e006      	b.n	8006bd2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <RCCEx_PLL3_Config+0x128>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0f0      	beq.n	8006bb2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	46020c00 	.word	0x46020c00
 8006be0:	80800000 	.word	0x80800000

08006be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e042      	b.n	8006c7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d106      	bne.n	8006c0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7f9 ffe3 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2224      	movs	r2, #36	; 0x24
 8006c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fc22 	bl	8007470 <UART_SetConfig>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e022      	b.n	8006c7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fdb8 	bl	80077b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fe3f 	bl	80078f8 <UART_CheckIdleState>
 8006c7a:	4603      	mov	r3, r0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b091      	sub	sp, #68	; 0x44
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	f040 809b 	bne.w	8006dd4 <HAL_UART_Transmit_IT+0x150>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <HAL_UART_Transmit_IT+0x26>
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e093      	b.n	8006dd6 <HAL_UART_Transmit_IT+0x152>
    }

    __HAL_LOCK(huart);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_UART_Transmit_IT+0x38>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e08c      	b.n	8006dd6 <HAL_UART_Transmit_IT+0x152>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d107      	bne.n	8006ce2 <HAL_UART_Transmit_IT+0x5e>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ce0:	609a      	str	r2, [r3, #8]
    }

    huart->pTxBuffPtr  = pData;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	88fa      	ldrh	r2, [r7, #6]
 8006cec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	88fa      	ldrh	r2, [r7, #6]
 8006cf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2221      	movs	r2, #33	; 0x21
 8006d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d16:	d12e      	bne.n	8006d76 <HAL_UART_Transmit_IT+0xf2>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d20:	d107      	bne.n	8006d32 <HAL_UART_Transmit_IT+0xae>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d103      	bne.n	8006d32 <HAL_UART_Transmit_IT+0xae>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a2d      	ldr	r2, [pc, #180]	; (8006de4 <HAL_UART_Transmit_IT+0x160>)
 8006d2e:	675a      	str	r2, [r3, #116]	; 0x74
 8006d30:	e002      	b.n	8006d38 <HAL_UART_Transmit_IT+0xb4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4a2c      	ldr	r2, [pc, #176]	; (8006de8 <HAL_UART_Transmit_IT+0x164>)
 8006d36:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3308      	adds	r3, #8
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d60:	637a      	str	r2, [r7, #52]	; 0x34
 8006d62:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e5      	bne.n	8006d40 <HAL_UART_Transmit_IT+0xbc>
 8006d74:	e02c      	b.n	8006dd0 <HAL_UART_Transmit_IT+0x14c>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7e:	d107      	bne.n	8006d90 <HAL_UART_Transmit_IT+0x10c>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d103      	bne.n	8006d90 <HAL_UART_Transmit_IT+0x10c>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4a18      	ldr	r2, [pc, #96]	; (8006dec <HAL_UART_Transmit_IT+0x168>)
 8006d8c:	675a      	str	r2, [r3, #116]	; 0x74
 8006d8e:	e002      	b.n	8006d96 <HAL_UART_Transmit_IT+0x112>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4a17      	ldr	r2, [pc, #92]	; (8006df0 <HAL_UART_Transmit_IT+0x16c>)
 8006d94:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	613b      	str	r3, [r7, #16]
   return(result);
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbc:	623b      	str	r3, [r7, #32]
 8006dbe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	69f9      	ldr	r1, [r7, #28]
 8006dc2:	6a3a      	ldr	r2, [r7, #32]
 8006dc4:	e841 2300 	strex	r3, r2, [r1]
 8006dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e6      	bne.n	8006d9e <HAL_UART_Transmit_IT+0x11a>
    }

    return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e000      	b.n	8006dd6 <HAL_UART_Transmit_IT+0x152>
  }
  else
  {
    return HAL_BUSY;
 8006dd4:	2302      	movs	r3, #2
  }
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3744      	adds	r7, #68	; 0x44
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	080080c7 	.word	0x080080c7
 8006de8:	08007fe7 	.word	0x08007fe7
 8006dec:	08007f25 	.word	0x08007f25
 8006df0:	08007e6d 	.word	0x08007e6d

08006df4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08a      	sub	sp, #40	; 0x28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d156      	bne.n	8006eba <HAL_UART_Receive_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_UART_Receive_IT+0x24>
 8006e12:	88fb      	ldrh	r3, [r7, #6]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e04f      	b.n	8006ebc <HAL_UART_Receive_IT+0xc8>
    }

    __HAL_LOCK(huart);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d101      	bne.n	8006e2a <HAL_UART_Receive_IT+0x36>
 8006e26:	2302      	movs	r3, #2
 8006e28:	e048      	b.n	8006ebc <HAL_UART_Receive_IT+0xc8>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d107      	bne.n	8006e56 <HAL_UART_Receive_IT+0x62>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e54:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ec4 <HAL_UART_Receive_IT+0xd0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d024      	beq.n	8006eaa <HAL_UART_Receive_IT+0xb6>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a18      	ldr	r2, [pc, #96]	; (8006ec8 <HAL_UART_Receive_IT+0xd4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d01f      	beq.n	8006eaa <HAL_UART_Receive_IT+0xb6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d018      	beq.n	8006eaa <HAL_UART_Receive_IT+0xb6>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	613b      	str	r3, [r7, #16]
   return(result);
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	623b      	str	r3, [r7, #32]
 8006e98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	69f9      	ldr	r1, [r7, #28]
 8006e9c:	6a3a      	ldr	r2, [r7, #32]
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e6      	bne.n	8006e78 <HAL_UART_Receive_IT+0x84>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	461a      	mov	r2, r3
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 fe35 	bl	8007b20 <UART_Start_Receive_IT>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	e000      	b.n	8006ebc <HAL_UART_Receive_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8006eba:	2302      	movs	r3, #2
  }
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3728      	adds	r7, #40	; 0x28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	46002400 	.word	0x46002400
 8006ec8:	56002400 	.word	0x56002400

08006ecc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b0ae      	sub	sp, #184	; 0xb8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ef6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006efa:	4013      	ands	r3, r2
 8006efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8006f00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d11b      	bne.n	8006f40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d015      	beq.n	8006f40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d105      	bne.n	8006f2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 8271 	beq.w	8007418 <HAL_UART_IRQHandler+0x54c>
      {
        huart->RxISR(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
      }
      return;
 8006f3e:	e26b      	b.n	8007418 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 80f9 	beq.w	800713c <HAL_UART_IRQHandler+0x270>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f4e:	4b78      	ldr	r3, [pc, #480]	; (8007130 <HAL_UART_IRQHandler+0x264>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f5a:	4b76      	ldr	r3, [pc, #472]	; (8007134 <HAL_UART_IRQHandler+0x268>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 80ec 	beq.w	800713c <HAL_UART_IRQHandler+0x270>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d011      	beq.n	8006f94 <HAL_UART_IRQHandler+0xc8>
 8006f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00b      	beq.n	8006f94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2201      	movs	r2, #1
 8006f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f8a:	f043 0201 	orr.w	r2, r3, #1
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d011      	beq.n	8006fc4 <HAL_UART_IRQHandler+0xf8>
 8006fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fba:	f043 0204 	orr.w	r2, r3, #4
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d011      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x128>
 8006fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2204      	movs	r2, #4
 8006fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fea:	f043 0202 	orr.w	r2, r3, #2
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ff8:	f003 0308 	and.w	r3, r3, #8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d017      	beq.n	8007030 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007000:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	d105      	bne.n	8007018 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800700c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007010:	4b47      	ldr	r3, [pc, #284]	; (8007130 <HAL_UART_IRQHandler+0x264>)
 8007012:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2208      	movs	r2, #8
 800701e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007026:	f043 0208 	orr.w	r2, r3, #8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007030:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007038:	2b00      	cmp	r3, #0
 800703a:	d012      	beq.n	8007062 <HAL_UART_IRQHandler+0x196>
 800703c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007058:	f043 0220 	orr.w	r2, r3, #32
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 81d7 	beq.w	800741c <HAL_UART_IRQHandler+0x550>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800706e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	2b00      	cmp	r3, #0
 8007078:	d013      	beq.n	80070a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800707a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b00      	cmp	r3, #0
 8007084:	d105      	bne.n	8007092 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800708a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	d005      	beq.n	80070c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d029      	beq.n	800711a <HAL_UART_IRQHandler+0x24e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fe54 	bl	8007d74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d6:	2b40      	cmp	r3, #64	; 0x40
 80070d8:	d11b      	bne.n	8007112 <HAL_UART_IRQHandler+0x246>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d013      	beq.n	800710a <HAL_UART_IRQHandler+0x23e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070e6:	4a14      	ldr	r2, [pc, #80]	; (8007138 <HAL_UART_IRQHandler+0x26c>)
 80070e8:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fb f8af 	bl	8002252 <HAL_DMA_Abort_IT>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d017      	beq.n	800712a <HAL_UART_IRQHandler+0x25e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007108:	e00f      	b.n	800712a <HAL_UART_IRQHandler+0x25e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f99a 	bl	8007444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007110:	e00b      	b.n	800712a <HAL_UART_IRQHandler+0x25e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f996 	bl	8007444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007118:	e007      	b.n	800712a <HAL_UART_IRQHandler+0x25e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f992 	bl	8007444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007128:	e178      	b.n	800741c <HAL_UART_IRQHandler+0x550>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712a:	bf00      	nop
    return;
 800712c:	e176      	b.n	800741c <HAL_UART_IRQHandler+0x550>
 800712e:	bf00      	nop
 8007130:	10000001 	.word	0x10000001
 8007134:	04000120 	.word	0x04000120
 8007138:	08007e41 	.word	0x08007e41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007140:	2b01      	cmp	r3, #1
 8007142:	f040 8120 	bne.w	8007386 <HAL_UART_IRQHandler+0x4ba>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007146:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800714a:	f003 0310 	and.w	r3, r3, #16
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 8119 	beq.w	8007386 <HAL_UART_IRQHandler+0x4ba>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007158:	f003 0310 	and.w	r3, r3, #16
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8112 	beq.w	8007386 <HAL_UART_IRQHandler+0x4ba>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2210      	movs	r2, #16
 8007168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b40      	cmp	r3, #64	; 0x40
 8007176:	f040 808b 	bne.w	8007290 <HAL_UART_IRQHandler+0x3c4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007182:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 8007186:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 8148 	beq.w	8007420 <HAL_UART_IRQHandler+0x554>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007196:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800719a:	429a      	cmp	r2, r3
 800719c:	f080 8140 	bcs.w	8007420 <HAL_UART_IRQHandler+0x554>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80071a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b0:	2b81      	cmp	r3, #129	; 0x81
 80071b2:	d05f      	beq.n	8007274 <HAL_UART_IRQHandler+0x3a8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	461a      	mov	r2, r3
 80071d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071da:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e2      	bne.n	80071b4 <HAL_UART_IRQHandler+0x2e8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3308      	adds	r3, #8
 80071f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007200:	f023 0301 	bic.w	r3, r3, #1
 8007204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3308      	adds	r3, #8
 800720e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007212:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007214:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e3      	bne.n	80071ee <HAL_UART_IRQHandler+0x322>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007244:	f023 0310 	bic.w	r3, r3, #16
 8007248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007256:	65bb      	str	r3, [r7, #88]	; 0x58
 8007258:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800725c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e4      	bne.n	8007234 <HAL_UART_IRQHandler+0x368>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800726e:	4618      	mov	r0, r3
 8007270:	f7fa ff73 	bl	800215a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007280:	b29b      	uxth	r3, r3
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	b29b      	uxth	r3, r3
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f8e5 	bl	8007458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800728e:	e0c7      	b.n	8007420 <HAL_UART_IRQHandler+0x554>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800729c:	b29b      	uxth	r3, r3
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 80b9 	beq.w	8007424 <HAL_UART_IRQHandler+0x558>
          && (nb_rx_data > 0U))
 80072b2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 80b4 	beq.w	8007424 <HAL_UART_IRQHandler+0x558>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072de:	647b      	str	r3, [r7, #68]	; 0x44
 80072e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e4      	bne.n	80072bc <HAL_UART_IRQHandler+0x3f0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3308      	adds	r3, #8
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	623b      	str	r3, [r7, #32]
   return(result);
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3308      	adds	r3, #8
 8007316:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800731a:	633a      	str	r2, [r7, #48]	; 0x30
 800731c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e1      	bne.n	80072f2 <HAL_UART_IRQHandler+0x426>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2220      	movs	r2, #32
 8007332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0310 	bic.w	r3, r3, #16
 8007356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	69b9      	ldr	r1, [r7, #24]
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	617b      	str	r3, [r7, #20]
   return(result);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e4      	bne.n	8007342 <HAL_UART_IRQHandler+0x476>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007378:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f86a 	bl	8007458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007384:	e04e      	b.n	8007424 <HAL_UART_IRQHandler+0x558>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800738a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738e:	2b00      	cmp	r3, #0
 8007390:	d014      	beq.n	80073bc <HAL_UART_IRQHandler+0x4f0>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007392:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739a:	2b00      	cmp	r3, #0
 800739c:	d105      	bne.n	80073aa <HAL_UART_IRQHandler+0x4de>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800739e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <HAL_UART_IRQHandler+0x4f0>
  {
    if (huart->TxISR != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d03a      	beq.n	8007428 <HAL_UART_IRQHandler+0x55c>
    {
      huart->TxISR(huart);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
    }
    return;
 80073ba:	e035      	b.n	8007428 <HAL_UART_IRQHandler+0x55c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <HAL_UART_IRQHandler+0x510>
 80073c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_UART_IRQHandler+0x510>
  {
    UART_EndTransmit_IT(huart);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 feeb 	bl	80081b0 <UART_EndTransmit_IT>
    return;
 80073da:	e026      	b.n	800742a <HAL_UART_IRQHandler+0x55e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d009      	beq.n	80073fc <HAL_UART_IRQHandler+0x530>
 80073e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_UART_IRQHandler+0x530>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 fb6d 	bl	8008ad4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073fa:	e016      	b.n	800742a <HAL_UART_IRQHandler+0x55e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d010      	beq.n	800742a <HAL_UART_IRQHandler+0x55e>
 8007408:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800740c:	2b00      	cmp	r3, #0
 800740e:	da0c      	bge.n	800742a <HAL_UART_IRQHandler+0x55e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 fb55 	bl	8008ac0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007416:	e008      	b.n	800742a <HAL_UART_IRQHandler+0x55e>
      return;
 8007418:	bf00      	nop
 800741a:	e006      	b.n	800742a <HAL_UART_IRQHandler+0x55e>
    return;
 800741c:	bf00      	nop
 800741e:	e004      	b.n	800742a <HAL_UART_IRQHandler+0x55e>
      return;
 8007420:	bf00      	nop
 8007422:	e002      	b.n	800742a <HAL_UART_IRQHandler+0x55e>
      return;
 8007424:	bf00      	nop
 8007426:	e000      	b.n	800742a <HAL_UART_IRQHandler+0x55e>
    return;
 8007428:	bf00      	nop
  }
}
 800742a:	37b8      	adds	r7, #184	; 0xb8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007474:	b094      	sub	sp, #80	; 0x50
 8007476:	af00      	add	r7, sp, #0
 8007478:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	4b7e      	ldr	r3, [pc, #504]	; (8007680 <UART_SetConfig+0x210>)
 8007486:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	431a      	orrs	r2, r3
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	431a      	orrs	r2, r3
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	4313      	orrs	r3, r2
 800749e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4977      	ldr	r1, [pc, #476]	; (8007684 <UART_SetConfig+0x214>)
 80074a8:	4019      	ands	r1, r3
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b0:	430b      	orrs	r3, r1
 80074b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	68d9      	ldr	r1, [r3, #12]
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	ea40 0301 	orr.w	r3, r0, r1
 80074ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4b6a      	ldr	r3, [pc, #424]	; (8007680 <UART_SetConfig+0x210>)
 80074d8:	429a      	cmp	r2, r3
 80074da:	d009      	beq.n	80074f0 <UART_SetConfig+0x80>
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	4b69      	ldr	r3, [pc, #420]	; (8007688 <UART_SetConfig+0x218>)
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d004      	beq.n	80074f0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	6a1a      	ldr	r2, [r3, #32]
 80074ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ec:	4313      	orrs	r3, r2
 80074ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80074fa:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007504:	430b      	orrs	r3, r1
 8007506:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	f023 000f 	bic.w	r0, r3, #15
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	ea40 0301 	orr.w	r3, r0, r1
 800751e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	4b59      	ldr	r3, [pc, #356]	; (800768c <UART_SetConfig+0x21c>)
 8007526:	429a      	cmp	r2, r3
 8007528:	d102      	bne.n	8007530 <UART_SetConfig+0xc0>
 800752a:	2301      	movs	r3, #1
 800752c:	64bb      	str	r3, [r7, #72]	; 0x48
 800752e:	e029      	b.n	8007584 <UART_SetConfig+0x114>
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	4b56      	ldr	r3, [pc, #344]	; (8007690 <UART_SetConfig+0x220>)
 8007536:	429a      	cmp	r2, r3
 8007538:	d102      	bne.n	8007540 <UART_SetConfig+0xd0>
 800753a:	2302      	movs	r3, #2
 800753c:	64bb      	str	r3, [r7, #72]	; 0x48
 800753e:	e021      	b.n	8007584 <UART_SetConfig+0x114>
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4b53      	ldr	r3, [pc, #332]	; (8007694 <UART_SetConfig+0x224>)
 8007546:	429a      	cmp	r2, r3
 8007548:	d102      	bne.n	8007550 <UART_SetConfig+0xe0>
 800754a:	2304      	movs	r3, #4
 800754c:	64bb      	str	r3, [r7, #72]	; 0x48
 800754e:	e019      	b.n	8007584 <UART_SetConfig+0x114>
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	4b50      	ldr	r3, [pc, #320]	; (8007698 <UART_SetConfig+0x228>)
 8007556:	429a      	cmp	r2, r3
 8007558:	d102      	bne.n	8007560 <UART_SetConfig+0xf0>
 800755a:	2308      	movs	r3, #8
 800755c:	64bb      	str	r3, [r7, #72]	; 0x48
 800755e:	e011      	b.n	8007584 <UART_SetConfig+0x114>
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	4b4d      	ldr	r3, [pc, #308]	; (800769c <UART_SetConfig+0x22c>)
 8007566:	429a      	cmp	r2, r3
 8007568:	d102      	bne.n	8007570 <UART_SetConfig+0x100>
 800756a:	2310      	movs	r3, #16
 800756c:	64bb      	str	r3, [r7, #72]	; 0x48
 800756e:	e009      	b.n	8007584 <UART_SetConfig+0x114>
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	4b42      	ldr	r3, [pc, #264]	; (8007680 <UART_SetConfig+0x210>)
 8007576:	429a      	cmp	r2, r3
 8007578:	d102      	bne.n	8007580 <UART_SetConfig+0x110>
 800757a:	2320      	movs	r3, #32
 800757c:	64bb      	str	r3, [r7, #72]	; 0x48
 800757e:	e001      	b.n	8007584 <UART_SetConfig+0x114>
 8007580:	2300      	movs	r3, #0
 8007582:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	4b3d      	ldr	r3, [pc, #244]	; (8007680 <UART_SetConfig+0x210>)
 800758a:	429a      	cmp	r2, r3
 800758c:	d005      	beq.n	800759a <UART_SetConfig+0x12a>
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	4b3d      	ldr	r3, [pc, #244]	; (8007688 <UART_SetConfig+0x218>)
 8007594:	429a      	cmp	r2, r3
 8007596:	f040 8085 	bne.w	80076a4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800759a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800759c:	2200      	movs	r2, #0
 800759e:	623b      	str	r3, [r7, #32]
 80075a0:	627a      	str	r2, [r7, #36]	; 0x24
 80075a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80075a6:	f7fe f851 	bl	800564c <HAL_RCCEx_GetPeriphCLKFreq>
 80075aa:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80075ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 80e8 	beq.w	8007784 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	4a39      	ldr	r2, [pc, #228]	; (80076a0 <UART_SetConfig+0x230>)
 80075ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075be:	461a      	mov	r2, r3
 80075c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80075c6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	4413      	add	r3, r2
 80075d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d305      	bcc.n	80075e4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d903      	bls.n	80075ec <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80075ea:	e048      	b.n	800767e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ee:	2200      	movs	r2, #0
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	61fa      	str	r2, [r7, #28]
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	4a29      	ldr	r2, [pc, #164]	; (80076a0 <UART_SetConfig+0x230>)
 80075fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2200      	movs	r2, #0
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	617a      	str	r2, [r7, #20]
 8007606:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800760a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800760e:	f7f8 fe39 	bl	8000284 <__aeabi_uldivmod>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4610      	mov	r0, r2
 8007618:	4619      	mov	r1, r3
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	020b      	lsls	r3, r1, #8
 8007624:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007628:	0202      	lsls	r2, r0, #8
 800762a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800762c:	6849      	ldr	r1, [r1, #4]
 800762e:	0849      	lsrs	r1, r1, #1
 8007630:	2000      	movs	r0, #0
 8007632:	460c      	mov	r4, r1
 8007634:	4605      	mov	r5, r0
 8007636:	eb12 0804 	adds.w	r8, r2, r4
 800763a:	eb43 0905 	adc.w	r9, r3, r5
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	60bb      	str	r3, [r7, #8]
 8007646:	60fa      	str	r2, [r7, #12]
 8007648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800764c:	4640      	mov	r0, r8
 800764e:	4649      	mov	r1, r9
 8007650:	f7f8 fe18 	bl	8000284 <__aeabi_uldivmod>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4613      	mov	r3, r2
 800765a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800765c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007662:	d308      	bcc.n	8007676 <UART_SetConfig+0x206>
 8007664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800766a:	d204      	bcs.n	8007676 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007672:	60da      	str	r2, [r3, #12]
 8007674:	e003      	b.n	800767e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800767c:	e082      	b.n	8007784 <UART_SetConfig+0x314>
 800767e:	e081      	b.n	8007784 <UART_SetConfig+0x314>
 8007680:	46002400 	.word	0x46002400
 8007684:	cfff69f3 	.word	0xcfff69f3
 8007688:	56002400 	.word	0x56002400
 800768c:	40013800 	.word	0x40013800
 8007690:	40004400 	.word	0x40004400
 8007694:	40004800 	.word	0x40004800
 8007698:	40004c00 	.word	0x40004c00
 800769c:	40005000 	.word	0x40005000
 80076a0:	08008e38 	.word	0x08008e38
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ac:	d13c      	bne.n	8007728 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80076ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b0:	2200      	movs	r2, #0
 80076b2:	603b      	str	r3, [r7, #0]
 80076b4:	607a      	str	r2, [r7, #4]
 80076b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076ba:	f7fd ffc7 	bl	800564c <HAL_RCCEx_GetPeriphCLKFreq>
 80076be:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d05e      	beq.n	8007784 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	4a39      	ldr	r2, [pc, #228]	; (80077b0 <UART_SetConfig+0x340>)
 80076cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076d0:	461a      	mov	r2, r3
 80076d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076d8:	005a      	lsls	r2, r3, #1
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	085b      	lsrs	r3, r3, #1
 80076e0:	441a      	add	r2, r3
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ee:	2b0f      	cmp	r3, #15
 80076f0:	d916      	bls.n	8007720 <UART_SetConfig+0x2b0>
 80076f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f8:	d212      	bcs.n	8007720 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f023 030f 	bic.w	r3, r3, #15
 8007702:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	b29b      	uxth	r3, r3
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	b29a      	uxth	r2, r3
 8007710:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007712:	4313      	orrs	r3, r2
 8007714:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800771c:	60da      	str	r2, [r3, #12]
 800771e:	e031      	b.n	8007784 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007726:	e02d      	b.n	8007784 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800772a:	2200      	movs	r2, #0
 800772c:	469a      	mov	sl, r3
 800772e:	4693      	mov	fp, r2
 8007730:	4650      	mov	r0, sl
 8007732:	4659      	mov	r1, fp
 8007734:	f7fd ff8a 	bl	800564c <HAL_RCCEx_GetPeriphCLKFreq>
 8007738:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800773a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d021      	beq.n	8007784 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	4a1a      	ldr	r2, [pc, #104]	; (80077b0 <UART_SetConfig+0x340>)
 8007746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800774a:	461a      	mov	r2, r3
 800774c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800774e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	441a      	add	r2, r3
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007766:	2b0f      	cmp	r3, #15
 8007768:	d909      	bls.n	800777e <UART_SetConfig+0x30e>
 800776a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007770:	d205      	bcs.n	800777e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007774:	b29a      	uxth	r2, r3
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	60da      	str	r2, [r3, #12]
 800777c:	e002      	b.n	8007784 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	2201      	movs	r2, #1
 8007788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	2201      	movs	r2, #1
 8007790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	2200      	movs	r2, #0
 8007798:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800779a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779c:	2200      	movs	r2, #0
 800779e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80077a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3750      	adds	r7, #80	; 0x50
 80077a8:	46bd      	mov	sp, r7
 80077aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077ae:	bf00      	nop
 80077b0:	08008e38 	.word	0x08008e38

080077b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007826:	f003 0308 	and.w	r3, r3, #8
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	f003 0320 	and.w	r3, r3, #32
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01a      	beq.n	80078ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b2:	d10a      	bne.n	80078ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	605a      	str	r2, [r3, #4]
  }
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af02      	add	r7, sp, #8
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007908:	f7fa fa9c 	bl	8001e44 <HAL_GetTick>
 800790c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b08      	cmp	r3, #8
 800791a:	d10e      	bne.n	800793a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800791c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f82f 	bl	800798e <UART_WaitOnFlagUntilTimeout>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e025      	b.n	8007986 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b04      	cmp	r3, #4
 8007946:	d10e      	bne.n	8007966 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f819 	bl	800798e <UART_WaitOnFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e00f      	b.n	8007986 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b09c      	sub	sp, #112	; 0x70
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	603b      	str	r3, [r7, #0]
 800799a:	4613      	mov	r3, r2
 800799c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800799e:	e0a9      	b.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a6:	f000 80a5 	beq.w	8007af4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079aa:	f7fa fa4b 	bl	8001e44 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d302      	bcc.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80079ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d140      	bne.n	8007a42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079d4:	667b      	str	r3, [r7, #100]	; 0x64
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e6      	bne.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3308      	adds	r3, #8
 80079f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	f023 0301 	bic.w	r3, r3, #1
 8007a08:	663b      	str	r3, [r7, #96]	; 0x60
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3308      	adds	r3, #8
 8007a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a12:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e5      	bne.n	80079f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e069      	b.n	8007b16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0304 	and.w	r3, r3, #4
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d051      	beq.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a5e:	d149      	bne.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e6      	bne.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	f023 0301 	bic.w	r3, r3, #1
 8007ab2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3308      	adds	r3, #8
 8007aba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007abc:	623a      	str	r2, [r7, #32]
 8007abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	69f9      	ldr	r1, [r7, #28]
 8007ac2:	6a3a      	ldr	r2, [r7, #32]
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e5      	bne.n	8007a9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2220      	movs	r2, #32
 8007adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e010      	b.n	8007b16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	69da      	ldr	r2, [r3, #28]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	4013      	ands	r3, r2
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	bf0c      	ite	eq
 8007b04:	2301      	moveq	r3, #1
 8007b06:	2300      	movne	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	f43f af46 	beq.w	80079a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3770      	adds	r7, #112	; 0x70
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b0a3      	sub	sp, #140	; 0x8c
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	88fa      	ldrh	r2, [r7, #6]
 8007b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	88fa      	ldrh	r2, [r7, #6]
 8007b40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b52:	d10e      	bne.n	8007b72 <UART_Start_Receive_IT+0x52>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d105      	bne.n	8007b68 <UART_Start_Receive_IT+0x48>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b66:	e02d      	b.n	8007bc4 <UART_Start_Receive_IT+0xa4>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	22ff      	movs	r2, #255	; 0xff
 8007b6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b70:	e028      	b.n	8007bc4 <UART_Start_Receive_IT+0xa4>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10d      	bne.n	8007b96 <UART_Start_Receive_IT+0x76>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d104      	bne.n	8007b8c <UART_Start_Receive_IT+0x6c>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	22ff      	movs	r2, #255	; 0xff
 8007b86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b8a:	e01b      	b.n	8007bc4 <UART_Start_Receive_IT+0xa4>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	227f      	movs	r2, #127	; 0x7f
 8007b90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b94:	e016      	b.n	8007bc4 <UART_Start_Receive_IT+0xa4>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b9e:	d10d      	bne.n	8007bbc <UART_Start_Receive_IT+0x9c>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d104      	bne.n	8007bb2 <UART_Start_Receive_IT+0x92>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	227f      	movs	r2, #127	; 0x7f
 8007bac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bb0:	e008      	b.n	8007bc4 <UART_Start_Receive_IT+0xa4>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	223f      	movs	r2, #63	; 0x3f
 8007bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bba:	e003      	b.n	8007bc4 <UART_Start_Receive_IT+0xa4>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2222      	movs	r2, #34	; 0x22
 8007bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007bf8:	673a      	str	r2, [r7, #112]	; 0x70
 8007bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007bfe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e3      	bne.n	8007bd4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c14:	d153      	bne.n	8007cbe <UART_Start_Receive_IT+0x19e>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c1c:	88fa      	ldrh	r2, [r7, #6]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d34d      	bcc.n	8007cbe <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c2a:	d107      	bne.n	8007c3c <UART_Start_Receive_IT+0x11c>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d103      	bne.n	8007c3c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4a4b      	ldr	r2, [pc, #300]	; (8007d64 <UART_Start_Receive_IT+0x244>)
 8007c38:	671a      	str	r2, [r3, #112]	; 0x70
 8007c3a:	e002      	b.n	8007c42 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4a4a      	ldr	r2, [pc, #296]	; (8007d68 <UART_Start_Receive_IT+0x248>)
 8007c40:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d01a      	beq.n	8007c88 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c76:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e4      	bne.n	8007c52 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ca8:	64ba      	str	r2, [r7, #72]	; 0x48
 8007caa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e5      	bne.n	8007c88 <UART_Start_Receive_IT+0x168>
 8007cbc:	e04a      	b.n	8007d54 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc6:	d107      	bne.n	8007cd8 <UART_Start_Receive_IT+0x1b8>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d103      	bne.n	8007cd8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4a26      	ldr	r2, [pc, #152]	; (8007d6c <UART_Start_Receive_IT+0x24c>)
 8007cd4:	671a      	str	r2, [r3, #112]	; 0x70
 8007cd6:	e002      	b.n	8007cde <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4a25      	ldr	r2, [pc, #148]	; (8007d70 <UART_Start_Receive_IT+0x250>)
 8007cdc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d019      	beq.n	8007d22 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d02:	677b      	str	r3, [r7, #116]	; 0x74
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e6      	bne.n	8007cee <UART_Start_Receive_IT+0x1ce>
 8007d20:	e018      	b.n	8007d54 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f043 0320 	orr.w	r3, r3, #32
 8007d36:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d40:	623b      	str	r3, [r7, #32]
 8007d42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	69f9      	ldr	r1, [r7, #28]
 8007d46:	6a3a      	ldr	r2, [r7, #32]
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e6      	bne.n	8007d22 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	378c      	adds	r7, #140	; 0x8c
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	080087c1 	.word	0x080087c1
 8007d68:	080084c9 	.word	0x080084c9
 8007d6c:	08008367 	.word	0x08008367
 8007d70:	08008207 	.word	0x08008207

08007d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b095      	sub	sp, #84	; 0x54
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007da0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e6      	bne.n	8007d7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
 8007dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dda:	e841 2300 	strex	r3, r2, [r1]
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1e3      	bne.n	8007dae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d118      	bne.n	8007e20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f023 0310 	bic.w	r3, r3, #16
 8007e02:	647b      	str	r3, [r7, #68]	; 0x44
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e0c:	61bb      	str	r3, [r7, #24]
 8007e0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6979      	ldr	r1, [r7, #20]
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	613b      	str	r3, [r7, #16]
   return(result);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e6      	bne.n	8007dee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007e34:	bf00      	nop
 8007e36:	3754      	adds	r7, #84	; 0x54
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f7ff faf0 	bl	8007444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e64:	bf00      	nop
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b08f      	sub	sp, #60	; 0x3c
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e7a:	2b21      	cmp	r3, #33	; 0x21
 8007e7c:	d14c      	bne.n	8007f18 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d132      	bne.n	8007ef0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	e853 3f00 	ldrex	r3, [r3]
 8007e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eaa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e6      	bne.n	8007e8a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6979      	ldr	r1, [r7, #20]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e6      	bne.n	8007ebc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007eee:	e013      	b.n	8007f18 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef4:	781a      	ldrb	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007f18:	bf00      	nop
 8007f1a:	373c      	adds	r7, #60	; 0x3c
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b091      	sub	sp, #68	; 0x44
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f32:	2b21      	cmp	r3, #33	; 0x21
 8007f34:	d151      	bne.n	8007fda <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d132      	bne.n	8007fa8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	633b      	str	r3, [r7, #48]	; 0x30
 8007f62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f68:	e841 2300 	strex	r3, r2, [r1]
 8007f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e6      	bne.n	8007f42 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f92:	61fb      	str	r3, [r7, #28]
 8007f94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	69b9      	ldr	r1, [r7, #24]
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	617b      	str	r3, [r7, #20]
   return(result);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e6      	bne.n	8007f74 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007fa6:	e018      	b.n	8007fda <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fbc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc2:	1c9a      	adds	r2, r3, #2
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007fda:	bf00      	nop
 8007fdc:	3744      	adds	r7, #68	; 0x44
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b091      	sub	sp, #68	; 0x44
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff4:	2b21      	cmp	r3, #33	; 0x21
 8007ff6:	d160      	bne.n	80080ba <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ffe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008000:	e057      	b.n	80080b2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008008:	b29b      	uxth	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d133      	bne.n	8008076 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3308      	adds	r3, #8
 8008014:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	623b      	str	r3, [r7, #32]
   return(result);
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008024:	63bb      	str	r3, [r7, #56]	; 0x38
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3308      	adds	r3, #8
 800802c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800802e:	633a      	str	r2, [r7, #48]	; 0x30
 8008030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e5      	bne.n	800800e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008056:	637b      	str	r3, [r7, #52]	; 0x34
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008060:	61fb      	str	r3, [r7, #28]
 8008062:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	69b9      	ldr	r1, [r7, #24]
 8008066:	69fa      	ldr	r2, [r7, #28]
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	617b      	str	r3, [r7, #20]
   return(result);
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e6      	bne.n	8008042 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008074:	e021      	b.n	80080ba <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008080:	2b00      	cmp	r3, #0
 8008082:	d013      	beq.n	80080ac <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80080ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80080ae:	3b01      	subs	r3, #1
 80080b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80080b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1a4      	bne.n	8008002 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80080b8:	e7ff      	b.n	80080ba <UART_TxISR_8BIT_FIFOEN+0xd4>
 80080ba:	bf00      	nop
 80080bc:	3744      	adds	r7, #68	; 0x44
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b091      	sub	sp, #68	; 0x44
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d4:	2b21      	cmp	r3, #33	; 0x21
 80080d6:	d165      	bne.n	80081a4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080de:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80080e0:	e05c      	b.n	800819c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d133      	bne.n	8008156 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3308      	adds	r3, #8
 80080f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3308      	adds	r3, #8
 800810c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800810e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008110:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e5      	bne.n	80080ee <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	e853 3f00 	ldrex	r3, [r3]
 800812e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008136:	633b      	str	r3, [r7, #48]	; 0x30
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008144:	6979      	ldr	r1, [r7, #20]
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	e841 2300 	strex	r3, r2, [r1]
 800814c:	613b      	str	r3, [r7, #16]
   return(result);
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1e6      	bne.n	8008122 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008154:	e026      	b.n	80081a4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008160:	2b00      	cmp	r3, #0
 8008162:	d018      	beq.n	8008196 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008168:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008178:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817e:	1c9a      	adds	r2, r3, #2
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800818a:	b29b      	uxth	r3, r3
 800818c:	3b01      	subs	r3, #1
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008196:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008198:	3b01      	subs	r3, #1
 800819a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800819c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d19f      	bne.n	80080e2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80081a2:	e7ff      	b.n	80081a4 <UART_TxISR_16BIT_FIFOEN+0xde>
 80081a4:	bf00      	nop
 80081a6:	3744      	adds	r7, #68	; 0x44
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b088      	sub	sp, #32
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081cc:	61fb      	str	r3, [r7, #28]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	61bb      	str	r3, [r7, #24]
 80081d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	6979      	ldr	r1, [r7, #20]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	613b      	str	r3, [r7, #16]
   return(result);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e6      	bne.n	80081b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff f919 	bl	8007430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081fe:	bf00      	nop
 8008200:	3720      	adds	r7, #32
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b096      	sub	sp, #88	; 0x58
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008214:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821e:	2b22      	cmp	r3, #34	; 0x22
 8008220:	f040 8095 	bne.w	800834e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800822e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008232:	b2d9      	uxtb	r1, r3
 8008234:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008238:	b2da      	uxtb	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823e:	400a      	ands	r2, r1
 8008240:	b2d2      	uxtb	r2, r2
 8008242:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008254:	b29b      	uxth	r3, r3
 8008256:	3b01      	subs	r3, #1
 8008258:	b29a      	uxth	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008266:	b29b      	uxth	r3, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	d178      	bne.n	800835e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800827a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008280:	653b      	str	r3, [r7, #80]	; 0x50
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800828a:	647b      	str	r3, [r7, #68]	; 0x44
 800828c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e6      	bne.n	800826c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3308      	adds	r3, #8
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	623b      	str	r3, [r7, #32]
   return(result);
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	f023 0301 	bic.w	r3, r3, #1
 80082b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3308      	adds	r3, #8
 80082bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082be:	633a      	str	r2, [r7, #48]	; 0x30
 80082c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e5      	bne.n	800829e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d12e      	bne.n	8008346 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f023 0310 	bic.w	r3, r3, #16
 8008302:	64bb      	str	r3, [r7, #72]	; 0x48
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800830c:	61fb      	str	r3, [r7, #28]
 800830e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	69b9      	ldr	r1, [r7, #24]
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	e841 2300 	strex	r3, r2, [r1]
 8008318:	617b      	str	r3, [r7, #20]
   return(result);
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e6      	bne.n	80082ee <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f003 0310 	and.w	r3, r3, #16
 800832a:	2b10      	cmp	r3, #16
 800832c:	d103      	bne.n	8008336 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2210      	movs	r2, #16
 8008334:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff f88a 	bl	8007458 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008344:	e00b      	b.n	800835e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7f8 fbe6 	bl	8000b18 <HAL_UART_RxCpltCallback>
}
 800834c:	e007      	b.n	800835e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	699a      	ldr	r2, [r3, #24]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f042 0208 	orr.w	r2, r2, #8
 800835c:	619a      	str	r2, [r3, #24]
}
 800835e:	bf00      	nop
 8008360:	3758      	adds	r7, #88	; 0x58
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b096      	sub	sp, #88	; 0x58
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008374:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800837e:	2b22      	cmp	r3, #34	; 0x22
 8008380:	f040 8095 	bne.w	80084ae <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008392:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008394:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008398:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800839c:	4013      	ands	r3, r2
 800839e:	b29a      	uxth	r2, r3
 80083a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a8:	1c9a      	adds	r2, r3, #2
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	3b01      	subs	r3, #1
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d178      	bne.n	80084be <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ea:	643b      	str	r3, [r7, #64]	; 0x40
 80083ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e6      	bne.n	80083cc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3308      	adds	r3, #8
 8008404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	61fb      	str	r3, [r7, #28]
   return(result);
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	f023 0301 	bic.w	r3, r3, #1
 8008414:	64bb      	str	r3, [r7, #72]	; 0x48
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3308      	adds	r3, #8
 800841c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800841e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e5      	bne.n	80083fe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008444:	2b01      	cmp	r3, #1
 8008446:	d12e      	bne.n	80084a6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	60bb      	str	r3, [r7, #8]
   return(result);
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f023 0310 	bic.w	r3, r3, #16
 8008462:	647b      	str	r3, [r7, #68]	; 0x44
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	461a      	mov	r2, r3
 800846a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008470:	6979      	ldr	r1, [r7, #20]
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	e841 2300 	strex	r3, r2, [r1]
 8008478:	613b      	str	r3, [r7, #16]
   return(result);
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1e6      	bne.n	800844e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	f003 0310 	and.w	r3, r3, #16
 800848a:	2b10      	cmp	r3, #16
 800848c:	d103      	bne.n	8008496 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2210      	movs	r2, #16
 8008494:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7fe ffda 	bl	8007458 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084a4:	e00b      	b.n	80084be <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7f8 fb36 	bl	8000b18 <HAL_UART_RxCpltCallback>
}
 80084ac:	e007      	b.n	80084be <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	699a      	ldr	r2, [r3, #24]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f042 0208 	orr.w	r2, r2, #8
 80084bc:	619a      	str	r2, [r3, #24]
}
 80084be:	bf00      	nop
 80084c0:	3758      	adds	r7, #88	; 0x58
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b0a6      	sub	sp, #152	; 0x98
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084d6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fe:	2b22      	cmp	r3, #34	; 0x22
 8008500:	f040 814f 	bne.w	80087a2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800850a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800850e:	e0f6      	b.n	80086fe <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800851a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800851e:	b2d9      	uxtb	r1, r3
 8008520:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008524:	b2da      	uxtb	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852a:	400a      	ands	r2, r1
 800852c:	b2d2      	uxtb	r2, r2
 800852e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008534:	1c5a      	adds	r2, r3, #1
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008540:	b29b      	uxth	r3, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	b29a      	uxth	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008556:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800855a:	f003 0307 	and.w	r3, r3, #7
 800855e:	2b00      	cmp	r3, #0
 8008560:	d053      	beq.n	800860a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d011      	beq.n	8008592 <UART_RxISR_8BIT_FIFOEN+0xca>
 800856e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00b      	beq.n	8008592 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2201      	movs	r2, #1
 8008580:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008588:	f043 0201 	orr.w	r2, r3, #1
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008592:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d011      	beq.n	80085c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800859e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00b      	beq.n	80085c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2202      	movs	r2, #2
 80085b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085b8:	f043 0204 	orr.w	r2, r3, #4
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085c6:	f003 0304 	and.w	r3, r3, #4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d011      	beq.n	80085f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80085ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00b      	beq.n	80085f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2204      	movs	r2, #4
 80085e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e8:	f043 0202 	orr.w	r2, r3, #2
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d006      	beq.n	800860a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7fe ff21 	bl	8007444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008610:	b29b      	uxth	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d173      	bne.n	80086fe <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800862a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008638:	66bb      	str	r3, [r7, #104]	; 0x68
 800863a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800863e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008640:	e841 2300 	strex	r3, r2, [r1]
 8008644:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e4      	bne.n	8008616 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	3308      	adds	r3, #8
 8008652:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800865c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800865e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008662:	f023 0301 	bic.w	r3, r3, #1
 8008666:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3308      	adds	r3, #8
 800866e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008670:	657a      	str	r2, [r7, #84]	; 0x54
 8008672:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008676:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800867e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e3      	bne.n	800864c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2220      	movs	r2, #32
 8008688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d12e      	bne.n	80086f8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	f023 0310 	bic.w	r3, r3, #16
 80086b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086be:	643b      	str	r3, [r7, #64]	; 0x40
 80086c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e6      	bne.n	80086a0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	f003 0310 	and.w	r3, r3, #16
 80086dc:	2b10      	cmp	r3, #16
 80086de:	d103      	bne.n	80086e8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2210      	movs	r2, #16
 80086e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7fe feb1 	bl	8007458 <HAL_UARTEx_RxEventCallback>
 80086f6:	e002      	b.n	80086fe <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7f8 fa0d 	bl	8000b18 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008702:	2b00      	cmp	r3, #0
 8008704:	d006      	beq.n	8008714 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008706:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800870a:	f003 0320 	and.w	r3, r3, #32
 800870e:	2b00      	cmp	r3, #0
 8008710:	f47f aefe 	bne.w	8008510 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800871a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800871e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008722:	2b00      	cmp	r3, #0
 8008724:	d045      	beq.n	80087b2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800872c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008730:	429a      	cmp	r2, r3
 8008732:	d23e      	bcs.n	80087b2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3308      	adds	r3, #8
 800873a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	61fb      	str	r3, [r7, #28]
   return(result);
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800874a:	673b      	str	r3, [r7, #112]	; 0x70
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3308      	adds	r3, #8
 8008752:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008754:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800875a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e5      	bne.n	8008734 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a14      	ldr	r2, [pc, #80]	; (80087bc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800876c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	60bb      	str	r3, [r7, #8]
   return(result);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f043 0320 	orr.w	r3, r3, #32
 8008782:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
 800878a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878c:	61bb      	str	r3, [r7, #24]
 800878e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	6979      	ldr	r1, [r7, #20]
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	613b      	str	r3, [r7, #16]
   return(result);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e6      	bne.n	800876e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087a0:	e007      	b.n	80087b2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	699a      	ldr	r2, [r3, #24]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f042 0208 	orr.w	r2, r2, #8
 80087b0:	619a      	str	r2, [r3, #24]
}
 80087b2:	bf00      	nop
 80087b4:	3798      	adds	r7, #152	; 0x98
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	08008207 	.word	0x08008207

080087c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b0a8      	sub	sp, #160	; 0xa0
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087ce:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f6:	2b22      	cmp	r3, #34	; 0x22
 80087f8:	f040 8153 	bne.w	8008aa2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008802:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008806:	e0fa      	b.n	80089fe <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800881a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800881e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008822:	4013      	ands	r3, r2
 8008824:	b29a      	uxth	r2, r3
 8008826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800882a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008830:	1c9a      	adds	r2, r3, #2
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800883c:	b29b      	uxth	r3, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	b29a      	uxth	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008852:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b00      	cmp	r3, #0
 800885c:	d053      	beq.n	8008906 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800885e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	2b00      	cmp	r3, #0
 8008868:	d011      	beq.n	800888e <UART_RxISR_16BIT_FIFOEN+0xce>
 800886a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800886e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00b      	beq.n	800888e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2201      	movs	r2, #1
 800887c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008884:	f043 0201 	orr.w	r2, r3, #1
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800888e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d011      	beq.n	80088be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800889a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00b      	beq.n	80088be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2202      	movs	r2, #2
 80088ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088b4:	f043 0204 	orr.w	r2, r3, #4
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d011      	beq.n	80088ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 80088ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2204      	movs	r2, #4
 80088dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088e4:	f043 0202 	orr.w	r2, r3, #2
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d006      	beq.n	8008906 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7fe fda3 	bl	8007444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800890c:	b29b      	uxth	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d175      	bne.n	80089fe <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800891a:	e853 3f00 	ldrex	r3, [r3]
 800891e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008934:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008936:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800893a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800893c:	e841 2300 	strex	r3, r2, [r1]
 8008940:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e4      	bne.n	8008912 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3308      	adds	r3, #8
 800894e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800895a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800895e:	f023 0301 	bic.w	r3, r3, #1
 8008962:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3308      	adds	r3, #8
 800896c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008970:	65ba      	str	r2, [r7, #88]	; 0x58
 8008972:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008976:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800897e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e1      	bne.n	8008948 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008996:	2b01      	cmp	r3, #1
 8008998:	d12e      	bne.n	80089f8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b0:	f023 0310 	bic.w	r3, r3, #16
 80089b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089be:	647b      	str	r3, [r7, #68]	; 0x44
 80089c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1e6      	bne.n	80089a0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	f003 0310 	and.w	r3, r3, #16
 80089dc:	2b10      	cmp	r3, #16
 80089de:	d103      	bne.n	80089e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2210      	movs	r2, #16
 80089e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7fe fd31 	bl	8007458 <HAL_UARTEx_RxEventCallback>
 80089f6:	e002      	b.n	80089fe <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7f8 f88d 	bl	8000b18 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d006      	beq.n	8008a14 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008a06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f47f aefa 	bne.w	8008808 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a1a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a1e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d045      	beq.n	8008ab2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a2c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d23e      	bcs.n	8008ab2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3308      	adds	r3, #8
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	623b      	str	r3, [r7, #32]
   return(result);
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a4a:	677b      	str	r3, [r7, #116]	; 0x74
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3308      	adds	r3, #8
 8008a52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a54:	633a      	str	r2, [r7, #48]	; 0x30
 8008a56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e5      	bne.n	8008a34 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a14      	ldr	r2, [pc, #80]	; (8008abc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008a6c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	e853 3f00 	ldrex	r3, [r3]
 8008a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f043 0320 	orr.w	r3, r3, #32
 8008a82:	673b      	str	r3, [r7, #112]	; 0x70
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a8c:	61fb      	str	r3, [r7, #28]
 8008a8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a90:	69b9      	ldr	r1, [r7, #24]
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	e841 2300 	strex	r3, r2, [r1]
 8008a98:	617b      	str	r3, [r7, #20]
   return(result);
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e6      	bne.n	8008a6e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aa0:	e007      	b.n	8008ab2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	699a      	ldr	r2, [r3, #24]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0208 	orr.w	r2, r2, #8
 8008ab0:	619a      	str	r2, [r3, #24]
}
 8008ab2:	bf00      	nop
 8008ab4:	37a0      	adds	r7, #160	; 0xa0
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	08008367 	.word	0x08008367

08008ac0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d101      	bne.n	8008afe <HAL_UARTEx_DisableFifoMode+0x16>
 8008afa:	2302      	movs	r3, #2
 8008afc:	e027      	b.n	8008b4e <HAL_UARTEx_DisableFifoMode+0x66>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2224      	movs	r2, #36	; 0x24
 8008b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f022 0201 	bic.w	r2, r2, #1
 8008b24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d101      	bne.n	8008b72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b6e:	2302      	movs	r3, #2
 8008b70:	e02d      	b.n	8008bce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2224      	movs	r2, #36	; 0x24
 8008b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 0201 	bic.w	r2, r2, #1
 8008b98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f850 	bl	8008c54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d101      	bne.n	8008bee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008bea:	2302      	movs	r3, #2
 8008bec:	e02d      	b.n	8008c4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2224      	movs	r2, #36	; 0x24
 8008bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 0201 	bic.w	r2, r2, #1
 8008c14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	430a      	orrs	r2, r1
 8008c28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f812 	bl	8008c54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d108      	bne.n	8008c76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c74:	e031      	b.n	8008cda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c76:	2308      	movs	r3, #8
 8008c78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c7a:	2308      	movs	r3, #8
 8008c7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	0e5b      	lsrs	r3, r3, #25
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	f003 0307 	and.w	r3, r3, #7
 8008c8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	0f5b      	lsrs	r3, r3, #29
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ca0:	7b3a      	ldrb	r2, [r7, #12]
 8008ca2:	4911      	ldr	r1, [pc, #68]	; (8008ce8 <UARTEx_SetNbDataToProcess+0x94>)
 8008ca4:	5c8a      	ldrb	r2, [r1, r2]
 8008ca6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008caa:	7b3a      	ldrb	r2, [r7, #12]
 8008cac:	490f      	ldr	r1, [pc, #60]	; (8008cec <UARTEx_SetNbDataToProcess+0x98>)
 8008cae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	7b7a      	ldrb	r2, [r7, #13]
 8008cc0:	4909      	ldr	r1, [pc, #36]	; (8008ce8 <UARTEx_SetNbDataToProcess+0x94>)
 8008cc2:	5c8a      	ldrb	r2, [r1, r2]
 8008cc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008cc8:	7b7a      	ldrb	r2, [r7, #13]
 8008cca:	4908      	ldr	r1, [pc, #32]	; (8008cec <UARTEx_SetNbDataToProcess+0x98>)
 8008ccc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cce:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008cda:	bf00      	nop
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	08008e50 	.word	0x08008e50
 8008cec:	08008e58 	.word	0x08008e58

08008cf0 <__libc_init_array>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	4d0d      	ldr	r5, [pc, #52]	; (8008d28 <__libc_init_array+0x38>)
 8008cf4:	2600      	movs	r6, #0
 8008cf6:	4c0d      	ldr	r4, [pc, #52]	; (8008d2c <__libc_init_array+0x3c>)
 8008cf8:	1b64      	subs	r4, r4, r5
 8008cfa:	10a4      	asrs	r4, r4, #2
 8008cfc:	42a6      	cmp	r6, r4
 8008cfe:	d109      	bne.n	8008d14 <__libc_init_array+0x24>
 8008d00:	4d0b      	ldr	r5, [pc, #44]	; (8008d30 <__libc_init_array+0x40>)
 8008d02:	2600      	movs	r6, #0
 8008d04:	4c0b      	ldr	r4, [pc, #44]	; (8008d34 <__libc_init_array+0x44>)
 8008d06:	f000 f81f 	bl	8008d48 <_init>
 8008d0a:	1b64      	subs	r4, r4, r5
 8008d0c:	10a4      	asrs	r4, r4, #2
 8008d0e:	42a6      	cmp	r6, r4
 8008d10:	d105      	bne.n	8008d1e <__libc_init_array+0x2e>
 8008d12:	bd70      	pop	{r4, r5, r6, pc}
 8008d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d18:	3601      	adds	r6, #1
 8008d1a:	4798      	blx	r3
 8008d1c:	e7ee      	b.n	8008cfc <__libc_init_array+0xc>
 8008d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d22:	3601      	adds	r6, #1
 8008d24:	4798      	blx	r3
 8008d26:	e7f2      	b.n	8008d0e <__libc_init_array+0x1e>
 8008d28:	08008e68 	.word	0x08008e68
 8008d2c:	08008e68 	.word	0x08008e68
 8008d30:	08008e68 	.word	0x08008e68
 8008d34:	08008e6c 	.word	0x08008e6c

08008d38 <memset>:
 8008d38:	4402      	add	r2, r0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d100      	bne.n	8008d42 <memset+0xa>
 8008d40:	4770      	bx	lr
 8008d42:	f803 1b01 	strb.w	r1, [r3], #1
 8008d46:	e7f9      	b.n	8008d3c <memset+0x4>

08008d48 <_init>:
 8008d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4a:	bf00      	nop
 8008d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d4e:	bc08      	pop	{r3}
 8008d50:	469e      	mov	lr, r3
 8008d52:	4770      	bx	lr

08008d54 <_fini>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	bf00      	nop
 8008d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5a:	bc08      	pop	{r3}
 8008d5c:	469e      	mov	lr, r3
 8008d5e:	4770      	bx	lr
